<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Application Technical Profile</title>
      <!-- Google Fonts: Roboto and Material Symbols -->
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
      <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet" />
      <!-- Mermaid.js for diagram rendering -->
      <script src="https://cdn.jsdelivr.net/npm/mermaid@11.8.1/dist/mermaid.min.js"></script>
      <script>
         // Simple immediate check for Mermaid availability
         window.addEventListener('load', function() {
            if (typeof mermaid === 'undefined') {
               console.error('Mermaid library failed to load');
            } else {
               console.log('Mermaid library loaded successfully', mermaid.version || 'version unknown');
            }
         });
      </script>
      
      <!-- Critical stylesheet for Material Icons -->
      <style id="material-icons-critical">
         /* Ensure proper icon rendering and prevent emoji conversion */
         .material-symbols-outlined,
         .icon,
         [class*="icon"] {
            font-family: 'Material Symbols Outlined', sans-serif !important;
            font-weight: normal !important;
            font-style: normal !important;
            line-height: 1 !important;
            text-transform: none !important;
            letter-spacing: normal !important;
            word-wrap: normal !important;
            white-space: nowrap !important;
            direction: ltr !important;
            font-feature-settings: 'liga' !important;
            -webkit-font-feature-settings: 'liga' !important;
            -webkit-font-smoothing: antialiased !important;
            font-variant-emoji: text !important;
            text-rendering: optimizeLegibility !important;
            font-size: 20px !important;
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
         }
         
         /* Specifically target table content icons that might get corrupted during pagination */
         tbody .material-symbols-outlined,
         tbody .icon,
         tbody td .material-symbols-outlined,
         tbody td .icon {
            font-family: 'Material Symbols Outlined', sans-serif !important;
            font-variant-emoji: text !important;
            text-rendering: optimizeLegibility !important;
         }
         
         /* Specifically target pagination icons */
         .pagination-button .material-symbols-outlined,
         .pagination-button .icon {
            font-family: 'Material Symbols Outlined', sans-serif !important;
            font-variant-emoji: text !important;
            font-size: 20px !important;
         }
      </style>
      
      <!-- Table styling and pagination styles -->
      <style>
         /* Common styles */
         * {
            box-sizing: border-box;
         }
         
         body {
            font-family: 'Roboto', sans-serif;
            line-height: 1.5;
            color: #333;
            margin: 0;
            padding: 0;
         }
         
         /* Table container */
         .table-container {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 2rem;
         }
         
         /* Table pagination styles */
         .table-pagination {
            margin-top: 12px;
         }
         
         .pagination-top-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
         }
         
         .page-size-selector {
            display: flex;
            align-items: center;
         }
         
         .page-size-label {
            margin-right: 8px;
            font-size: 14px;
            color: #555;
            padding-left: 4px;
         }
         
         .page-size-select {
            padding: 4px 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            min-width: 60px;
         }
         
         .pagination-info {
            font-size: 14px;
            color: #555;
            padding: 4px 0;
            padding-right: 4px;
            text-align: right;
         }
         
         .pagination-nav {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 8px;
         }
         
         .pagination-nav-buttons,
         .pagination-next-buttons {
            display: flex;
            align-items: center;
            justify-content: center;
         }
         
         .pagination-page-numbers {
            display: flex;
            align-items: center;
            margin: 0 10px;
         }
         
         /* Pagination buttons */
         .pagination-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 36px;
            height: 36px;
            padding: 4px 8px;
            margin: 0 3px;
            border: none;
            border-radius: 50%;
            background: transparent;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.15s ease;
            box-shadow: none;
            color: #5f6368;
            user-select: none;
            outline: none;
         }
         
         .pagination-button:hover:not(:disabled) {
            background-color: rgba(0, 0, 0, 0.04);
         }
         
         .pagination-button:disabled {
            opacity: 0.5;
            cursor: default;
            color: #bdc1c6;
            background: transparent;
         }
         
         .pagination-button.active {
            background-color: #0071ce;
            color: white;
            font-weight: 500;
         }
         
         .pagination-button.ellipsis {
            color: #5f6368;
            pointer-events: none;
         }
         
         /* Table grouping styles */
         .table-group-controls {
            margin-bottom: 16px;
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            padding: 8px 12px;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
            transition: background-color 0.2s ease, border-color 0.2s ease;
         }
         
         .group-title {
            margin-right: 16px;
            font-weight: 500;
            display: flex;
            align-items: center;
            color: #333;
            transition: color 0.2s ease;
         }
         
         .group-options {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
         }
         
         .group-option {
            padding: 6px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
            cursor: pointer;
            transition: all 0.2s ease;
         }
         
         .group-option:hover:not(.active) {
            background-color: #f0f0f0;
         }
         
         .group-option.active {
            background-color: #0071ce;
            color: #fff;
            border: 1px solid #0071ce;
            font-weight: 500;
         }
         
         .group-header {
            background-color: #f5f7f9;
            transition: background-color 0.2s ease;
         }
         
         .group-header td {
            padding: 0 !important;
         }
         
         .group-header-content {
            display: flex;
            align-items: center;
            padding: 10px;
            background-color: #f5f7f9;
            border-radius: 4px;
            transition: background-color 0.2s ease;
         }
         
         .group-toggle {
            margin-right: 8px;
            color: #0071ce;
            transition: color 0.2s ease;
         }
         
         .group-header-title {
            font-weight: 500;
            color: #333;
            transition: color 0.2s ease;
         }
         
         .group-count {
            margin-left: 12px;
            font-size: 0.85em;
            color: #666;
            background-color: rgba(0, 113, 206, 0.1);
            padding: 2px 8px;
            border-radius: 12px;
            transition: all 0.2s ease;
         }
         
         .collapsed-row {
            display: none !important;
         }
         
         tr.first-in-group td {
            border-top: 1px solid #e0e0e0;
            transition: border-color 0.2s ease;
         }
         
         .group-header:hover {
            background-color: #eef1f5;
         }
         
         .group-tooltip {
            font-size: 0.75em;
            color: #666;
            margin-left: 8px;
            padding: 2px 6px;
            background: rgba(0, 113, 206, 0.08);
            border-radius: 4px;
            transition: all 0.2s ease;
         }

         /* Dark mode styles for table grouping */
         @media (prefers-color-scheme: dark) {
            body {
               background-color: #1a202c !important;
               color: #e2e8f0 !important;
            }
            
            .table-group-controls {
               background-color: #2d3748 !important;
               border: 1px solid #4a5568 !important;
               box-shadow: none !important;
            }
            
            .group-title {
               color: #cbd5e0 !important;
            }
            
            .group-option {
               background-color: #4a5568 !important;
               border: 1px solid #718096 !important;
               color: #e2e8f0 !important;
               box-shadow: none !important;
            }
            
            .group-option:hover:not(.active) {
               background-color: #718096 !important;
               border-color: #a0aec0 !important;
            }
            
            .group-option.active {
               background-color: #3182ce !important;
               color: #ffffff !important;
               border: 1px solid #3182ce !important;
               box-shadow: none !important;
            }
            
            .group-header {
               background-color: #2d3748 !important;
            }
            
            .group-header-content {
               background-color: #2d3748 !important;
            }
            
            .group-toggle {
               color: #4299e1 !important;
            }
            
            .group-header-title {
               color: #e2e8f0 !important;
            }
            
            .group-count {
               color: #cbd5e0 !important;
               background-color: rgba(66, 153, 225, 0.2) !important;
               border: none !important;
            }
            
            tr.first-in-group td {
               border-top: 1px solid #4a5568 !important;
            }
            
            .group-header:hover {
               background-color: #4a5568 !important;
            }
            
            .group-header:hover .group-header-content {
               background-color: #4a5568 !important;
            }
            
            .group-tooltip {
               color: #cbd5e0 !important;
               background: rgba(66, 153, 225, 0.15) !important;
               border: none !important;
            }
         }

         /* Force dark mode styles - Alternative approach */
         .dark-mode body,
         [data-theme="dark"] body {
            background-color: var(--background-main) !important;
            color: var(--text-primary) !important;
         }

         .dark-mode .footer-wordmark{
            color: var(--text-primary) !important;
         }

         .dark-mode .tab-link
         {
            color: var(--text-primary) !important;
            text-decoration: none !important;
            font-weight: 500 !important;
            transition: color 0.2s ease;
         }
         
         .dark-mode .table-group-controls,
         [data-theme="dark"] .table-group-controls {
            background-color: var(--background-main) !important;
            border: 1px solid var(--border-color) !important;
            box-shadow: none !important;
         }
         
         .dark-mode .group-title,
         [data-theme="dark"] .group-title {
            color: var(--text-primary) !important;
         }
         
         .dark-mode .group-option,
         [data-theme="dark"] .group-option {
            background-color: var(--border-color) !important;
            border: none !important;
            color: var(--text-primary) !important;
            box-shadow: none !important;
         }
         
         .dark-mode .group-option:hover:not(.active),
         [data-theme="dark"] .group-option:hover:not(.active) {
            background-color: var(--background-button) !important;
            border-color: none !important;
         }
         
         .dark-mode .group-option.active,
         [data-theme="dark"] .group-option.active {
            background-color: var(--product-accent) !important;
            color: var(--text-primary) !important;
            border: none !important;
            box-shadow: none !important;
         }

         .dark-mode .group-header-content{
            background-color: var(--background-main) !important;
         }

         .dark-mode .group-header-title
         {
            color: var(--text-primary) !important;
         }

         .dark-mode .group-tooltip{
            color: var(--text-primary) !important;
            background-color: var(--border-color) !important;
            border: none !important;
         }

         .dark-mode .group-count{
            background-color: rgba(0, 113, 206, 0.1) !important;
            border: none !important;
            color: rgb(0, 113, 206) !important;
         }

         .dark-mode .floating-toc-link:hover{
            background-color: var(--product-accent) !important;
         }


         .dark-mode .pagination-nav{
            background-color: var(--background-main) !important;          
            border: 1px solid var(--border-color) !important;
            box-shadow: none !important;
         }

         .dark-mode .pagination-button.page-number {
            color: var(--text-primary) !important;
         }

         .dark-mode .pagination-button.page-number.active {
            background-color: var(--product-accent) !important;
            color: var(--text-primary) !important;
            border: none !important;
            box-shadow: none !important;
         }

         .dark-mode .pagination-button.page-number:hover:not(.active) {
            background-color: var(--product-accent) !important;
            border-color: none !important;
            color: var(--text-primary) !important;
         }

         .dark-mode .pagination-button.next, .dark-mode .pagination-button.prev, .dark-mode .pagination-button.first, .dark-mode .pagination-button.last {
            background-color: var(--background-main) !important;
            border-color: none !important;
            color: var(--text-primary) !important;
         }

         /* Enhanced light mode styles for better contrast */
         @media (prefers-color-scheme: light) {
            .table-group-controls {
               background-color: #ffffff;
               border: 1px solid #e2e8f0;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            }
            
            .group-option {
               background-color: #f8f9fa;
               border: 1px solid #d1d5db;
               color: #374151;
               box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            }
            
            .group-option:hover:not(.active) {
               background-color: #e5e7eb;
               border-color: #9ca3af;
            }
            
            .group-option.active {
               background-color: #0071ce;
               color: #ffffff;
               border: 1px solid #0071ce;
               box-shadow: 0 2px 4px rgba(0, 113, 206, 0.2);
            }
            
            .group-count {
               background-color: rgba(0, 113, 206, 0.1);
               border: 1px solid rgba(0, 113, 206, 0.2);
            }
            
            .group-tooltip {
               background: rgba(0, 113, 206, 0.08);
               border: 1px solid rgba(0, 113, 206, 0.15);
            }
         }

         /* MERMAID DIAGRAM THEMING */
         .mermaid-container {
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            overflow-x: auto;
            text-align: center;
            transition: background-color 0.3s ease, border-color 0.3s ease;
            
            /* Use CSS variables for consistent theming */
            background-color: var(--background-main);
            border: 1px solid var(--border-color);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
         }

         .mermaid-container svg {
            max-width: 100%;
            height: auto;
            background-color: transparent !important;
         }

         /* Global font styling for all Mermaid diagrams */
         .mermaid-container svg text,
         .mermaid-container svg tspan,
         .mermaid-container svg .nodeLabel,
         .mermaid-container svg .edgeLabel,
         .mermaid-container svg .label,
         .mermaid-container svg .titleText {
            font-family: 'Roboto', 'Segoe UI', Arial, sans-serif !important;
            font-size: 14px !important;
         }

         /* Ensure text visibility in dark mode Mermaid diagrams */
         .dark-mode .mermaid-container svg text,
         [data-theme="dark"] .mermaid-container svg text {
            fill: var(--text-primary) !important;
         }

         .dark-mode .mermaid-container svg .node rect,
         [data-theme="dark"] .mermaid-container svg .node rect {
            stroke: var(--border-color) !important;
         }

         .dark-mode .mermaid-container svg .edgePath path,
         [data-theme="dark"] .mermaid-container svg .edgePath path {
            stroke: var(--border-color) !important;
         }

         /* Light mode Mermaid container */
         @media (prefers-color-scheme: light) {
            .mermaid-container {
               box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }
         }

         /* Dark mode Mermaid container */
         @media (prefers-color-scheme: dark) {
            .mermaid-container {
               box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
            }
         }

         /* Force dark mode Mermaid styling */
         .dark-mode .mermaid-container,
         [data-theme="dark"] .mermaid-container {
            background-color: var(--background-main) !important;
            border: 1px solid var(--border-color) !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5) !important;
         }

         /* Force light mode Mermaid styling */
         .light-mode .mermaid-container,
         [data-theme="light"] .mermaid-container {
            background-color: var(--background-main) !important;
            border: 1px solid var(--border-color) !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
         }

         /* GOOGLE-LIKE LOADING INDICATOR */
         .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(2px);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
         }

         .loading-overlay.show {
            opacity: 1;
            visibility: visible;
         }

         .loading-dots {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 16px;
         }

         .loading-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--background-button);
            margin: 0 3px;
            animation: pulse 1.5s ease-in-out infinite;
         }

         .loading-dot:nth-child(1) { animation-delay: 0s; }
         .loading-dot:nth-child(2) { animation-delay: 0.2s; }
         .loading-dot:nth-child(3) { animation-delay: 0.4s; }
         .loading-dot:nth-child(4) { animation-delay: 0.6s; }

         .loading-text {
            font-family: 'Roboto', sans-serif;
            font-size: 14px;
            color: var(--text-primary);
            margin-bottom: 8px;
            text-align: center;
         }

         .loading-progress {
            width: 200px;
            height: 4px;
            background-color: #e8eaed;
            border-radius: 2px;
            overflow: hidden;
            position: relative;
         }

         .loading-progress-bar {
            height: 100%;
            background-color:var(--background-button);
            border-radius: 2px;
            position: absolute;
            left: -100%;
            animation: progress 2s ease-in-out infinite;
         }

         /* Dark mode loading overlay */
         .dark-mode .loading-overlay,
         [data-theme="dark"] .loading-overlay {
            background-color: var(--background-main);
         }

         .dark-mode .loading-dot,
         [data-theme="dark"] .loading-dot {
            background-color: var(--background-button);
         }

         .dark-mode .loading-text,
         [data-theme="dark"] .loading-text {
            color: var(--text-primary);
         }

         .dark-mode .loading-progress,
         [data-theme="dark"] .loading-progress {
            background-color: var(--background-main);
         }

         .dark-mode .loading-progress-bar,
         [data-theme="dark"] .loading-progress-bar {
            background-color: var(--background-button);
         }

         /* Animations */
         @keyframes pulse {
            0%, 20% { 
               transform: scale(1); 
               opacity: 1; 
            }
            50% { 
               transform: scale(1.3); 
               opacity: 0.7; 
            }
            80%, 100% { 
               transform: scale(1); 
               opacity: 1; 
            }
         }

         @keyframes progress {
            0% {
               left: -100%;
               width: 0%;
            }
            50% {
               left: 0%;
               width: 100%;
            }
            100% {
               left: 100%;
               width: 0%;
            }
         }

         /* Loading indicator for specific sections */
         .section-loading {
            position: relative;
         }

         .section-loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(1px);
            z-index: 100;
            display: flex;
            justify-content: center;
            align-items: center;
         }

         .dark-mode .section-loading::after,
         [data-theme="dark"] .section-loading::after {
            background-color: rgba(26, 32, 44, 0.8);
         }
      </style>
     
      <!-- Table sorting and grouping functionality -->
      <script>
         // --- MERMAID DIAGRAM RENDERING ---
         
         // Loading indicator management
         let loadingTasks = new Set();
         
         function showLoading(message = 'Loading...', taskId = 'default') {
             const overlay = document.getElementById('loadingOverlay');
             const loadingText = document.getElementById('loadingText');
             
             if (overlay && loadingText) {
                 loadingTasks.add(taskId);
                 loadingText.textContent = message;
                 overlay.classList.add('show');
                 console.log(`Loading started: ${message} (task: ${taskId})`);
             }
         }
         
         function hideLoading(taskId = 'default') {
             loadingTasks.delete(taskId);
             console.log(`Loading task completed: ${taskId}, ${loadingTasks.size} tasks remaining`);
             
             // Only hide if no other tasks are running
             if (loadingTasks.size === 0) {
                 const overlay = document.getElementById('loadingOverlay');
                 if (overlay) {
                     // Add a small delay to prevent flicker for quick operations
                     setTimeout(() => {
                         // Double-check that no new tasks were added during the delay
                         if (loadingTasks.size === 0) {
                             overlay.classList.remove('show');
                             console.log(`All loading tasks completed - hiding overlay`);
                         }
                     }, 100); // Reduced delay from 300ms to 100ms
                 }
             }
         }
         
         function updateLoadingMessage(message, taskId = 'default') {
             if (loadingTasks.has(taskId)) {
                 const loadingText = document.getElementById('loadingText');
                 if (loadingText) {
                     loadingText.textContent = message;
                 }
             }
         }

         function initializeMermaidRendering() {
             showLoading('Initializing diagram renderer...', 'mermaid-init');
             
             try {
                 // Detect current theme
                 const isDarkMode = document.documentElement.classList.contains('dark-mode') || 
                                   document.documentElement.getAttribute('data-theme') === 'dark' ||
                                   window.matchMedia('(prefers-color-scheme: dark)').matches;
                 
                 // Get theme-specific configuration
                 const themeConfig = getMermaidThemeConfig(isDarkMode);
                 
                 updateLoadingMessage('Configuring diagram themes...', 'mermaid-init');
                 
                 // Configure Mermaid with comprehensive theme settings
                 mermaid.initialize({
                     startOnLoad: false, // Important! We manually control the rendering
                     securityLevel: 'loose', // Allow all diagram features
                     htmlLabels: true, // Enable HTML labels for better text rendering
                     theme: themeConfig.theme,
                     themeVariables: themeConfig.themeVariables,
                     flowchart: {
                         useMaxWidth: true,
                         htmlLabels: true,
                         curve: 'basis'
                     },
                     sequence: {
                         useMaxWidth: true,
                         wrap: true
                     },
                     class: {
                         useMaxWidth: true
                     },
                     state: {
                         useMaxWidth: true
                     },
                     er: {
                         useMaxWidth: true
                     },
                     journey: {
                         useMaxWidth: true
                     },
                     gantt: {
                         useMaxWidth: true
                     },
                     pie: {
                         useMaxWidth: true
                     },
                     // Simplified configuration - remove complex settings that might cause issues
                     logLevel: 'error',
                     suppressErrorRendering: false
                 });
                 console.log(`Mermaid initialized successfully with ${isDarkMode ? 'dark' : 'light'} theme`);
                 hideLoading('mermaid-init');
             } catch (error) {
                 console.error('Error initializing Mermaid:', error);
                 hideLoading('mermaid-init');
             }
         }

         // Get comprehensive theme configuration for Mermaid
         function getMermaidThemeConfig(isDarkMode) {
             // Get CSS variables from the document
             const rootStyles = getComputedStyle(document.documentElement);
             const backgroundMain = rootStyles.getPropertyValue('--background-main').trim();
             const textPrimary = rootStyles.getPropertyValue('--text-primary').trim();
             const textSecondary = rootStyles.getPropertyValue('--text-secondary').trim();
             const borderColor = rootStyles.getPropertyValue('--border-color').trim();
             const backgroundCard = rootStyles.getPropertyValue('--background-card').trim();
             const backgroundHover = rootStyles.getPropertyValue('--background-hover').trim();
             const productAccent = rootStyles.getPropertyValue('--product-accent').trim();
             
             if (isDarkMode) {
                 return {
                     theme: 'dark',
                     themeVariables: {
                         // Core theme colors using CSS variables
                         darkMode: true,
                         background: backgroundMain,
                         primaryColor: productAccent, // Use the accent color for primary elements
                         primaryTextColor: textPrimary,
                         primaryBorderColor: borderColor,
                         lineColor: borderColor,
                         
                         // Font configuration
                         fontFamily: "'Roboto', 'Segoe UI', Arial, sans-serif",
                         fontSize: '14px',
                         
                         // Secondary colors
                         secondaryColor: backgroundCard,
                         tertiaryColor: backgroundHover,
                         
                         // Text colors - all using CSS variables
                         textColor: textPrimary,
                         darkTextColor: textPrimary,
                         mainBkg: backgroundCard,
                         secondBkg: backgroundHover,
                         tertiaryBkg: backgroundMain,
                         
                         // Node and connector styling
                         nodeBkg: backgroundCard,
                         nodeBorder: borderColor,
                         clusterBkg: backgroundMain,
                         clusterBorder: borderColor,
                         defaultLinkColor: productAccent,
                         titleColor: textPrimary,
                         edgeLabelBackground: backgroundMain,
                         
                         // Specific diagram type colors
                         actorBorder: borderColor,
                         actorBkg: backgroundCard,
                         actorTextColor: textPrimary,
                         actorLineColor: borderColor,
                         signalColor: textPrimary,
                         signalTextColor: textPrimary,
                         
                         // Flowchart colors - readable and distinguishable
                         fillType0: '#4285f4', // Blue - good contrast in dark mode
                         fillType1: '#81c995', // Light green
                         fillType2: '#fdd663', // Yellow
                         fillType3: '#f28b82', // Light red
                         fillType4: '#ce93d8', // Light purple
                         fillType5: '#ffab91', // Light orange
                         fillType6: '#80deea', // Light cyan
                         fillType7: '#a5d6a7', // Another green shade
                         
                         // Class diagram colors
                         classText: textPrimary,
                         
                         // State diagram colors
                         labelColor: textPrimary,
                         altBackground: backgroundCard,
                         
                         // ER diagram colors
                         entityBkg: backgroundCard,
                         entityTextColor: textPrimary,
                         relationLabelColor: textPrimary,
                         
                         // Journey diagram colors
                         taskBkgColor: backgroundCard,
                         taskTextColor: textPrimary,
                         activeTaskBkgColor: productAccent,
                         activeTaskBorderColor: borderColor,
                         gridColor: borderColor,
                         section0: '#4285f4',
                         section1: '#81c995',
                         section2: '#fdd663',
                         section3: '#f28b82'
                     }
                 };
             } else {
                 return {
                     theme: 'default',
                     themeVariables: {
                         // Core theme colors using CSS variables
                         background: backgroundMain,
                         primaryColor: productAccent,
                         primaryTextColor: textPrimary,
                         primaryBorderColor: borderColor,
                         lineColor: borderColor,
                         
                         // Font configuration
                         fontFamily: "'Roboto', 'Segoe UI', Arial, sans-serif",
                         fontSize: '14px',
                         
                         // Secondary colors
                         secondaryColor: backgroundCard,
                         tertiaryColor: backgroundHover,
                         
                         // Text colors - all using CSS variables
                         textColor: textPrimary,
                         darkTextColor: textPrimary,
                         mainBkg: backgroundCard,
                         secondBkg: backgroundHover,
                         tertiaryBkg: backgroundMain,
                         
                         // Node and connector styling
                         nodeBkg: backgroundCard,
                         nodeBorder: borderColor,
                         clusterBkg: backgroundMain,
                         clusterBorder: borderColor,
                         defaultLinkColor: productAccent,
                         titleColor: textPrimary,
                         edgeLabelBackground: backgroundMain,
                         
                         // Specific diagram type colors
                         actorBorder: borderColor,
                         actorBkg: backgroundCard,
                         actorTextColor: textPrimary,
                         actorLineColor: borderColor,
                         signalColor: textPrimary,
                         signalTextColor: textPrimary,
                         
                         // Flowchart colors - readable in light mode
                         fillType0: '#0071ce', // Primary blue
                         fillType1: '#1e8e3e', // Green
                         fillType2: '#f9ab00', // Amber/Yellow
                         fillType3: '#d93025', // Red
                         fillType4: '#9c27b0', // Purple
                         fillType5: '#ff5722', // Deep orange
                         fillType6: '#00acc1', // Cyan
                         fillType7: '#689f38', // Light green
                         
                         // Class diagram colors
                         classText: textPrimary,
                         
                         // State diagram colors
                         labelColor: textPrimary,
                         altBackground: backgroundCard,
                         
                         // ER diagram colors
                         entityBkg: backgroundCard,
                         entityTextColor: textPrimary,
                         relationLabelColor: textPrimary,
                         
                         // Journey diagram colors
                         taskBkgColor: backgroundCard,
                         taskTextColor: textPrimary,
                         activeTaskBkgColor: productAccent,
                         activeTaskBorderColor: borderColor,
                         gridColor: borderColor,
                         section0: '#0071ce',
                         section1: '#1e8e3e',
                         section2: '#f9ab00',
                         section3: '#d93025'
                     }
                 };
             }
         }

         function renderMermaidDiagrams() {
             // Find all mermaid code blocks - be more specific in the selector
             const mermaidBlocks = document.querySelectorAll('pre.mermaid');
             
             if (mermaidBlocks.length === 0) {
                 console.log('No Mermaid diagrams found to render');
                 return;
             }
             
             showLoading(`Preparing ${mermaidBlocks.length} diagram${mermaidBlocks.length > 1 ? 's' : ''}...`, 'mermaid-render');
             console.log(`Found ${mermaidBlocks.length} Mermaid diagrams to render`);
             
             let processedCount = 0;
             let successCount = 0;
             let errorCount = 0;
             
             const updateProgress = () => {
                 processedCount++;
                 updateLoadingMessage(
                     `Rendering diagrams... ${processedCount}/${mermaidBlocks.length} (${successCount} successful, ${errorCount} errors)`,
                     'mermaid-render'
                 );
                 
                 // Hide loading when all diagrams are processed
                 if (processedCount >= mermaidBlocks.length) {
                     clearTimeout(maxTimeout); // Clear the fallback timeout
                     setTimeout(() => {
                         hideLoading('mermaid-render');
                     }, 200); // Small delay to show completion message
                 }
             };
             
             // Set a maximum timeout to ensure loading doesn't hang indefinitely
             const maxTimeout = setTimeout(() => {
                 console.warn('Forcing loading to complete after maximum timeout');
                 hideLoading('mermaid-render');
             }, 30000); // 30 second maximum timeout
             
             mermaidBlocks.forEach((preBlock, index) => {
                 try {
                     // Skip if already processed
                     if (preBlock.classList.contains('mermaid-processed')) {
                         console.log(`Skipping diagram ${index + 1} - already processed`);
                         updateProgress(); // Still count this as processed
                         return;
                     }
                     
                     // Check if there's already a rendered container
                     const existingContainer = preBlock.nextElementSibling?.classList.contains('mermaid-container') ||
                                             preBlock.previousElementSibling?.classList.contains('mermaid-container');
                     if (existingContainer) {
                         console.log(`Skipping diagram ${index + 1} - container already exists`);
                         updateProgress(); // Still count this as processed
                         return;
                     }
                     
                     // Get the code element inside the pre block
                     const codeElement = preBlock.querySelector('code');
                     if (!codeElement) {
                         console.warn(`No code element found in mermaid block ${index + 1}`);
                         errorCount++;
                         updateProgress();
                         return;
                     }
                     
                     // Get the mermaid code content from the code element
                     let mermaidCode = codeElement.textContent || codeElement.innerText;
                     
                     // Skip if empty
                     if (!mermaidCode.trim()) {
                         console.warn(`Empty mermaid code in block ${index + 1}`);
                         errorCount++;
                         updateProgress();
                         return;
                     }
                     
                     // Clean up the code
                     mermaidCode = mermaidCode.trim();
                     
                     // Debug: Log the first few lines of the code to verify content
                     const firstLines = mermaidCode.split('\n').slice(0, 3).join('\n');
                     console.log(`Diagram ${index + 1} content preview:`, firstLines);
                     
                     // Validate this is actually Mermaid syntax, not CSS or other content
                     if (mermaidCode.includes('font-family:') || mermaidCode.includes('keyframes') || mermaidCode.includes('.mermaid-')) {
                         console.error(`Block ${index + 1} contains CSS instead of Mermaid syntax, skipping`);
                         errorCount++;
                         updateProgress();
                         return;
                     }
                     
                     // Validate and fix common syntax issues
                     mermaidCode = validateAndFixMermaidSyntax(mermaidCode);
                     
                     // Detect diagram type for specific handling
                     const diagramType = detectDiagramType(mermaidCode);
                     console.log(`Rendering ${diagramType} diagram ${index + 1}`);
                     
                     // Create a unique ID for this diagram
                     const diagramId = `mermaid-diagram-${index}-${Date.now()}`;
                     
                     // Create container for the rendered diagram with enhanced styling
                     const container = document.createElement('div');
                     container.id = diagramId;
                     container.className = 'mermaid-container';
                     
                     // Apply CSS variable-based styling that adapts to theme
                     const isDarkMode = document.documentElement.classList.contains('dark-mode') || 
                                       document.documentElement.getAttribute('data-theme') === 'dark' ||
                                       window.matchMedia('(prefers-color-scheme: dark)').matches;
                     
                     // Use CSS variables for consistent theming
                     container.style.cssText = `
                         text-align: center;
                         margin: 20px 0;
                         padding: 20px;
                         border: 1px solid var(--border-color);
                         border-radius: 8px;
                         background-color: var(--background-main);
                         box-shadow: ${isDarkMode ? '0 2px 8px rgba(0, 0, 0, 0.5)' : '0 2px 4px rgba(0, 0, 0, 0.1)'};
                         overflow-x: auto;
                         transition: background-color 0.3s ease, border-color 0.3s ease;
                     `;
                     
                     // Insert the container after the pre block
                     preBlock.parentNode.insertBefore(container, preBlock.nextSibling);
                     preBlock.style.display = 'none'; // Hide original but keep for reference
                     
                     // Add timeout to prevent hanging
                     const renderTimeout = setTimeout(() => {
                         console.error(`Rendering timeout for ${diagramType} diagram ${index + 1}`);
                         container.innerHTML = `
                             <div style="color: #ff6b35; padding: 20px; text-align: center;">
                                 <strong>Rendering timeout for ${diagramType} diagram</strong><br>
                                 <small>The diagram took too long to render</small>
                             </div>
                         `;
                         errorCount++;
                         updateProgress();
                     }, 10000); // 10 second timeout
                     
                     // Render the diagram
                     mermaid.render(diagramId + '-svg', mermaidCode)
                         .then(({ svg, bindFunctions }) => {
                             clearTimeout(renderTimeout);
                             container.innerHTML = svg;
                             
                             // Apply bind functions if they exist (for interactive elements)
                             if (bindFunctions) {
                                 try {
                                     bindFunctions(container);
                                 } catch (bindError) {
                                     console.warn('Error applying bind functions:', bindError);
                                 }
                             }
                             
                             // Mark as processed
                             preBlock.classList.add('mermaid-processed');
                             
                             // Add diagram type as data attribute
                             container.setAttribute('data-diagram-type', diagramType);
                             
                             console.log(`Successfully rendered ${diagramType} diagram ${index + 1}`);
                             successCount++;
                             updateProgress();
                         })
                         .catch(error => {
                             clearTimeout(renderTimeout);
                             console.error(`Error rendering ${diagramType} diagram ${index + 1}:`, error);
                             
                             // Show detailed error information
                             const errorDetails = error.message || 'Unknown error occurred';
                             const codePreview = mermaidCode.length > 200 ? 
                                 mermaidCode.substring(0, 200) + '...' : 
                                 mermaidCode;
                             
                             container.innerHTML = `
                                 <div style="color: #d32f2f; padding: 20px; text-align: center; border: 1px solid #d32f2f; border-radius: 4px; background-color: #ffebee;">
                                     <strong>Error rendering ${diagramType} diagram:</strong><br>
                                     <small>${errorDetails}</small><br>
                                     <details style="margin-top: 10px;">
                                         <summary>Show diagram code</summary>
                                         <pre style="text-align: left; background: #f5f5f5; padding: 10px; margin-top: 10px; border-radius: 4px; white-space: pre-wrap; word-wrap: break-word;">${codePreview}</pre>
                                     </details>
                                 </div>
                             `;
                             errorCount++;
                             updateProgress();
                         });
                         
                 } catch (error) {
                     console.error(`Error processing Mermaid block ${index + 1}:`, error);
                     errorCount++;
                     updateProgress();
                 }
             });
             
             // Fallback: if no diagrams were found or processed, hide loading immediately
             if (mermaidBlocks.length === 0) {
                 console.log('No Mermaid diagrams found');
                 clearTimeout(maxTimeout);
                 hideLoading('mermaid-render');
             }
         }

         function detectDiagramType(code) {
             const trimmedCode = code.trim().toLowerCase();
             
             if (trimmedCode.startsWith('graph') || trimmedCode.startsWith('flowchart')) return 'flowchart';
             if (trimmedCode.startsWith('sequencediagram')) return 'sequence';
             if (trimmedCode.startsWith('classdiagram')) return 'class';
             if (trimmedCode.startsWith('statediagram')) return 'state';
             if (trimmedCode.startsWith('erdiagram')) return 'er';
             if (trimmedCode.startsWith('journey')) return 'user-journey';
             if (trimmedCode.startsWith('gantt')) return 'gantt';
             if (trimmedCode.startsWith('pie')) return 'pie';
             if (trimmedCode.startsWith('gitgraph')) return 'gitgraph';
             if (trimmedCode.startsWith('mindmap')) return 'mindmap';
             if (trimmedCode.startsWith('timeline')) return 'timeline';
             if (trimmedCode.startsWith('quadrantchart')) return 'quadrant';
             if (trimmedCode.startsWith('xychart')) return 'xy';
             if (trimmedCode.startsWith('block')) return 'block';
             if (trimmedCode.startsWith('packet')) return 'packet';
             if (trimmedCode.startsWith('tree')) return 'tree';
             
             return 'unknown';
         }

         function validateAndFixMermaidSyntax(code) {
             let fixedCode = code.trim();
             
             // Remove any HTML entities that might cause issues
             fixedCode = fixedCode
                 .replace(/&amp;/g, '&')
                 .replace(/&lt;/g, '<')
                 .replace(/&gt;/g, '>')
                 .replace(/&#39;/g, "'")
                 .replace(/&quot;/g, '"');
             
             return fixedCode;
         }

         // Update Mermaid theme (used for theme switching)
         function updateMermaidTheme() {
             showLoading('Updating diagram themes...', 'theme-update');
             
             try {
                 // Re-initialize Mermaid with new theme
                 initializeMermaidRendering();
                 
                 // Re-render all diagrams
                 const processedDiagrams = document.querySelectorAll('.mermaid-processed');
                 if (processedDiagrams.length > 0) {
                     updateLoadingMessage('Re-rendering diagrams with new theme...', 'theme-update');
                     
                     // Reset processed state
                     processedDiagrams.forEach(diagram => {
                         diagram.classList.remove('mermaid-processed');
                     });
                     
                     // Remove existing rendered containers
                     const containers = document.querySelectorAll('.mermaid-container');
                     containers.forEach(container => container.remove());
                     
                     // Show original code blocks
                     const hiddenBlocks = document.querySelectorAll('pre.mermaid[style*="display: none"]');
                     hiddenBlocks.forEach(block => {
                         block.style.display = '';
                     });
                     
                     // Re-render
                     renderMermaidDiagrams();
                 }
                 
                 hideLoading('theme-update');
             } catch (error) {
                 console.error('Error updating Mermaid theme:', error);
                 hideLoading('theme-update');
             }
         }
      </script>
   </head>
   <body>
      <!-- Google-like Loading Overlay -->
      <div id="loadingOverlay" class="loading-overlay">
         <div class="loading-dots">
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
            <div class="loading-dot"></div>
         </div>
         <div class="loading-text" id="loadingText">Loading...</div>
         <div class="loading-progress">
            <div class="loading-progress-bar"></div>
         </div>
      </div>

      <script>
         document.addEventListener('DOMContentLoaded', function() {
            showLoading('Initializing application...', 'app-init');
            
            // Apply dark mode detection and styling
            updateLoadingMessage('Applying theme settings...', 'app-init');
            applyThemeDetection();
            
            // Initialize Mermaid diagrams
            if (typeof mermaid !== 'undefined') {
               updateLoadingMessage('Setting up diagram renderer...', 'app-init');
               console.log('Initializing Mermaid diagrams...');
               initializeMermaidRendering();
               renderMermaidDiagrams();
            } else {
               console.warn('Mermaid library not loaded');
            }
            
            // Add sorting capability to all tables
            updateLoadingMessage('Preparing interactive tables...', 'app-init');
            makeTablesSortable();
            
            // Add grouping capability to tables with specific columns
            makeTablesGroupable();
            
            // Add pagination to all tables
            makeTablesPaginated();
            
            hideLoading('app-init');
         });
         
         function applyThemeDetection() {
            // Function to apply dark mode
            function applyDarkMode() {
               document.body.classList.add('dark-mode');
               document.documentElement.setAttribute('data-theme', 'dark');
               console.log('Dark mode applied');
               
               // Update Mermaid diagrams theme
               if (typeof updateMermaidTheme === 'function') {
                  setTimeout(updateMermaidTheme, 100);
               }
            }
            
            // Function to apply light mode
            function applyLightMode() {
               document.body.classList.remove('dark-mode');
               document.documentElement.setAttribute('data-theme', 'light');
               console.log('Light mode applied');
               
               // Update Mermaid diagrams theme
               if (typeof updateMermaidTheme === 'function') {
                  setTimeout(updateMermaidTheme, 100);
               }
            }
            
            // Check for dark mode preference
            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
               applyDarkMode();
            } else {
               applyLightMode();
            }
            
            // Listen for changes in color scheme preference
            if (window.matchMedia) {
               const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
               mediaQuery.addEventListener('change', function(e) {
                  showLoading('Switching theme...', 'theme-switch');
                  
                  if (e.matches) {
                     updateLoadingMessage('Applying dark theme...', 'theme-switch');
                     applyDarkMode();
                  } else {
                     updateLoadingMessage('Applying light theme...', 'theme-switch');
                     applyLightMode();
                  }
                  
                  // Update Mermaid diagrams with new theme
                  if (typeof updateMermaidTheme === 'function') {
                     updateMermaidTheme();
                  }
                  
                  hideLoading('theme-switch');
               });
            }
         }
         
         function makeTablesPaginated() {
            const tables = document.querySelectorAll('.table-container table');
            const defaultPageSize = 20;
            
            tables.forEach((table) => {
                // Skip tables that shouldn't be paginated
                if (table.classList.contains('no-pagination')) {
                    return;
                }
                
                // Mark table as paginated
                table.setAttribute('data-paginated', 'true');
                table.setAttribute('data-page-size', String(defaultPageSize));
                table.setAttribute('data-current-page', '1');
                
                // Ensure the table has necessary DOM structure
                let tbody = table.querySelector('tbody');
                if (!tbody) {
                    tbody = document.createElement('tbody');
                    
                    // Move all rows that aren't in thead to tbody
                    const rows = Array.from(table.querySelectorAll('tr'));
                    const theadRows = Array.from(table.querySelectorAll('thead tr'));
                    
                    rows.forEach(row => {
                        if (!theadRows.includes(row)) {
                            tbody.appendChild(row);
                        }
                    });
                    
                    table.appendChild(tbody);
                }
                
                // Store the original table data for pagination
                storeTableData(table);
                
                // Add pagination controls
                addPaginationControls(table);
                
                // Initial pagination
                paginateTable(table);
            });
         }
         
         function storeTableData(table) {
            // Store original rows for pagination
            const tbody = table.querySelector('tbody');
            if (!tbody) {
                return;
            }
            
            // Get all rows, including potential group headers
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            // Function to preserve icon data before storing
            const preserveIconData = (element) => {
                if (!element) return;
                
                const icons = element.querySelectorAll('.icon, .material-symbols-outlined, [class*="icon"]');
                icons.forEach((icon, index) => {
                    // Store the original icon text as a data attribute
                    const iconText = icon.textContent.trim();
                    if (iconText) {
                        icon.setAttribute('data-original-icon-text', iconText);
                        icon.setAttribute('data-icon-index', String(index));
                    }
                    
                    // Ensure proper classes and styling
                    if (!icon.classList.contains('material-symbols-outlined')) {
                        icon.classList.add('material-symbols-outlined');
                    }
                });
            };
            
            // Check if we're dealing with grouped data
            const hasGroups = rows.some(row => row.classList.contains('group-header'));
            
            // Clear previous pagination data to prevent stale data issues
            if (table._paginationGroupData) delete table._paginationGroupData;
            if (table._paginationData) delete table._paginationData;
            
            if (hasGroups) {
                // For grouped tables, we store the data differently
                const groupData = [];
                let currentGroup = null;
                let currentRows = [];
                
                rows.forEach(row => {
                    if (row.classList.contains('group-header')) {
                        // If we have a previous group, store it
                        if (currentGroup) {
                            groupData.push({
                                header: currentGroup,
                                rows: currentRows
                            });
                        }
                        // Start a new group
                        currentGroup = row;
                        currentRows = [];
                    } else {
                        // Add row to current group
                        currentRows.push(row);
                    }
                });
                
                // Don't forget to add the last group
                if (currentGroup) {
                    groupData.push({
                        header: currentGroup,
                        rows: currentRows
                    });
                }
                
                // Preserve icon data for all grouped elements
                groupData.forEach(group => {
                    preserveIconData(group.header);
                    group.rows.forEach(row => {
                        preserveIconData(row);
                    });
                });
                
                // Store the grouped data
                table._paginationGroupData = groupData;
            } else {
                // For regular tables, filter out any potential group headers just to be safe
                const dataRows = rows.filter(row => !row.classList.contains('group-header'));
                
                // Preserve icon data for all rows
                dataRows.forEach(row => {
                    preserveIconData(row);
                });
                
                table._paginationData = dataRows;
            }
         }
         
         function addPaginationControls(table) {
            const tableContainer = table.closest('.table-container');
            if (!tableContainer) return;
            
            // Create pagination container
            const paginationContainer = document.createElement('div');
            paginationContainer.className = 'table-pagination';
            
            // Top controls with page size selector
            const topControls = document.createElement('div');
            topControls.className = 'pagination-top-controls';
            
            const pageSizeSelector = document.createElement('div');
            pageSizeSelector.className = 'page-size-selector';
            
            // Get current page size from table attribute
            const currentPageSize = parseInt(table.getAttribute('data-page-size') || '20', 10);
            
            // Create the page size selector with the current value selected
            pageSizeSelector.innerHTML = `
                <span class="page-size-label">Items per page</span>
                <select class="page-size-select">
                    <option value="5" ${currentPageSize === 5 ? 'selected' : ''}>5</option>
                    <option value="10" ${currentPageSize === 10 ? 'selected' : ''}>10</option>
                    <option value="20" ${currentPageSize === 20 ? 'selected' : ''}>20</option>
                    <option value="50" ${currentPageSize === 50 ? 'selected' : ''}>50</option>
                    <option value="100" ${currentPageSize === 100 ? 'selected' : ''}>100</option>
                </select>
            `;
            
            // Add event listener for page size change
            const pageSizeSelect = pageSizeSelector.querySelector('.page-size-select');
            pageSizeSelect.addEventListener('change', function() {
                const newPageSize = parseInt(this.value);
                
                console.log(`Page size change requested: ${newPageSize} (from ${table.getAttribute('data-page-size')})`);
                
                // DEBUG: Let's see what's currently visible before making changes
                const currentlyVisibleRows = table.querySelectorAll('tbody tr');
                console.log(`Currently visible rows: ${currentlyVisibleRows.length}`);
                currentlyVisibleRows.forEach((row, index) => {
                    const firstCell = row.querySelector('td');
                    if (firstCell) {
                        console.log(`Row ${index + 1}: ${firstCell.textContent.trim()}`);
                    }
                });
                
                // Calculate pagination values  
                const oldPageSize = parseInt(table.getAttribute('data-page-size')) || 20;
                const oldCurrentPage = parseInt(table.getAttribute('data-current-page')) || 1;
                
                // Get total rows first
                let totalRows = 0;
                if (table._paginationGroupData) {
                    table._paginationGroupData.forEach(group => totalRows += group.rows.length);
                } else if (table._paginationData) {
                    totalRows = table._paginationData.length;
                }
                
                console.log(`Total rows in data: ${totalRows}`);
                
                // Calculate which item we're currently starting with
                const currentFirstItem = (oldCurrentPage - 1) * oldPageSize + 1;
                const currentLastItem = Math.min(currentFirstItem + oldPageSize - 1, totalRows);
                console.log(`Current view: items ${currentFirstItem} to ${currentLastItem}`);
                
                // For page size changes, we want to show the same starting item
                // but limit to the new page size
                let newCurrentPage = Math.ceil(currentFirstItem / newPageSize);
                const newTotalPages = Math.max(1, Math.ceil(totalRows / newPageSize));
                newCurrentPage = Math.max(1, Math.min(newCurrentPage, newTotalPages));
                
                // Calculate how many items we should actually show
                const newFirstItem = (newCurrentPage - 1) * newPageSize + 1;
                const newLastItem = Math.min(newFirstItem + newPageSize - 1, totalRows);
                
                console.log(`Page size change: totalRows=${totalRows}, oldPage=${oldCurrentPage}/${Math.ceil(totalRows / oldPageSize)}, newPage=${newCurrentPage}/${newTotalPages}`);
                console.log(`New view should show: items ${newFirstItem} to ${newLastItem} (max ${newPageSize} items)`);
                
                // IMPORTANT: If we're changing to a smaller page size, we might need to show fewer items
                // to maintain the same starting point
                const visibleItemsCount = currentLastItem - currentFirstItem + 1;
                const expectedNewItemsCount = Math.min(newPageSize, visibleItemsCount);
                console.log(`Currently showing ${visibleItemsCount} items, new page size allows ${newPageSize}, should show ${expectedNewItemsCount}`);
                
                // If the current view has fewer items than the new page size,
                // we might need to adjust to show the same number of items
                if (visibleItemsCount < newPageSize) {
                    console.log(`Adjusting to show same number of items (${visibleItemsCount}) instead of full page size (${newPageSize})`);
                }
                
                // Set new values
                table.setAttribute('data-page-size', newPageSize);
                table.setAttribute('data-current-page', newCurrentPage);
                
                // Execute pagination immediately to see the result
                setTimeout(() => {
                    console.log('Executing pagination with new settings');
                    
                    paginateTable(table);
                    
                    // NOTE: Removed emoji replacement - let's preserve original content exactly
                    const newVisibleRows = table.querySelectorAll('tbody tr');
                    console.log(`After pagination - visible rows: ${newVisibleRows.length}`);
                    newVisibleRows.forEach((row, index) => {
                        const firstCell = row.querySelector('td');
                        if (firstCell) {
                            console.log(`New Row ${index + 1}: ${firstCell.textContent.trim()}`);
                        }
                    });
                }, 0);
            });
            
            // Pagination info (showing X-Y of Z)
            const paginationInfo = document.createElement('div');
            paginationInfo.className = 'pagination-info';
            
            topControls.appendChild(pageSizeSelector);
            topControls.appendChild(paginationInfo);
            
            // Pagination navigation
            const paginationNav = document.createElement('div');
            paginationNav.className = 'pagination-nav';
            
            // We'll populate the navigation in the updatePaginationControls function
            
            // Add all elements to the container
            paginationContainer.appendChild(topControls);
            paginationContainer.appendChild(paginationNav);
            
            // Add to the DOM after the table
            tableContainer.appendChild(paginationContainer);
            
            // Initial update of pagination controls
            updatePaginationControls(table);
         }
         
         function paginateTable(table) {
            // Make sure we have valid numeric values for page size and current page
            const pageSize = Math.max(1, parseInt(table.getAttribute('data-page-size') || '20', 10));
            let currentPage = Math.max(1, parseInt(table.getAttribute('data-current-page') || '1', 10));
            const tbody = table.querySelector('tbody');
            
            if (!tbody) {
                return;
            }
            
            // Calculate total rows and total pages to make sure current page is valid
            let totalRows = 0;
            
            // Check if we have pagination data at all
            if (!table._paginationGroupData && !table._paginationData) {
                try {
                    storeTableData(table);
                } catch (error) {
                    console.error('Error storing table data:', error);
                    return;
                }
            }
            
            // Ensure we're not dealing with stale grouped data when we should be in ungrouped mode
            // Check if the table has actual group headers in the DOM
            const hasRealGroupHeaders = tbody.querySelector('.group-header') !== null;
            
            // If we have grouped data in memory but no actual group headers in the DOM, 
            // we need to rebuild the pagination data for the ungrouped state
            if (table._paginationGroupData && !hasRealGroupHeaders) {
                delete table._paginationGroupData;
                storeTableData(table);
            }
            
            // Calculate total rows from whichever data structure we have
            if (table._paginationGroupData) {
                table._paginationGroupData.forEach(group => totalRows += group.rows.length);
            } else if (table._paginationData) {
                totalRows = table._paginationData.length;
            } else {
                // Emergency fallback - get what's in the DOM right now
                const visibleRows = tbody.querySelectorAll('tr:not(.group-header)').length;
                totalRows = visibleRows;
                if (totalRows === 0) return; // Nothing to do if no rows
            }
            
            // Ensure we have at least one page
            const totalPages = Math.max(1, Math.ceil(totalRows / pageSize));
            
            // Ensure current page is valid (between 1 and totalPages)
            currentPage = Math.max(1, Math.min(currentPage, totalPages));
            
            // Update the current page attribute if it was adjusted
            if (currentPage !== parseInt(table.getAttribute('data-current-page') || '1', 10)) {
                table.setAttribute('data-current-page', String(currentPage));
            }
            
            // Clear the table body first
            tbody.innerHTML = '';
            
            // SIMPLIFIED APPROACH: Use direct cloning and restore proper Material Icons
            const simpleCloneRow = (originalRow) => {
                if (!originalRow) return null;
                
                // Clone the row
                const cloned = originalRow.cloneNode(true);
                
                // Convert any emojis back to proper Material Icons
                const emojiToIconMap = {
                    '🔴': { iconName: 'cancel', classes: 'icon icon-high', title: 'High/Critical' },
                    '🟠': { iconName: 'warning', classes: 'icon icon-medium', title: 'Medium/Warning' },
                    '🟢': { iconName: 'recommend', classes: 'icon icon-low', title: 'Low/Info' },
                    '✅': { iconName: 'check_circle', classes: 'icon icon-check', title: 'Yes/Used/Supported' },
                    '❌': { iconName: 'cancel', classes: 'icon icon-cross', title: 'No/Not Used/Unsupported' },
                    '❔': { iconName: 'help', classes: 'icon icon-question', title: 'Uncertain/Likely' },
                    '🟡': { iconName: 'warning', classes: 'icon icon-medium', title: 'Medium/Warning' },
                    '⚠️': { iconName: 'warning', classes: 'icon icon-medium', title: 'Medium/Warning' },
                    '⚠': { iconName: 'warning', classes: 'icon icon-medium', title: 'Medium/Warning' },
                    '✓': { iconName: 'check_circle', classes: 'icon icon-check', title: 'Yes/Used/Supported' },
                    '✗': { iconName: 'cancel', classes: 'icon icon-cross', title: 'No/Not Used/Unsupported' },
                    '❓': { iconName: 'help', classes: 'icon icon-question', title: 'Uncertain/Likely' },
                    '🔥': { iconName: 'cancel', classes: 'icon icon-high', title: 'High/Critical' },
                    '⭕': { iconName: 'cancel', classes: 'icon icon-cross', title: 'No/Not Used/Unsupported' },
                    '🛑': { iconName: 'cancel', classes: 'icon icon-high', title: 'High/Critical' }
                };
                
                // Find all text nodes and spans that might contain emojis
                const walker = document.createTreeWalker(
                    cloned,
                    NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT,
                    null,
                    false
                );
                
                const nodesToReplace = [];
                let node;
                
                while (node = walker.nextNode()) {
                    if (node.nodeType === Node.TEXT_NODE) {
                        const text = node.textContent;
                        for (const emoji in emojiToIconMap) {
                            if (text.includes(emoji)) {
                                nodesToReplace.push({
                                    node: node,
                                    emoji: emoji,
                                    iconData: emojiToIconMap[emoji],
                                    text: text
                                });
                                break;
                            }
                        }
                    } else if (node.nodeType === Node.ELEMENT_NODE && node.tagName === 'SPAN') {
                        const text = node.textContent.trim();
                        if (emojiToIconMap[text]) {
                            nodesToReplace.push({
                                node: node,
                                emoji: text,
                                iconData: emojiToIconMap[text],
                                isSpan: true
                            });
                        }
                    }
                }
                
                // Replace emojis with proper Material Icons
                nodesToReplace.forEach(replacement => {
                    if (replacement.isSpan) {
                        // Update span content to proper Material Icon name, use correct semantic classes
                        replacement.node.textContent = replacement.iconData.iconName;
                        replacement.node.className = replacement.iconData.classes + ' material-symbols-outlined';
                        replacement.node.title = replacement.iconData.title;
                        
                        // Apply proper Material Icons styling
                        replacement.node.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                        replacement.node.style.fontVariantEmoji = "text";
                    } else {
                        // For text nodes, create new icon span with correct semantic classes
                        const iconSpan = document.createElement('span');
                        iconSpan.className = replacement.iconData.classes + ' material-symbols-outlined';
                        iconSpan.textContent = replacement.iconData.iconName;
                        iconSpan.title = replacement.iconData.title;
                        iconSpan.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                        iconSpan.style.fontVariantEmoji = "text";
                        
                        // Replace the emoji in the text
                        const newText = replacement.text.replace(replacement.emoji, '');
                        if (newText.trim()) {
                            const textNode = document.createTextNode(newText);
                            replacement.node.parentNode.insertBefore(iconSpan, replacement.node);
                            replacement.node.parentNode.insertBefore(textNode, replacement.node);
                        } else {
                            replacement.node.parentNode.insertBefore(iconSpan, replacement.node);
                        }
                        replacement.node.parentNode.removeChild(replacement.node);
                    }
                });
                
                return cloned;
            };
            
            // Check if we're dealing with grouped data
            if (table._paginationGroupData) {
                // For grouped tables, pagination works differently
                const groupData = table._paginationGroupData;
                let totalRows = 0;
                groupData.forEach(group => totalRows += group.rows.length);
                
                // Calculate pagination
                const totalPages = Math.ceil(totalRows / pageSize);
                const startIdx = (currentPage - 1) * pageSize;
                const endIdx = Math.min(startIdx + pageSize, totalRows);
                
                let rowCount = 0;
                let addedRows = 0;
                
                // Add groups and their visible rows
                groupData.forEach(group => {
                    // Check if any rows from this group should be visible
                    const groupStartRow = rowCount;
                    const groupEndRow = rowCount + group.rows.length;
                    
                    // If any rows in this group are visible in the current page
                    if (groupEndRow > startIdx && groupStartRow < endIdx) {
                        // Add the group header
                        const clonedHeader = simpleCloneRow(group.header);
                        tbody.appendChild(clonedHeader);
                        
                        // Add visible rows from this group
                        for (let i = 0; i < group.rows.length; i++) {
                            if (rowCount >= startIdx && rowCount < endIdx) {
                                const clonedRow = simpleCloneRow(group.rows[i]);
                                tbody.appendChild(clonedRow);
                                addedRows++;
                            }
                            rowCount++;
                        }
                    } else {
                        rowCount += group.rows.length;
                    }
                });
                
                // Restore event listeners for group headers
                const groupHeaders = tbody.querySelectorAll('.group-header');
                groupHeaders.forEach(header => {
                    header.addEventListener('click', function() {
                        this.classList.toggle('collapsed');
                        const isCollapsed = this.classList.contains('collapsed');
                        const groupValue = this.getAttribute('data-group');
                        const groupRows = tbody.querySelectorAll(`tr[data-group="${groupValue}"]:not(.group-header)`);
                        
                        groupRows.forEach(row => {
                            if (isCollapsed) {
                                row.classList.add('collapsed-row');
                            } else {
                                row.classList.remove('collapsed-row');
                            }
                        });
                        
                        const icon = this.querySelector('.group-toggle');
                        if (icon) {
                            icon.textContent = isCollapsed ? 'chevron_right' : 'expand_more';
                            icon.className = 'material-symbols-outlined icon group-toggle';
                        }
                    });
                });
            } else {
                // Regular table pagination
                const rows = table._paginationData;
                if (!rows) return;
                
                // Calculate pagination
                const totalPages = Math.ceil(rows.length / pageSize);
                const startIdx = (currentPage - 1) * pageSize;
                const endIdx = Math.min(startIdx + pageSize, rows.length);
                
                // Add visible rows
                for (let i = startIdx; i < endIdx; i++) {
                    const clonedRow = simpleCloneRow(rows[i]);
                    tbody.appendChild(clonedRow);
                }
            }
            
            // Always update pagination controls at the end
            console.log('Calling updatePaginationControls...');
            // Force this to run after the current execution context
            // This ensures the table is fully updated before pagination controls are created
            setTimeout(() => {
                updatePaginationControls(table);
                
                // NOTE: Removed emoji replacement to preserve original content structure
            }, 0);
            console.log('=== Finished paginateTable ===');
         }
         
         function updatePaginationControls(table) {
            console.log('=== Starting updatePaginationControls ===');
            
            const pageSize = parseInt(table.getAttribute('data-page-size')) || 20;
            const currentPage = parseInt(table.getAttribute('data-current-page')) || 1;
            const tableContainer = table.closest('.table-container');
            const paginationContainer = tableContainer.querySelector('.table-pagination');
            
            console.log(`updatePaginationControls: pageSize=${pageSize}, currentPage=${currentPage}`);
            
            if (!paginationContainer) {
                console.error('No pagination container found');
                return;
            }
            
            // Find pagination elements
            const paginationInfo = paginationContainer.querySelector('.pagination-info');
            const paginationNav = paginationContainer.querySelector('.pagination-nav');
            
            // Calculate total rows
            let totalRows = 0;
            if (table._paginationGroupData) {
                table._paginationGroupData.forEach(group => totalRows += group.rows.length);
            } else if (table._paginationData) {
                totalRows = table._paginationData.length;
            }
            
            // Calculate pagination values
            const totalPages = Math.max(1, Math.ceil(totalRows / pageSize));
            const startItem = totalRows === 0 ? 0 : (currentPage - 1) * pageSize + 1;
            const endItem = Math.min(startItem + pageSize - 1, totalRows);
            
            // Update info text
            if (paginationInfo) {
                paginationInfo.textContent = `Showing ${startItem}-${endItem} of ${totalRows}`;
            }
            
            // Clear existing navigation
            if (paginationNav) {
                paginationNav.innerHTML = '';
            }
            
            console.log(`Final pagination state: totalRows=${totalRows}, pageSize=${pageSize}, totalPages=${totalPages}, currentPage=${currentPage}`);
            
            // Always show pagination nav div, but only add buttons if multiple pages
            if (paginationNav) {                
                console.log(`Pagination nav found, totalPages=${totalPages}`);
                
                // Create page buttons regardless of total pages
                // This ensures pagination controls are always visible after page size change
                console.log('Creating page buttons...');
                createPageButtons(paginationNav, currentPage, totalPages, table);
                
                // Make sure the page size selector shows the correct value
                const pageSizeSelect = paginationContainer.querySelector('.page-size-select');
                if (pageSizeSelect && pageSizeSelect.value != pageSize) {
                    console.log(`Updating page size selector from ${pageSizeSelect.value} to ${pageSize}`);
                    pageSizeSelect.value = pageSize;
                } else {
                    console.log(`Page size selector already shows correct value: ${pageSize}`);
                }
            } else {
                console.error('Pagination nav not found!');
            }
            
            console.log('=== Finished updatePaginationControls ===');
         }
         
         function createPageButtons(container, currentPage, totalPages, table) {
            // Validate inputs
            currentPage = Math.max(1, currentPage);
            totalPages = Math.max(1, totalPages);
            
            // Define button styles
            const buttonStyles = `
                border: none;
                background: transparent;
                color: #5f6368;
                padding: 8px 12px;
                margin: 0 2px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.2s ease;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                min-width: 32px;
                min-height: 32px;
            `;
            
            const disabledButtonStyles = `
                opacity: 0.38;
                cursor: not-allowed;
                pointer-events: none;
            `;
            
            // Ensure we have at least one page
            totalPages = Math.max(1, totalPages);
            
            // Create a div to hold the navigation buttons
            const navButtonsContainer = document.createElement('div');
            navButtonsContainer.className = 'pagination-nav-buttons';
            
            // First page button
            const firstBtn = document.createElement('button');
            firstBtn.className = 'pagination-button first';
            firstBtn.innerHTML = '<span class="material-symbols-outlined icon">first_page</span>';
            firstBtn.title = 'First Page';
            firstBtn.disabled = currentPage === 1;
            firstBtn.style.cssText = buttonStyles + (currentPage === 1 ? disabledButtonStyles : '');
            
            // Immediately fix the icon in this button
            const firstIcon = firstBtn.querySelector('span');
            if (firstIcon) {
                firstIcon.setAttribute('data-original-icon-text', 'first_page');
                firstIcon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                firstIcon.style.fontVariantEmoji = "text";
            }
            
            // Add hover effect - Updated Google style
            firstBtn.addEventListener('mouseover', function() {
                if (currentPage !== 1) {
                    this.style.backgroundColor = 'rgba(60, 64, 67, 0.08)';
                    this.style.color = '#202124';
                }
            });
            
            firstBtn.addEventListener('mouseout', function() {
                if (currentPage !== 1) {
                    this.style.backgroundColor = 'transparent';
                    this.style.color = '#5f6368';
                }
            });
            firstBtn.addEventListener('click', () => {
                table.setAttribute('data-current-page', '1');
                paginateTable(table);
            });
            navButtonsContainer.appendChild(firstBtn);
            
            // Previous button
            const prevBtn = document.createElement('button');
            prevBtn.className = 'pagination-button prev';
            prevBtn.innerHTML = '<span class="material-symbols-outlined icon">chevron_left</span>';
            prevBtn.title = 'Previous Page';
            prevBtn.disabled = currentPage === 1;
            prevBtn.style.cssText = buttonStyles + (currentPage === 1 ? disabledButtonStyles : '');
            
            // Immediately fix the icon in this button
            const prevIcon = prevBtn.querySelector('span');
            if (prevIcon) {
                prevIcon.setAttribute('data-original-icon-text', 'chevron_left');
                prevIcon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                prevIcon.style.fontVariantEmoji = "text";
            }
            
            // Add hover effect - Updated Google style
            prevBtn.addEventListener('mouseover', function() {
                if (currentPage !== 1) {
                    this.style.backgroundColor = 'rgba(60, 64, 67, 0.08)';
                    this.style.color = '#202124';
                }
            });
            
            prevBtn.addEventListener('mouseout', function() {
                if (currentPage !== 1) {
                    this.style.backgroundColor = 'transparent';
                    this.style.color = '#5f6368';
                }
            });
            prevBtn.addEventListener('click', () => {
                const newPage = Math.max(1, currentPage - 1);
                table.setAttribute('data-current-page', newPage);
                paginateTable(table);
            });
            navButtonsContainer.appendChild(prevBtn);
            
            // Add the nav buttons container to the main container
            container.appendChild(navButtonsContainer);
            
            // Create a div to hold the page number buttons
            const pageNumbersContainer = document.createElement('div');
            pageNumbersContainer.className = 'pagination-page-numbers';
            pageNumbersContainer.style.display = 'flex';
            pageNumbersContainer.style.alignItems = 'center';
            pageNumbersContainer.style.margin = '0 10px';
            
            // Google-style page numbers (always show current page and some context)
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            
            // Adjust if we're near the end
            if (endPage === totalPages) {
                startPage = Math.max(1, endPage - 4);
            }
            
            // For single page, ensure we show at least that one page
            if (totalPages === 1) {
                startPage = 1;
                endPage = 1;
            }
            
            // Add ellipsis at start if needed
            if (startPage > 1) {
                const ellipsisStart = document.createElement('span');
                ellipsisStart.className = 'pagination-button ellipsis';
                ellipsisStart.style.cssText = `
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    min-width: 36px;
                    height: 36px;
                    margin: 0 4px;
                    font-size: 14px;
                    color: #5f6368;
                `;
                ellipsisStart.textContent = '...';
                pageNumbersContainer.appendChild(ellipsisStart);
            }
            
            // Add page buttons
            for (let i = startPage; i <= endPage; i++) {
                const pageBtn = document.createElement('button');
                pageBtn.className = 'pagination-button page-number';
                pageBtn.style.cssText = buttonStyles;
                
                // Add hover effect - Updated Google style
                pageBtn.addEventListener('mouseover', function() {
                    if (i !== currentPage) {
                        this.style.backgroundColor = 'rgba(60, 64, 67, 0.08)'; // Transparent gray hover effect
                        this.style.color = '#202124';
                    }
                });
                
                pageBtn.addEventListener('mouseout', function() {
                    if (i !== currentPage) {
                        this.style.backgroundColor = 'transparent';
                        this.style.color = '#5f6368';
                    }
                });
                
                if (i === currentPage) {
                    pageBtn.classList.add('active');
                    pageBtn.style.backgroundColor = 'var(--product-accent)'; // Google Blue
                    pageBtn.style.color = 'white';
                    pageBtn.style.fontWeight = '500';
                    pageBtn.style.border = 'none';
                }
                
                pageBtn.textContent = i;
                pageBtn.addEventListener('click', () => {
                    table.setAttribute('data-current-page', i);
                    paginateTable(table);
                });
                pageNumbersContainer.appendChild(pageBtn);
            }
            
            // Add ellipsis at end if needed
            if (endPage < totalPages) {
                const ellipsisEnd = document.createElement('span');
                ellipsisEnd.className = 'pagination-button ellipsis';
                ellipsisEnd.style.cssText = `
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    min-width: 36px;
                    height: 36px;
                    margin: 0 4px;
                    font-size: 14px;
                    color: #5f6368;
                `;
                ellipsisEnd.textContent = '...';
                pageNumbersContainer.appendChild(ellipsisEnd);
            }
            
            // Add the page numbers container to the main container
            container.appendChild(pageNumbersContainer);
            
            // Create a div for the next/last buttons
            const nextButtonsContainer = document.createElement('div');
            nextButtonsContainer.className = 'pagination-next-buttons';
            nextButtonsContainer.style.display = 'flex';
            nextButtonsContainer.style.alignItems = 'center';
            
            // Next button
            const nextBtn = document.createElement('button');
            nextBtn.className = 'pagination-button next';
            nextBtn.innerHTML = '<span class="material-symbols-outlined icon">chevron_right</span>';
            nextBtn.title = 'Next Page';
            nextBtn.disabled = currentPage === totalPages;
            nextBtn.style.cssText = buttonStyles + (currentPage === totalPages ? disabledButtonStyles : '');
            
            // Immediately fix the icon in this button
            const nextIcon = nextBtn.querySelector('span');
            if (nextIcon) {
                nextIcon.setAttribute('data-original-icon-text', 'chevron_right');
                nextIcon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                nextIcon.style.fontVariantEmoji = "text";
            }
            
            // Add hover effect - Updated Google style
            nextBtn.addEventListener('mouseover', function() {
                if (currentPage !== totalPages) {
                    this.style.backgroundColor = 'rgba(60, 64, 67, 0.08)';
                    this.style.color = '#202124';
                }
            });
            
            nextBtn.addEventListener('mouseout', function() {
                if (currentPage !== totalPages) {
                    this.style.backgroundColor = 'transparent';
                    this.style.color = '#5f6368';
                }
            });
            nextBtn.addEventListener('click', () => {
                const newPage = Math.min(totalPages, currentPage + 1);
                table.setAttribute('data-current-page', newPage);
                paginateTable(table);
            });
            nextButtonsContainer.appendChild(nextBtn);
            
            // Last page button
            const lastBtn = document.createElement('button');
            lastBtn.className = 'pagination-button last';
            lastBtn.innerHTML = '<span class="material-symbols-outlined icon">last_page</span>';
            lastBtn.title = 'Last Page';
            lastBtn.disabled = currentPage === totalPages;
            lastBtn.style.cssText = buttonStyles + (currentPage === totalPages ? disabledButtonStyles : '');
            
            // Immediately fix the icon in this button
            const lastIcon = lastBtn.querySelector('span');
            if (lastIcon) {
                lastIcon.setAttribute('data-original-icon-text', 'last_page');
                lastIcon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                lastIcon.style.fontVariantEmoji = "text";
            }
            
            // Add hover effect - Updated Google style
            lastBtn.addEventListener('mouseover', function() {
                if (currentPage !== totalPages) {
                    this.style.backgroundColor = 'rgba(60, 64, 67, 0.08)';
                    this.style.color = '#202124';
                }
            });
            
            lastBtn.addEventListener('mouseout', function() {
                if (currentPage !== totalPages) {
                    this.style.backgroundColor = 'transparent';
                    this.style.color = '#5f6368';
                }
            });
            lastBtn.addEventListener('click', () => {
                table.setAttribute('data-current-page', totalPages);
                paginateTable(table);
            });
            nextButtonsContainer.appendChild(lastBtn);
            
            // Add the next buttons container to the main container
            container.appendChild(nextButtonsContainer);
            
            // Fix all icons in the pagination controls
            setTimeout(() => {
                const paginationIcons = container.querySelectorAll('.icon, .material-symbols-outlined');
                paginationIcons.forEach(icon => {
                    if (!icon.classList.contains('material-symbols-outlined')) {
                        icon.classList.add('material-symbols-outlined');
                    }
                    
                    icon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                    icon.style.fontWeight = "normal";
                    icon.style.fontStyle = "normal";
                    icon.style.fontVariantEmoji = "text"; // Prevent emoji rendering
                    
                    const iconText = icon.textContent.trim();
                    if (iconText) {
                        icon.innerHTML = '';
                        icon.textContent = iconText;
                    }
                });
            }, 0);
         }
         
         function makeTablesSortable() {
            const tables = document.querySelectorAll('.table-container table');
            
            tables.forEach(table => {
               const headers = table.querySelectorAll('th');
               
               headers.forEach((header, index) => {
                  // Skip columns that shouldn't be sortable (you can add a 'no-sort' class to specific headers)
                  if (header.classList.contains('no-sort')) return;
                  
                  // Add sorting indicators and cursor pointer
                  header.style.cursor = 'pointer';
                  header.style.position = 'relative';
                  header.setAttribute('data-sort-direction', '');
                  
                  // Create sort indicator element
                  const sortIndicator = document.createElement('span');
                  sortIndicator.className = 'sort-indicator';
                  sortIndicator.innerHTML = '&nbsp;⇕';
                  sortIndicator.style.fontSize = '0.8em';
                  sortIndicator.style.opacity = '0.6';
                  sortIndicator.style.marginLeft = '5px';
                  sortIndicator.style.display = 'inline-block';
                  header.appendChild(sortIndicator);
                  
                  // Add click event
                  header.addEventListener('click', function() {
                     sortTable(table, index, header);
                  });
               });
            });
         }
         
         function makeTablesGroupable() {
            const tables = document.querySelectorAll('.table-container table');
            
            // For debugging - add a small indicator to help identify if function is running
            console.log('Looking for groupable tables...', tables.length);
            
            tables.forEach((table, tableIndex) => {
               // Make sure the table has a thead
               const thead = table.querySelector('thead');
               if (!thead) return;
               
               const headers = Array.from(thead.querySelectorAll('th'));
               let groupableColumnIndices = [];
               
               // Make all columns groupable
               headers.forEach((header, index) => {
                  // Skip columns that shouldn't be groupable (you can add a 'no-group' class to specific headers)
                  if (header.classList.contains('no-group')) return;
                  
                  const headerText = header.textContent.trim();
                  
                  // Skip empty headers
                  if (headerText !== '') {
                     groupableColumnIndices.push({index: index, name: headerText});
                  }
               });
               
               // If there are any columns to group by, add group controls
               if (groupableColumnIndices.length > 0) {
                  addGroupingControlsToTable(table, groupableColumnIndices);
                  console.log(`Added grouping controls to table ${tableIndex+1} with ${groupableColumnIndices.length} columns`);
               }
            });
         }
         
         function addGroupingControlsToTable(table, groupableColumns) {
            const tableContainer = table.closest('.table-container');
            
            // Remove any existing grouping controls to prevent duplicates
            const existingControls = tableContainer.querySelector('.table-group-controls');
            if (existingControls) {
               existingControls.remove();
            }
            
            // Create grouping control panel with improved styling
            const groupingControls = document.createElement('div');
            groupingControls.className = 'table-group-controls';
            groupingControls.style.display = 'flex';
            groupingControls.style.flexWrap = 'wrap';
            groupingControls.style.alignItems = 'center';
            groupingControls.style.padding = '10px 12px';
            groupingControls.style.backgroundColor = '#f8f9fa';
            groupingControls.style.borderRadius = '4px';
            groupingControls.style.border = '1px solid #e0e0e0';
            
            // Add title with icon
            const groupTitle = document.createElement('div');
            groupTitle.className = 'group-title';
            groupTitle.style.marginRight = '16px';
            groupTitle.style.fontWeight = '500';
            groupTitle.style.display = 'flex';
            groupTitle.style.alignItems = 'center';
            
            const icon = document.createElement('span');
            icon.className = 'material-symbols-outlined';
            icon.textContent = 'filter_list';
            icon.style.marginRight = '6px';
            icon.style.fontSize = '20px';
            icon.style.color = '#0071ce';
            
            const titleText = document.createElement('span');
            titleText.textContent = 'Group by:';
            
            groupTitle.appendChild(icon);
            groupTitle.appendChild(titleText);
            groupingControls.appendChild(groupTitle);
            
            // Add controls for each groupable column
            const groupOptions = document.createElement('div');
            groupOptions.className = 'group-options';
            groupOptions.style.display = 'flex';
            groupOptions.style.flexWrap = 'wrap';
            groupOptions.style.gap = '8px';
            
            // Add "None" option with improved styling
            const noneOption = document.createElement('button');
            noneOption.className = 'group-option active';
            noneOption.textContent = 'None';
            noneOption.style.padding = '6px 12px';
            noneOption.style.border = '1px solid #ddd';
            noneOption.style.borderRadius = '4px';
            noneOption.style.backgroundColor = '#fff';
            noneOption.style.cursor = 'pointer';
            noneOption.style.transition = 'all 0.2s ease';
            
            // Active style
            if (noneOption.classList.contains('active')) {
               noneOption.style.backgroundColor = '#0071ce';
               noneOption.style.color = '#fff';
               noneOption.style.border = '1px solid #0071ce';
            }
            
            noneOption.onclick = function(event) {
               // Prevent event propagation
               event.stopPropagation();
               event.preventDefault();
               
               console.log('None option clicked - Starting grouping reset');
               
               try {
                  // Set this option as active first to provide visual feedback
                  setActiveGroupOption(groupOptions, this);
                  
                  // Add a small delay to ensure UI feedback happens before potentially intensive operation
                  setTimeout(() => {
                     // Ensure we clean up all grouping
                     resetGrouping(table);
                     console.log('None option: grouping reset complete');
                  }, 10);
               } catch (error) {
                  console.error('Error handling None option click:', error);
               }
            };
            
            // Add hover effect
            noneOption.onmouseover = function() {
               if (!this.classList.contains('active')) {
                  this.style.backgroundColor = '#f0f0f0';
               }
            };
            noneOption.onmouseout = function() {
               if (!this.classList.contains('active')) {
                  this.style.backgroundColor = '#fff';
               }
            };
            
            groupOptions.appendChild(noneOption);
            
            // Add column options with the same styling
            groupableColumns.forEach(column => {
               const option = document.createElement('button');
               option.className = 'group-option';
               option.textContent = column.name;
               option.style.padding = '6px 12px';
               option.style.border = '1px solid #ddd';
               option.style.borderRadius = '4px';
               option.style.backgroundColor = '#fff';
               option.style.cursor = 'pointer';
               option.style.transition = 'all 0.2s ease';
               
               // Add hover effect
               option.onmouseover = function() {
                  if (!this.classList.contains('active')) {
                     this.style.backgroundColor = '#f0f0f0';
                  }
               };
               option.onmouseout = function() {
                  if (!this.classList.contains('active')) {
                     this.style.backgroundColor = '#fff';
                  }
               };
               
               option.onclick = (event) => {
                  // Prevent event propagation
                  event.stopPropagation();
                  event.preventDefault();
                  
                  console.log(`Group option clicked: ${column.name}`);
                  groupTableByColumn(table, column.index, column.name);
                  setActiveGroupOption(groupOptions, option);
               };
               groupOptions.appendChild(option);
            });
            
            groupingControls.appendChild(groupOptions);
            
            // Insert controls before the table
            tableContainer.insertBefore(groupingControls, table);
         }
         
         function setActiveGroupOption(container, activeButton) {
            console.log('Setting active group option:', activeButton.textContent);
            
            // Remove active class and reset styles from all buttons
            const buttons = container.querySelectorAll('.group-option');
            buttons.forEach(button => {
               button.classList.remove('active');
               button.style.backgroundColor = '#fff';
               button.style.color = '#333';
               button.style.border = '1px solid #ddd';
            });
            
            // Add active class to the selected button
            activeButton.classList.add('active');
            
            // Apply active styles
            activeButton.style.backgroundColor = '#0071ce';
            activeButton.style.color = '#fff';
            activeButton.style.border = '1px solid #0071ce';
            activeButton.style.fontWeight = '500';
         }
         
         function groupTableByColumn(table, columnIndex, columnName) {
            // Implementation for grouping table by column
            
            // Get all rows except header
            const tbody = table.querySelector('tbody');
            if (!tbody) {
               console.error('No tbody found in table during grouping');
               return;
            }
            
            // First, ensure all existing group headers are removed
            const allRows = Array.from(tbody.querySelectorAll('tr'));
            const dataRows = allRows.filter(row => !row.classList.contains('group-header'));
            const existingGroups = tbody.querySelectorAll('.group-header');
            
            console.log(`Found ${allRows.length} total rows, ${dataRows.length} data rows, ${existingGroups.length} existing group headers`);
            
            // Make sure to remove existing group headers properly
            existingGroups.forEach(group => {
               if (group.parentNode) {
                  group.parentNode.removeChild(group);
               }
            });
            
            // Reset all rows to their default state
            dataRows.forEach(row => {
               row.style.display = '';
               row.removeAttribute('data-group');
               row.classList.remove('first-in-group', 'collapsed-row');
            });
            
            // Group the data - use a new empty object for clean grouping
            const groupedData = {};
            
            dataRows.forEach(row => {
               // Ensure we have the right index
               if (columnIndex >= row.cells.length) {
                  console.warn(`Column index ${columnIndex} out of bounds for row`, row);
                  return;
               }
               
               // Extract only the text content and ignore icons
               const cell = row.cells[columnIndex];
               if (!cell) {
                  console.warn(`No cell found at index ${columnIndex} for row`, row);
                  return;
               }
               
               let cellValue = '';
               
               // Function to extract text nodes only (no icon text)
               function extractTextOnly(element) {
                  // Special case for cells with icons + text pattern like "dangerous High"
                  // Try to find any direct text node that is not within an icon element
                  let directTextContent = '';
                  let hasFoundDirectText = false;
                  
                  // First, check if this is a cell with the specific structure we're targeting
                  // This usually means it has both an icon with text and visible text afterward
                  const iconElements = element.querySelectorAll('.icon, .icon-high, .icon-medium, .icon-low');
                  if (iconElements.length > 0) {
                     // Try to find text nodes that are direct children but not part of icons
                     for (let childNode of element.childNodes) {
                        // Text node that's a direct child
                        if (childNode.nodeType === 3 && childNode.textContent.trim()) {
                           directTextContent += childNode.textContent.trim() + ' ';
                           hasFoundDirectText = true;
                        }
                        // If it's a span that doesn't have icon classes, it might contain our text
                        else if (childNode.nodeType === 1 && 
                                !childNode.classList?.contains('icon') && 
                                !childNode.classList?.contains('icon-high') && 
                                !childNode.classList?.contains('icon-medium') && 
                                !childNode.classList?.contains('icon-low')) {
                           // Only extract text if it doesn't contain icon children
                           if (!childNode.querySelector('.icon')) {
                              directTextContent += childNode.textContent.trim() + ' ';
                              hasFoundDirectText = true;
                           }
                        }
                     }
                  }
                  
                  // If we found direct text, use that (this helps with the specific case of "dangerous High")
                  if (hasFoundDirectText) {
                     return directTextContent.trim();
                  }
                  
                  // Otherwise, use the more generic approach
                  let text = '';
                  for (let node of element.childNodes) {
                     if (node.nodeType === 3) { // Text node
                        text += node.textContent.trim() + ' ';
                     } else if (node.nodeType === 1) { // Element node
                        // Skip icon elements, elements with icon class
                        const classList = node.classList ? Array.from(node.classList) : [];
                        const hasIconClass = classList.some(cls => cls === 'icon' || cls.startsWith('icon-'));
                        const isIcon = hasIconClass || 
                                      node.tagName.toLowerCase() === 'i';
                                    
                        if (!isIcon) {
                           text += extractTextOnly(node);
                        }
                     }
                  }
                  return text;
               }
               
               cellValue = extractTextOnly(cell).trim();
               
               // If we couldn't extract text properly, fallback to full text
               if (!cellValue) {
                  cellValue = cell.textContent.trim();
               }
               
               // Handle empty values specially
               const normalizedValue = cellValue || '(Empty)';
               
               // Create the group if it doesn't exist yet
               if (!groupedData[normalizedValue]) {
                  groupedData[normalizedValue] = [];
               }
               
               // Add the row to the group
               groupedData[normalizedValue].push(row);
            });
            
            // Clear the tbody completely to start fresh
            while (tbody.firstChild) {
               tbody.removeChild(tbody.firstChild);
            }
            
            // Create a sorted array of group values
            const groupValues = Object.keys(groupedData).sort();
            console.log(`Created ${groupValues.length} groups`);
            
            // Add rows back with group headers
            groupValues.forEach(groupValue => {
               const rowsInThisGroup = groupedData[groupValue];
               console.log(`Adding group: "${groupValue}" with ${rowsInThisGroup.length} rows`);
               
               // Create group header
               const groupHeader = document.createElement('tr');
               groupHeader.className = 'group-header';
               groupHeader.setAttribute('data-group', groupValue);
               
               const groupCell = document.createElement('td');
               // Get the correct column count from thead
               const headerRow = table.querySelector('thead tr');
               const colCount = headerRow ? headerRow.cells.length : 
                               (rowsInThisGroup.length > 0 ? rowsInThisGroup[0].cells.length : 1);
               groupCell.colSpan = colCount;
               
               const groupContent = document.createElement('div');
               groupContent.className = 'group-header-content';
               groupContent.style.display = 'flex';
               groupContent.style.alignItems = 'center';
               groupContent.style.padding = '8px';
               groupContent.style.backgroundColor = '#f5f7f9';
               groupContent.style.borderRadius = '4px';
               
               const groupIcon = document.createElement('span');
               groupIcon.className = 'material-symbols-outlined icon group-toggle';
               groupIcon.textContent = 'expand_more';
               groupIcon.style.marginRight = '8px';
               groupIcon.style.color = '#0071ce';
               groupIcon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
               groupIcon.style.fontWeight = 'normal';
               groupIcon.style.fontSize = '20px';
               groupIcon.style.lineHeight = '1';
               groupIcon.style.display = 'flex';
               groupIcon.style.alignItems = 'center';
               groupIcon.style.justifyContent = 'center';
               
               const groupTitle = document.createElement('span');
               groupTitle.className = 'group-header-title';
               groupTitle.textContent = `${columnName}: ${groupValue}`;
               groupTitle.style.fontWeight = '500';
               groupTitle.style.color = '#333';
               
               const groupCount = document.createElement('span');
               groupCount.className = 'group-count';
               groupCount.textContent = `${rowsInThisGroup.length} items`;
               groupCount.style.marginLeft = '12px';
               groupCount.style.fontSize = '0.85em';
               groupCount.style.color = '#666';
               groupCount.style.backgroundColor = 'rgba(0, 113, 206, 0.1)';
               groupCount.style.padding = '2px 8px';
               groupCount.style.borderRadius = '12px';
               
               groupContent.appendChild(groupIcon);
               groupContent.appendChild(groupTitle);
               groupContent.appendChild(groupCount);
               groupCell.appendChild(groupContent);
               groupHeader.appendChild(groupCell);
               
               // Add toggle functionality and make it more obvious
               groupHeader.title = 'Click to expand/collapse group';
               groupHeader.style.cursor = 'pointer';
               
               /* Add tooltip text to make it clear this is collapsible
               const tooltipSpan = document.createElement('span');
               tooltipSpan.className = 'group-tooltip';
               tooltipSpan.textContent = 'Click to expand/collapse';
               tooltipSpan.style.fontSize = '0.75em';
               tooltipSpan.style.color = '#666';
               tooltipSpan.style.marginLeft = '8px';
               tooltipSpan.style.padding = '2px 6px';
               tooltipSpan.style.background = 'rgba(0, 113, 206, 0.08)';
               tooltipSpan.style.borderRadius = '4px';
               groupContent.appendChild(tooltipSpan);*/
               
               groupHeader.addEventListener('click', function(event) {
                  // Prevent event propagation
                  event.stopPropagation();
                  
                  this.classList.toggle('collapsed');
                  const isCollapsed = this.classList.contains('collapsed');
                  const groupValue = this.getAttribute('data-group');
                  
                  // Ensure we're getting the right rows by being more specific with our selector
                  // We need to escape special characters in the group value for the selector
                  const escapedGroupValue = groupValue.replace(/"/g, '\\"');
                  const groupRows = tbody.querySelectorAll(`tr[data-group="${escapedGroupValue}"]:not(.group-header)`);
                  
                  console.log(`Toggle group: "${groupValue}", Collapsed: ${isCollapsed}, Found rows: ${groupRows.length}`);
                  
                  // Toggle row visibility with CSS classes for better performance
                  groupRows.forEach(row => {
                     if (isCollapsed) {
                        row.classList.add('collapsed-row');
                        row.style.display = 'none';
                     } else {
                        row.classList.remove('collapsed-row');
                        row.style.display = '';
                     }
                  });
                  
                  // Update the icon with proper styling
                  const icon = this.querySelector('.group-toggle');
                  if (icon) {
                     icon.textContent = isCollapsed ? 'chevron_right' : 'expand_more';
                     
                     // Ensure consistent icon styling after text change
                     icon.style.fontFamily = "'Material Symbols Outlined', sans-serif";
                     icon.style.fontWeight = 'normal';
                     icon.style.fontSize = '20px';
                     icon.style.lineHeight = '1';
                     icon.style.display = 'flex';
                     icon.style.alignItems = 'center';
                     icon.style.justifyContent = 'center';
                  }
                  
                  /* Update tooltip text based on collapsed state
                  const tooltipElement = this.querySelector('.group-tooltip');
                  if (tooltipElement) {
                     tooltipElement.textContent = isCollapsed ? 'Click to expand' : 'Click to collapse';
                  }*/
                  
                  // Show a count of collapsed items when collapsed
                  const existingBadge = this.querySelector('.collapsed-count');
                  if (existingBadge) {
                     existingBadge.remove();
                  }
                  
                  if (isCollapsed) {
                     const count = groupRows.length;
                     const countBadge = document.createElement('span');
                     countBadge.className = 'collapsed-count';
                     countBadge.textContent = `(${count} items hidden)`;
                     countBadge.style.fontSize = '0.7em';
                     countBadge.style.padding = '2px 8px';
                     countBadge.style.backgroundColor = 'rgba(0, 113, 206, 0.15)';
                     countBadge.style.color = 'rgba(0, 113, 206, 0.9)';
                     countBadge.style.borderRadius = '10px';
                     countBadge.style.marginLeft = '10px';
                     countBadge.style.fontWeight = '500';
                     countBadge.style.border = '1px solid rgba(0, 113, 206, 0.3)';
                     
                     const headerContent = this.querySelector('.group-header-content');
                     if (headerContent) {
                        headerContent.appendChild(countBadge);
                     }
                  }
               });
               
               // Add the group header to the tbody
               tbody.appendChild(groupHeader);
               
               // Add the rows for this group with data-group attribute
               groupedData[groupValue].forEach((row, i) => {
                  // Set data-group attribute for proper identification
                  row.setAttribute('data-group', groupValue);
                  
                  // Style the first row in each group differently if needed
                  if (i === 0) {
                     row.classList.add('first-in-group');
                  }
                  
                  // Add the row to the tbody
                  tbody.appendChild(row);
               });
            });
            
            // Make sure we have consistent styles for grouped table
            const style = document.createElement('style');
            style.textContent = `
               .group-header { background-color: #f5f7f9; }
               .group-header td { padding: 0 !important; }
               .group-header-content { padding: 10px; }
               .collapsed-row { display: none; }
               tr.first-in-group td { border-top: 1px solid #e0e0e0; }
               .group-header:hover { background-color: #eef1f5; }
               
               /* Material Icons proper styling */
               .material-symbols-outlined.icon {
                  font-family: 'Material Symbols Outlined', sans-serif !important;
                  font-weight: normal !important;
                  font-style: normal !important;
                  font-size: 20px !important;
                  line-height: 1 !important;
                  display: inline-flex !important;
                  align-items: center !important;
                  justify-content: center !important;
                  text-transform: none !important;
                  letter-spacing: normal !important;
                  overflow-wrap: normal !important;
                  white-space: nowrap !important;
                  direction: ltr !important;
                  -webkit-font-smoothing: antialiased !important;
               }
            `;
            
            // Only add the style if it doesn't exist yet
            if (!document.querySelector('style[data-group-styles="true"]')) {
                style.setAttribute('data-group-styles', 'true');
                document.head.appendChild(style);
            }
            
            console.log('Group headers and rows added to table');
            
            // Re-apply pagination if it's enabled
            if (table.hasAttribute('data-paginated')) {
               console.log('Table is paginated, re-applying pagination after grouping');
               // Re-store table data since grouping has changed the structure
               storeTableData(table);
               // Reset to first page and update
               table.setAttribute('data-current-page', '1');
               paginateTable(table);
            }
         }
         
         function resetGrouping(table) {
            console.log('Resetting table grouping - START');
            const tbody = table.querySelector('tbody');
            if (!tbody) {
               console.error('No tbody found in table during resetGrouping');
               return;
            }
            
            try {
               // Backup of all non-header rows (important data rows)
               const allRows = Array.from(tbody.querySelectorAll('tr'));
               const dataRows = allRows.filter(row => !row.classList.contains('group-header'));
               
               console.log(`Found ${allRows.length} total rows, ${dataRows.length} data rows to restore`);
               
               // Make a clean copy of each data row to avoid any reference issues
               const cleanDataRows = dataRows.map(row => {
                  const clonedRow = row.cloneNode(true);
                  
                  // Reset any grouping-related attributes and styling
                  clonedRow.removeAttribute('data-group');
                  clonedRow.classList.remove('first-in-group', 'collapsed-row');
                  clonedRow.style.display = '';
                  
                  // Ensure any row that was hidden is now visible
                  if (row.style.display === 'none') {
                     clonedRow.style.display = '';
                  }
                  
                  return clonedRow;
               });
               
               console.log(`Created ${cleanDataRows.length} clean rows for regrouping`);
               
               // Clear the tbody completely to start fresh
               console.log('Clearing tbody to start fresh');
               while (tbody.firstChild) {
                  tbody.removeChild(tbody.firstChild);
               }
               
               // Re-add all data rows in their original order with clean state
               console.log('Re-adding clean data rows to table');
               cleanDataRows.forEach(row => tbody.appendChild(row));
               
               // Re-apply pagination if it's enabled
               if (table.hasAttribute('data-paginated')) {
                  console.log('Table is paginated, restoring pagination after group reset');
                  // Re-store table data since we've reset the grouping
                  storeTableData(table);
                  // Reset to first page and update
                  table.setAttribute('data-current-page', '1');
                  paginateTable(table);
               }
               
               console.log('Resetting table grouping - COMPLETE');
            } catch (error) {
               console.error('Error in resetGrouping:', error);
            }
         }
         
         function sortTable(table, columnIndex, header) {
            const sortDirection = header.getAttribute('data-sort-direction');
            const newDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            
            // Reset all headers
            const headers = table.querySelectorAll('th');
            headers.forEach(h => {
               h.setAttribute('data-sort-direction', '');
               const indicator = h.querySelector('.sort-indicator');
               if (indicator) indicator.innerHTML = '&nbsp;⇕';
               indicator.style.opacity = '0.6';
            });
            
            // Set current header
            header.setAttribute('data-sort-direction', newDirection);
            const sortIndicator = header.querySelector('.sort-indicator');
            sortIndicator.innerHTML = newDirection === 'asc' ? '&nbsp;↑' : '&nbsp;↓';
            sortIndicator.style.opacity = '1';
            
            // Check if table is grouped
            const tbody = table.querySelector('tbody');
            const groupHeaders = tbody.querySelectorAll('.group-header');
            
            if (groupHeaders.length > 0) {
               // Table is grouped, sort within each group
               const groups = {};
               
               // Collect all groups
               groupHeaders.forEach(header => {
                  const groupValue = header.getAttribute('data-group');
                  groups[groupValue] = [];
                  
                  // Find all rows in this group
                  const groupRows = tbody.querySelectorAll(`tr[data-group="${groupValue}"]:not(.group-header)`);
                  groupRows.forEach(row => groups[groupValue].push(row));
                  
                  // Sort rows in this group
                  groups[groupValue].sort((rowA, rowB) => {
                     const cellA = rowA.cells[columnIndex].textContent.trim();
                     const cellB = rowB.cells[columnIndex].textContent.trim();
                     
                     // Check if values are numbers
                     const numA = parseFloat(cellA);
                     const numB = parseFloat(cellB);
                     
                     if (!isNaN(numA) && !isNaN(numB)) {
                        return newDirection === 'asc' ? numA - numB : numB - numA;
                     } else {
                        // String comparison
                        return newDirection === 'asc' 
                           ? cellA.localeCompare(cellB) 
                           : cellB.localeCompare(cellA);
                     }
                  });
                  
                  // Remove existing rows
                  groupRows.forEach(row => {
                     tbody.removeChild(row);
                  });
                  
                  // Insert sorted rows after their group header
                  let insertAfter = header;
                  const isGroupCollapsed = header.classList.contains('collapsed');
                  
                  groups[groupValue].forEach((row, idx) => {
                     // Preserve the collapsed state from the group header
                     if (isGroupCollapsed) {
                        row.classList.add('collapsed-row');
                     } else {
                        row.classList.remove('collapsed-row');
                     }
                     
                     // Add first-in-group class to the first row
                     if (idx === 0) {
                        row.classList.add('first-in-group');
                     } else {
                        row.classList.remove('first-in-group');
                     }
                     
                     if (insertAfter.nextSibling) {
                        tbody.insertBefore(row, insertAfter.nextSibling);
                     } else {
                        tbody.appendChild(row);
                     }
                     insertAfter = row;
                  });
               });
               
            } else {
               // Normal sorting (no groups)
               const rows = Array.from(tbody.querySelectorAll('tr'));
               
               // Sort rows
               rows.sort((rowA, rowB) => {
                  const cellA = rowA.cells[columnIndex].textContent.trim();
                  const cellB = rowB.cells[columnIndex].textContent.trim();
                  
                  // Check if values are numbers
                  const numA = parseFloat(cellA);
                  const numB = parseFloat(cellB);
                  
                  if (!isNaN(numA) && !isNaN(numB)) {
                     return newDirection === 'asc' ? numA - numB : numB - numA;
                  } else {
                     // String comparison
                     return newDirection === 'asc' 
                        ? cellA.localeCompare(cellB) 
                        : cellB.localeCompare(cellA);
                  }
               });
               
               // Remove existing rows
               rows.forEach(row => tbody.removeChild(row));
               
               // Add sorted rows
               rows.forEach(row => tbody.appendChild(row));
            }
            
            // Re-apply pagination if it's enabled
            if (table.hasAttribute('data-paginated')) {
               // Re-store table data since sorting has changed the structure
               storeTableData(table);
               paginateTable(table);
            }
            
            // Add a highlight effect on sorting
            tbody.style.transition = 'background-color 0.3s ease';
            tbody.style.backgroundColor = 'rgba(0, 113, 206, 0.05)';
            setTimeout(() => {
               tbody.style.backgroundColor = '';
            }, 500);
         }
      </script>

      <style>
         :root {
         /* Light Theme */
         --cgd-blue: #0071CE;
         --product-accent: #0071CE;
         --product-accent-hover: #00559A;
         --text-primary: #202124;
         --text-secondary: #5f6368;
         --border-color: #dadce0;
         --background-main: #f8f9fa;
         --background-card: #ffffff;
         --background-hover: #f1f3f4;
         --background-button: #0071CE;
         --background-button-text: #ffffff;
         /* Icon Colors */
         --color-red: #d93025;
         --color-amber: #f9ab00;
         --color-green: #1e8e3e;
         }
        html.dark-mode {
         /* Dark Theme - Improved for better visibility and contrast */
         --product-accent: #4285f4;
         --product-accent-hover: #5294ff;
         --text-primary: #ffffff;
         --text-secondary: #ffffff;
         --border-color: #5f6368;
         --background-main: #1a1a1a;
         --background-card: #2d2d2d;
         --background-hover: #404040;
         --background-button: #4285f4;
         --background-button-text: #ffffff;
         /* Improved Icon Colors for dark mode */
         --color-red: #f28b82;
         --color-amber: #fdd663;
         --color-green: #81c995;
         }
         html {
         color: var(--text-primary);
         background-color: var(--background-main);
         box-sizing: border-box;
         scroll-behavior: smooth;
         }
         *, *::before, *::after { box-sizing: inherit; }
         body {
         margin: 0; padding: 0; width: 100%;
         font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
         font-size: 14px; line-height: 1.6;
         text-rendering: optimizeLegibility;
         overflow-x: hidden;
         text-align: left;
         color: var(--text-primary);
         background-color: var(--background-main);
         transition: background-color 0.3s ease, color 0.3s ease;
         }
         /* --- HEADER --- */
         /* --- READING PROGRESS INDICATOR --- */
         .reading-progress {
         position: fixed;
         top: 0;
         left: 0;
         width: 100%;
         height: 3px;
         background-color: rgba(0, 113, 206, 0.1);
         z-index: 103;
         opacity: 0;
         transition: opacity 0.3s ease;
         }
         .reading-progress.show {
         opacity: 1;
         }
         .reading-progress-fill {
         height: 100%;
         background: linear-gradient(90deg, var(--product-accent) 0%, #00559A 100%);
         width: 0%;
         transition: width 0.1s ease-out;
         border-radius: 0 2px 2px 0;
         box-shadow: 0 0 10px rgba(0, 113, 206, 0.3);
         }
         .reading-progress-text {
         position: fixed;
         top: 8px;
         right: 20px;
         background-color: var(--background-card);
         color: var(--text-secondary);
         font-size: 0.75rem;
         font-weight: 500;
         padding: 0.25rem 0.5rem;
         border-radius: 12px;
         border: 1px solid var(--border-color);
         z-index: 104;
         opacity: 0;
         visibility: hidden;
         transition: all 0.3s ease;
         backdrop-filter: blur(8px);
         }
         .reading-progress-text.show {
         opacity: 1;
         visibility: visible;
         }
         .header {
         background-color: var(--background-card);
         box-shadow: 0 1px 2px rgba(0,0,0,0.1);
         position: sticky;
         top: 0;
         z-index: 102;
         width: 100%;
         border-bottom: 1px solid var(--border-color);
         transition: background-color 0.3s ease, border-color 0.3s ease;
         }
         .header-container {
         display: flex;
         align-items: center;
         justify-content: space-between;
         padding: 0.5rem 1.5rem; /* Reduced padding */
         max-width: 100%;
         margin: 0 auto;
         }
         .header-brand { display: flex; align-items: center; }
         .header-logo { height: 38px; margin-right: 1rem; }
         .header-title { font-size: 18px; font-weight: 600; color: var(--cgd-blue); padding: 0; }
         .header-controls { display: flex; align-items: center; gap: 0.5rem; }
         .support-button {
         background-color: var(--background-button);
         color: var(--background-button-text);
         border: 1px solid transparent;
         border-radius: 4px;
         padding: 8px 16px;
         font-size: 14px;
         font-weight: 500;
         text-decoration: none;
         cursor: pointer;
         transition: background-color 0.2s ease, box-shadow 0.2s ease;
         margin-left: 1rem;
         }
         .support-button:hover {
         background-color: var(--product-accent-hover);
         box-shadow: 0 1px 3px rgba(0,0,0,0.1);
         }
         .icon-button {
         background: none; border: none; cursor: pointer;
         padding: 8px; border-radius: 50%;
         display: inline-flex; align-items: center; justify-content: center;
         color: var(--text-secondary);
         transition: background-color 0.2s ease, color 0.2s ease;
         }
         .icon-button:hover { background-color: var(--background-hover); color: var(--text-primary); }
         .icon-button .icon { margin: 0; vertical-align: -6px; }
         /* --- MAIN CONTENT & TYPOGRAPHY --- */
         .content { max-width: 100%; padding: 0 1.5rem; margin: 0 auto; }
         .product-header {
         background-color: var(--background-card);
         padding: 2rem 1.5rem;
         margin-bottom: 0;
         border-bottom: 1px solid var(--border-color);
         transition: background-color 0.3s ease, border-color 0.3s ease;
         }
         .document-meta {
         display: flex;
         align-items: center;
         gap: 1rem;
         margin-top: 0.5rem;
         color: var(--text-secondary);
         font-size: 0.875rem;
         }
         .read-time { display: flex; align-items: center; gap: 0.25rem; }
         .read-time .icon { font-size: 18px; vertical-align: -4px; }
         h1, h2, h3, h4 { color: var(--text-primary); text-align: left; font-weight: 600; margin-bottom: 1rem; }
         h1 { margin-top: 0; font-size: 2.25rem; padding-bottom: 0.5rem; }
         h2 { font-size: 1.75rem; padding-bottom: 0.75rem; border-bottom: 1px solid var(--border-color); transition: border-color 0.3s ease; }
         h3 { font-size: 1.4rem; }
         h4 { font-size: 1.2rem; }
         p { margin: 1rem 0; color: var(--text-secondary); }
         /* --- ICON STYLES --- */
         .icon { font-family: 'Material Symbols Outlined', sans-serif; font-weight: normal; font-style: normal; font-size: 20px; line-height: 1; letter-spacing: normal; text-transform: none; display: inline-block; white-space: nowrap; word-wrap: normal; direction: ltr; -webkit-font-smoothing: antialiased; vertical-align: -5px; margin-right: 0.07em; }
         .icon-high { color: var(--color-red); }
         .icon-medium { color: var(--color-amber); }
         .icon-low { color: var(--color-green); }
         .icon-check { color: var(--color-green); }
         .icon-cross { color: var(--color-red); }
         .icon-question { color: var(--text-secondary); }
         /* --- BREADCRUMB NAVIGATION --- */
         .breadcrumb-container {
         background-color: var(--background-main);
         border-top: 1px solid var(--border-color);
         padding: 0.5rem 1.5rem;
         transition: all 0.3s ease;
         }
         .breadcrumb {
         display: flex;
         align-items: center;
         flex-wrap: wrap;
         gap: 0.5rem;
         font-size: 0.8rem;
         color: var(--text-secondary);
         max-width: 1200px;
         margin: 0 auto;
         }
         .breadcrumb-item {
         display: flex;
         align-items: center;
         gap: 0.25rem;
         }
         .breadcrumb-link {
         color: var(--text-secondary);
         text-decoration: none;
         padding: 0.25rem 0.5rem;
         border-radius: 4px;
         transition: all 0.2s ease;
         cursor: pointer;
         }
         .breadcrumb-link:hover {
         color: var(--product-accent);
         background-color: var(--background-hover);
         }
         .breadcrumb-link.active {
         color: var(--product-accent);
         font-weight: 500;
         background-color: rgba(0, 113, 206, 0.1);
         }
         .breadcrumb-separator {
         color: var(--border-color);
         font-size: 0.75rem;
         margin: 0 0.25rem;
         }
         .breadcrumb-home {
         display: flex;
         align-items: center;
         gap: 0.25rem;
         color: var(--text-secondary);
         text-decoration: none;
         padding: 0.25rem 0.5rem;
         border-radius: 4px;
         transition: all 0.2s ease;
         }
         .breadcrumb-home:hover {
         color: var(--product-accent);
         background-color: var(--background-hover);
         }
         .breadcrumb-home .icon {
         font-size: 16px;
         }
         .breadcrumb-section-info {
         margin-left: auto;
         display: flex;
         align-items: center;
         gap: 1rem;
         font-size: 0.8rem;
         color: var(--text-secondary);
         }
         .breadcrumb-progress {
         display: flex;
         align-items: center;
         gap: 0.25rem;
         }
         .breadcrumb-progress-bar {
         width: 60px;
         height: 4px;
         background-color: var(--border-color);
         border-radius: 2px;
         overflow: hidden;
         }
         .breadcrumb-progress-fill {
         height: 100%;
         background-color: var(--product-accent);
         width: 0%;
         transition: width 0.3s ease;
         }
         /* Mobile adjustments for breadcrumb */
         @media (max-width: 768px) {
         .breadcrumb-container {
         padding: 0.4rem 1rem;
         }
         .breadcrumb {
         font-size: 0.75rem;
         }
         .breadcrumb-section-info {
         display: none;
         }
         .breadcrumb-link {
         padding: 0.2rem 0.4rem;
         }
         }
         @media (max-width: 480px) {
         .breadcrumb-container {
         padding: 0.3rem 1rem;
         }
         .breadcrumb {
         font-size: 0.7rem;
         gap: 0.25rem;
         }
         .breadcrumb-link {
         padding: 0.15rem 0.3rem;
         max-width: 100px;
         overflow: hidden;
         text-overflow: ellipsis;
         white-space: nowrap;
         }
         }
         /* --- TAB STYLES --- */
         .tab-navigation-container {
         position: sticky; top: 62px; /* After header (which now includes breadcrumb) */
         background-color: var(--background-card);
         z-index: 101;
         border-bottom: 1px solid var(--border-color);
         width: 100vw; margin-left: calc(-50vw + 50%);
         transition: background-color 0.3s ease, border-color 0.3s ease;
         }
         .tab-nav-scroller { overflow-x: auto; scrollbar-width: thin; scrollbar-color: var(--border-color) transparent; padding: 0 1.5rem; }
         .tab-navigation { display: flex; flex-wrap: nowrap; white-space: nowrap; margin: 0; padding: 0; list-style: none; }
         .tab-link { padding: 0.75rem 0; margin: 0 1.25rem; cursor: pointer; background: none; border: none; border-bottom: 3px solid transparent; color: var(--text-secondary); font-size: 0.9rem; font-weight: 500; transition: color 0.2s ease, border-color 0.2s ease; margin-bottom: -1px; text-align: center; }
         
         
         .tab-link:hover { color: var(--product-accent); }
         .tab-link.active { color: var(--product-accent); border-bottom-color: var(--product-accent); }
         .tab-link:first-child { margin-left: 0; } .tab-link:last-child { margin-right: 0; }
         .tab-content { padding-top: 2rem; }
         .tab-pane { display: none; animation: fadeIn 0.5s ease; }
         .tab-pane.active { display: block; }
         .tab-link span {font-weight: 550; }
         @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
         .product-section { margin-bottom: 3rem; background: var(--background-card); border-radius: 8px; border: 1px solid var(--border-color); padding: 0 2rem; transition: background-color 0.3s ease, border-color 0.3s ease; }
         /* --- TABLES --- */
         .table-container { width: 100%; overflow-x: auto; margin: 1.5rem 0; border: 1px solid var(--border-color); border-radius: 8px; transition: border-color 0.3s ease; }
         table { width: 100%; border-collapse: collapse; min-width: 650px; }
         th, td { padding: 12px 16px; text-align: left; vertical-align: middle; font-size: 0.875rem; border-bottom: 1px solid var(--border-color); transition: border-color 0.3s ease;}
         th { background-color: var(--background-main); color: var(--text-primary); font-weight: 500; position: sticky; top: 0; z-index: 10; transition: background-color 0.3s ease, color 0.3s ease; }
         tr:last-child td { border-bottom: none; }
         tr:hover { background-color: var(--background-hover); }
         td strong { color: var(--text-primary); font-weight: 500; }
         td .icon { margin-left: -4px; }

         /* Sortable table styles */
         th[data-sort-direction="asc"],
         th[data-sort-direction="desc"] {
            background-color: rgba(0, 113, 206, 0.1);
         }
         th .sort-indicator {
            transition: transform 0.2s ease, opacity 0.2s ease;
         }
         th:hover .sort-indicator {
            opacity: 1 !important;
         }
         th:hover {
            background-color: rgba(0, 113, 206, 0.05);
         }
         tbody tr.sort-highlight {
            animation: highlightRow 1s ease;
         }
         @keyframes highlightRow {
            0% { background-color: rgba(0, 113, 206, 0.1); }
            100% { background-color: transparent; }
         }
         
         /* Table grouping styles */
         .table-group-controls {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 0px;
            padding: 8px 12px;
            background-color: var(--background-main);
            border-radius: 6px;
            border: 1px solid var(--border-color);
            transition: border-color 0.3s ease, background-color 0.3s ease;
         }
         
         .group-title {
            display: flex;
            align-items: center;
            gap: 6px;
            font-weight: 500;
            color: var(--text-primary);
            font-size: 0.9rem;
         }
         
         .group-options {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
         }
         
         .group-option {
            padding: 4px 10px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            background-color: var(--background-card);
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.2s ease;
         }
         
         .group-option:hover {
            background-color: var(--background-hover);
            color: var(--text-primary);
         }
         
         .group-option.active {
            background-color: var(--product-accent);
            color: white;
            border-color: var(--product-accent);
            font-weight: 500;
         }
         
         tr.group-header {
            background-color: rgba(0, 113, 206, 0.08);
            cursor: pointer;
            user-select: none;
            transition: all 0.2s ease;
            border-radius: 4px;
            border-left: 3px solid rgba(0, 113, 206, 0.6);
         }
         
         tr.group-header:hover {
            background-color: rgba(0, 113, 206, 0.15);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
         }
         
         tr.group-header.collapsed {
            background-color: rgba(0, 113, 206, 0.12);
            border-left-color: rgba(0, 113, 206, 0.6);
            margin-bottom: 0;
            border-bottom: 2px solid rgba(0, 113, 206, 0.4);
            position: relative; /* For the ::after pseudo-element */
         }
         
         tr.group-header.collapsed:hover {
            background-color: rgba(0, 113, 206, 0.18);
         }
         
         /* Add visual indicator of collapsed rows below */
         tr.group-header.collapsed::after {
            content: "";
            height: 3px;
            background: linear-gradient(to right, rgba(0, 113, 206, 0.4), rgba(0, 113, 206, 0.1), transparent);
            display: block;
            position: relative;
            margin-top: 2px;
         }
         
         /* Add a more prominent indicator for collapsed content */
         tr.group-header.collapsed td:first-child {
            position: relative;
         }
         
         tr.group-header.collapsed td:first-child::before {
            content: "▾"; /* Down-pointing triangle */
            position: absolute;
            right: 10px;
            color: rgba(0, 113, 206, 0.6);
            font-size: 12px;
         }
         
         .group-header-content {
            display: flex;
            align-items: center;
            padding: 4px 0;
            flex-wrap: wrap;
         }
         
         .group-header-title {
            font-weight: 500;
            color: var(--text-primary);
            margin-right: 8px;
         }
         
         .group-count {
            font-size: 0.75rem;
            color: var(--text-secondary);
            background-color: var(--background-card);
            padding: 2px 8px;
            border-radius: 12px;
            border: 1px solid var(--border-color);
         }
         
         .group-toggle {
            margin-right: 10px;
            transition: all 0.3s ease;
            color: rgba(0, 113, 206, 0.8);
            font-weight: bold;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(0, 113, 206, 0.1);
            width: 26px;
            height: 26px;
            border-radius: 50%;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            font-size: 18px;
         }
         
         tr.group-header:hover .group-toggle {
            background-color: rgba(0, 113, 206, 0.2);
            transform: scale(1.1);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
         }
         
         tr.group-header.collapsed .group-toggle {
            transform: rotate(-90deg);
            color: rgba(0, 113, 206, 0.6);
            background-color: rgba(0, 113, 206, 0.05);
         }
         
         /* Simplify the animation */
         tr.group-header.collapsed:hover .group-toggle {
            background-color: rgba(0, 113, 206, 0.15);
            transform: rotate(-90deg) scale(1.05);
         }
         
         /* Styles for grouped rows */
         tr[data-group] {
            transition: all 0.3s ease;
         }
         
         /* Collapsed rows - completely hidden */
         tbody tr.collapsed-row {
            display: none !important;
         }
         
         tr.first-in-group {
            border-top: 1px solid rgba(0, 113, 206, 0.1);
         }
         
         @media (max-width: 768px) {
            .table-group-controls {
               flex-direction: column;
               align-items: flex-start;
               gap: 8px;
            }
            
            .group-options {
               width: 100%;
            }
         }
         
         /* Table Pagination Styles */
         .table-pagination {
            margin-top: 1rem;
            border-top: 1px solid var(--border-color);
            padding-top: 0.75rem;
         }
         
         .pagination-top-controls {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            padding-left:12px;
            padding-right: 12px;
         }
         
         .page-size-selector {
            display: flex;
            align-items: center;
            gap: 0.5rem;
         }
         
         .page-size-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
         }
         
         .page-size-select {
            padding: 0.25rem 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--background-card);
            color: var(--text-primary);
            font-size: 0.875rem;
            cursor: pointer;
         }
         
         .page-size-select:focus {
            outline: none;
            border-color: var(--product-accent);
            box-shadow: 0 0 0 2px rgba(0, 113, 206, 0.1);
         }
         
         .pagination-info {
            font-size: 0.875rem;
            color: var(--text-secondary);
         }
         
         .pagination-nav {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.25rem;
            padding: 8px 0;
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
         }
         
         .pagination-button {
            min-width: 36px;
            height: 36px;
            padding: 0;
            border: none;
            border-radius: 4px;
            background-color: transparent;
            color: var(--product-accent);
            font-size: 0.875rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            margin: 0 2px;
         }
         
         .pagination-button:hover:not(:disabled) {
            background-color: rgba(0, 113, 206, 0.08);
            color: var(--product-accent);
         }
         
         .pagination-button {
            background-color: var(--product-accent);
            color: white;
            font-weight: 500;
         }
         
         /* Navigation buttons styling */
         .pagination-button.prev,
         .pagination-button.next,
         .pagination-button.first,
         .pagination-button.last {
            background-color: transparent;
            border-radius: 50%;
         }
         
         /* Number buttons styling */
         .pagination-button.page-number {
            font-family: 'Roboto', Arial, sans-serif;
            font-weight: 500;
         }
         
         .pagination-button.ellipsis {
            cursor: default;
            min-width: 24px;
         }
         
         .pagination-button.ellipsis:hover {
            background-color: transparent;
         }
         
         .pagination-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            color: var(--text-secondary);
         }
         
         .pagination-button.prev,
         .pagination-button.next,
         .pagination-button.first,
         .pagination-button.last {
            background-color: transparent;
            border: none;
         }
         
         .pagination-button.prev:hover:not(:disabled),
         .pagination-button.next:hover:not(:disabled),
         .pagination-button.first:hover:not(:disabled),
         .pagination-button.last:hover:not(:disabled) {
            background-color: rgba(0, 113, 206, 0.08);
            border: none;
         }
         
         .pagination-button .icon {
            font-size: 20px;
            margin: 0;
            font-family: 'Material Symbols Outlined', sans-serif !important;
            vertical-align: middle;
            font-style: normal;
         }
         
         .icon {
            font-family: 'Material Symbols Outlined', sans-serif !important;
            font-weight: normal;
            font-style: normal;
            line-height: 1;
            text-transform: none;
            letter-spacing: normal;
            word-wrap: normal;
            white-space: nowrap;
            direction: ltr;
            display: inline-block;
            text-rendering: auto;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
         }
         
         /* Ensure Material Symbols are properly applied */
         span.material-symbols-outlined,
         .material-symbols-outlined {
            font-family: 'Material Symbols Outlined', sans-serif !important;
            font-weight: normal;
            font-style: normal;
            font-size: 20px;
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            font-feature-settings: 'liga';
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
         }
         
         .pagination-button.ellipsis {
            cursor: default;
            color: var(--text-secondary);
         }
         
         .pagination-button.ellipsis:hover {
            background-color: transparent;
         }
         
         /* Mobile adjustments for pagination */
         @media (max-width: 768px) {
            .pagination-top-controls {
               flex-direction: column;
               align-items: flex-start;
               gap: 0.5rem;
            }
            
            .pagination-info {
               margin-top: 0.25rem;
            }
            
            .pagination-button {
               min-width: 32px;
               height: 32px;
            }
         }
         
         @media (max-width: 480px) {
            .pagination-button:not(.prev):not(.next):not(.active):not(.first):not(.last) {
               display: none;
            }
            
            .pagination-button.ellipsis:first-of-type,
            .pagination-button.ellipsis:last-of-type {
               display: flex;
            }
            
            .pagination-nav {
               width: 100%;
               justify-content: space-between;
            }
         }
         /* --- FLOATING TABLE OF CONTENTS --- */
         .floating-toc {
         position: fixed;
         top: 50%;
         right: 20px;
         transform: translateY(-50%);
         background-color: var(--background-card);
         border: 1px solid var(--border-color);
         border-radius: 12px;
         padding: 1rem;
         max-width: 280px;
         min-width: 240px;
         max-height: 70vh;
         overflow-y: auto;
         z-index: 1001;
         box-shadow: 0 8px 32px rgba(0,0,0,0.12);
         opacity: 0;
         visibility: hidden;
         transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
         backdrop-filter: blur(8px);
         }
         .floating-toc.show {
         opacity: 1;
         visibility: visible;
         }
         .floating-toc-header {
         display: flex;
         align-items: center;
         justify-content: space-between;
         margin-bottom: 1rem;
         padding-bottom: 0.5rem;
         border-bottom: 1px solid var(--border-color);
         }
         .floating-toc-title {
         font-size: 0.875rem;
         font-weight: 600;
         color: var(--text-primary);
         display: flex;
         align-items: center;
         gap: 0.5rem;
         }
         .floating-toc-close {
         background: none;
         border: none;
         cursor: pointer;
         padding: 4px;
         border-radius: 4px;
         color: var(--text-secondary);
         transition: background-color 0.2s ease, color 0.2s ease;
         }
         .floating-toc-close:hover {
         background-color: var(--background-hover);
         color: var(--text-primary);
         }
         .floating-toc-list {
         list-style: none;
         padding: 0;
         margin: 0;
         }
         .floating-toc-item {
         margin-bottom: 0.5rem;
         }
         .floating-toc-link {
         display: block;
         padding: 0.5rem 0.75rem;
         text-decoration: none;
         color: var(--text-secondary);
         font-size: 0.8rem;
         line-height: 1.4;
         border-radius: 6px;
         transition: all 0.2s ease;
         cursor: pointer;
         position: relative;
         border-left: 3px solid transparent;
         }
         .floating-toc-link:hover {
         background-color: var(--background-hover);
         color: var(--text-primary);
         }
         .floating-toc-link.active {
         background-color: rgba(0, 113, 206, 0.1);
         color: var(--product-accent);
         border-left-color: var(--product-accent);
         font-weight: 500;
         }
         .floating-toc-progress {
         position: absolute;
         right: 0.5rem;
         top: 50%;
         transform: translateY(-50%);
         width: 20px;
         height: 20px;
         border-radius: 50%;
         background-color: var(--border-color);
         border: 2px solid var(--background-card);
         transition: all 0.2s ease;
         }
         .floating-toc-link.active .floating-toc-progress {
         background-color: var(--product-accent);
         }
         .floating-toc-progress-fill {
         position: absolute;
         top: 2px;
         left: 2px;
         right: 2px;
         bottom: 2px;
         border-radius: 50%;
         background-color: var(--product-accent);
         transform: scale(0);
         transition: transform 0.2s ease;
         }
         .floating-toc-link.reading .floating-toc-progress-fill {
         transform: scale(1);
         }
         .floating-toc-toggle {
         position: fixed;
         top: 50%;
         right: 20px;
         transform: translateY(-50%);
         background-color: var(--product-accent);
         color: var(--background-button-text);
         border: none;
         border-radius: 50%;
         width: 48px;
         height: 48px;
         display: flex;
         align-items: center;
         justify-content: center;
         cursor: pointer;
         z-index: 1002;
         box-shadow: 0 4px 16px rgba(0,0,0,0.15);
         opacity: 0;
         visibility: hidden;
         transition: all 0.3s ease;
         }
         .floating-toc-toggle.show {
         opacity: 1;
         visibility: visible;
         }
         .floating-toc-toggle:hover {
         background-color: var(--product-accent-hover);
         transform: translateY(-50%) scale(1.05);
         }
         /* --- FULL-SCREEN READING MODE --- */
         .fullscreen-reading-mode {
         position: fixed;
         top: 0;
         left: 0;
         right: 0;
         bottom: 0;
         background-color: var(--background-main);
         z-index: 2000;
         overflow-y: auto;
         padding: 2rem;
         opacity: 0;
         visibility: hidden;
         transition: opacity 0.3s ease, visibility 0.3s ease;
         }
         .fullscreen-reading-mode.active {
         opacity: 1;
         visibility: visible;
         }
         .fullscreen-reading-content {
         max-width: 800px;
         margin: 0 auto;
         line-height: 1.8;
         font-size: 1.1rem;
         color: var(--text-primary);
         }
         .fullscreen-reading-content h2 {
         font-size: 2rem;
         margin-bottom: 1.5rem;
         color: var(--text-primary);
         border-bottom: 2px solid var(--product-accent);
         padding-bottom: 0.5rem;
         }
         .fullscreen-reading-content h3 {
         font-size: 1.5rem;
         margin-top: 2rem;
         margin-bottom: 1rem;
         color: var(--text-primary);
         }
         .fullscreen-reading-content h4 {
         font-size: 1.25rem;
         margin-top: 1.5rem;
         margin-bottom: 0.75rem;
         color: var(--text-primary);
         }
         .fullscreen-reading-content p {
         margin-bottom: 1.5rem;
         text-align: justify;
         color: var(--text-secondary);
         }
         .fullscreen-reading-content table {
         margin: 2rem 0;
         font-size: 0.95rem;
         }
         .fullscreen-reading-controls {
         position: fixed;
         top: 20px;
         right: 20px;
         display: flex;
         gap: 0.5rem;
         z-index: 2001;
         }
         .fullscreen-reading-control {
         background-color: var(--background-card);
         border: 1px solid var(--border-color);
         border-radius: 8px;
         padding: 0.5rem;
         cursor: pointer;
         color: var(--text-secondary);
         transition: all 0.2s ease;
         backdrop-filter: blur(8px);
         }
         .fullscreen-reading-control:hover {
         background-color: var(--background-hover);
         color: var(--text-primary);
         }
         .fullscreen-reading-exit {
         background-color: var(--product-accent);
         color: var(--background-button-text);
         }
         .fullscreen-reading-exit:hover {
         background-color: var(--product-accent-hover);
         }
         .fullscreen-reading-progress {
         position: fixed;
         bottom: 20px;
         left: 50%;
         transform: translateX(-50%);
         background-color: var(--background-card);
         border: 1px solid var(--border-color);
         border-radius: 20px;
         padding: 0.5rem 1rem;
         font-size: 0.875rem;
         color: var(--text-secondary);
         backdrop-filter: blur(8px);
         z-index: 2001;
         }
         .fullscreen-font-controls {
         position: fixed;
         top: 20px;
         left: 20px;
         display: flex;
         gap: 0.5rem;
         z-index: 2001;
         }
         .fullscreen-font-control {
         background-color: var(--background-card);
         border: 1px solid var(--border-color);
         border-radius: 8px;
         padding: 0.5rem;
         cursor: pointer;
         color: var(--text-secondary);
         transition: all 0.2s ease;
         backdrop-filter: blur(8px);
         min-width: 40px;
         text-align: center;
         }
         .fullscreen-font-control:hover {
         background-color: var(--background-hover);
         color: var(--text-primary);
         }
         /* Hide UI elements when in fullscreen reading mode */
         body.fullscreen-reading .header,
         body.fullscreen-reading .product-header,
         body.fullscreen-reading .tab-navigation-container,
         body.fullscreen-reading .footer,
         body.fullscreen-reading .floating-toc,
         body.fullscreen-reading .floating-toc-toggle,
         body.fullscreen-reading #back-to-top,
         body.fullscreen-reading .reading-progress,
         body.fullscreen-reading .reading-progress-text {
         display: none !important;
         }
         /* Mobile adjustments for fullscreen reading */
         @media (max-width: 768px) {
         .fullscreen-reading-mode {
         padding: 1rem;
         }
         .fullscreen-reading-content {
         font-size: 1rem;
         line-height: 1.7;
         }
         .fullscreen-reading-controls {
         top: 10px;
         right: 10px;
         }
         .fullscreen-font-controls {
         top: 10px;
         left: 10px;
         }
         .fullscreen-reading-progress {
         bottom: 10px;
         padding: 0.4rem 0.8rem;
         font-size: 0.8rem;
         }
         }
         /* Hide TOC on smaller screens */
         @media (max-width: 1024px) {
         .floating-toc,
         .floating-toc-toggle {
         display: none !important;
         }
         }
         
         /* Mobile adjustments for reading progress */
         @media (max-width: 768px) {
         .reading-progress-text {
         right: 10px;
         top: 6px;
         font-size: 0.7rem;
         padding: 0.2rem 0.4rem;
         }
         }
         
         @media (max-width: 480px) {
         .reading-progress-text {
         right: 5px;
         top: 4px;
         font-size: 0.65rem;
         padding: 0.15rem 0.3rem;
         max-width: 120px;
         text-overflow: ellipsis;
         overflow: hidden;
         white-space: nowrap;
         }
         }
         /* --- MISC & FOOTER --- */
         .ai-disclaimer { text-align: center; font-style: italic; color: var(--text-secondary); font-size: 0.875rem; margin: -1rem auto -2rem; padding: 0 1rem; line-height: 1.5; }
         #back-to-top {
         position: fixed; bottom: 20px; left: 20px;
         background-color: var(--product-accent); color: var(--background-button-text);
         border: none; border-radius: 50%;
         width: 50px; height: 50px;
         display: none; align-items: center; justify-content: center;
         cursor: pointer; z-index: 1000;
         box-shadow: 0 4px 8px rgba(0,0,0,0.2);
         opacity: 0;
         transition: opacity 0.3s ease, transform 0.3s ease, background-color 0.3s ease;
         }
         #back-to-top.show { opacity: 1; display: flex; }
         #back-to-top:hover { background-color: var(--product-accent-hover); transform: translateY(-2px); }
         .footer { background-color: var(--background-card); color: var(--text-secondary); padding: 2rem 1.5rem; margin-top: 4rem; text-align: center; border-top: 1px solid var(--border-color); transition: background-color 0.3s ease, border-color 0.3s ease;}
         .footer-container { max-width: 1440px; margin: 0 auto; display: flex; flex-direction: column; align-items: center; gap: 1.5rem; }
         .footer-brand { display: flex; align-items: center; gap: 1rem; }
         .footer-logo { height: 32px; }
         .footer-wordmark { font-size: 1rem; font-weight: 500; color: var(--cgd-blue); }
         .footer-copyright { font-size: 0.8rem; }
         .footer-socials { display: flex; gap: 1rem; }
         .footer-socials a { color: var(--text-secondary); text-decoration: none; display: inline-block; transition: color 0.2s ease, transform 0.2s ease; }
         .footer-socials a:hover { color: var(--product-accent); transform: scale(1.1); }
         .footer-socials svg { width: 24px; height: 24px; fill: currentColor; }
         @media (max-width: 768px) {
         .content, .product-header { padding-left: 1rem; padding-right: 1rem; }
         .footer-container { flex-direction: column; text-align: center; gap: 1.5rem; }
         }
         @media print {
         /* Print styles remain largely the same */
         .header, .footer, .tab-navigation-container, .ai-disclaimer, #back-to-top, .header-controls { display: none !important; }
         }
      </style>
   </head>
   <body>
      <!-- Reading Progress Indicator -->
      <div id="reading-progress" class="reading-progress">
         <div id="reading-progress-fill" class="reading-progress-fill"></div>
      </div>
      <div id="reading-progress-text" class="reading-progress-text">
         0% read
      </div>
      
      <header class="header">
         <div class="header-container">
            <div class="header-brand">
               <img src="https://www.cgd.pt/PublishingImages/WSImages/Novo-CGD/logo-ap_Blue.png" alt="CGD Logo" class="header-logo">
            </div>
            <div class="header-controls">
               <div id="tts-controls" style="display: none;">
                  <button id="tts-play-pause-btn" class="icon-button" title="Listen to this section">
                  <span class="icon">play_arrow</span>
                  </button>
                  <button id="tts-stop-btn" class="icon-button" title="Stop listening">
                  <span class="icon">stop</span>
                  </button>
               </div>
               <button id="fullscreen-reading-btn" class="icon-button" title="Enter fullscreen reading mode">
               <span class="icon">fullscreen</span>
               </button>
               <button id="dark-mode-toggle" class="icon-button" title="Toggle dark/light mode">
               <span class="icon">light_mode</span>
               </button>
               <a href="mailto:david.alexandre.rosa@cgd.pt?subject=Support Request for Application Technical Profile&cc=dsi-arquitetura_empresarial@cgd.pt" target="_blank" class="support-button">Ask for Support</a>
            </div>
         </div>
         
         <!-- Breadcrumb Navigation integrated in header -->
         <div id="breadcrumb-container" class="breadcrumb-container">
            <nav class="breadcrumb" aria-label="Breadcrumb navigation">
               <a href="#" id="breadcrumb-home" class="breadcrumb-home" title="Go to overview">
                  <span class="icon">home</span>
                  <span>Overview</span>
               </a>
               <span class="breadcrumb-separator">›</span>
               <div id="breadcrumb-current" class="breadcrumb-item">
                  <span class="breadcrumb-link active">Current Section</span>
               </div>
               <div class="breadcrumb-section-info">
                  <div class="breadcrumb-progress">
                     <span class="icon">trending_up</span>
                     <div class="breadcrumb-progress-bar">
                        <div id="breadcrumb-progress-fill" class="breadcrumb-progress-fill"></div>
                     </div>
                     <span id="breadcrumb-progress-text">0%</span>
                  </div>
                  <div id="breadcrumb-section-count">
                     Section 1 of 13
                  </div>
               </div>
            </nav>
         </div>
      </header>
      
      <div class="product-header">
         <h1 id="application-technical-profile">Application Technical Profile</h1>
         <p style="font-size: 16px">A structured and in-depth technical overview of the application, capturing key architectural elements, technology stack, system components, and more. This profile serves as a foundational reference for modernization, migration, and governance initiatives.</p>
         <div class="document-meta">
            <div class="read-time" id="total-read-time">
               <span class="icon">schedule</span>
               <span>Calculating...</span>
            </div>
         </div>
      </div>
      <div id="tab-container-placeholder"></div>
      
      <main class="content" id="main-content-area">
<div class="product-section">
<h2 id="task">TASK</h2>
<p>Unify, deduplicate, and summarize the content into a single, structured technical fact sheet written in valid <a href="https://www.markdownguide.org/basic-syntax/">Markdown</a>.</p>
<p>---</p>
</div>
<div class="product-section">
<h2 id="markdown-formatting-rules-mandatory">Markdown Formatting Rules (mandatory)</h2>
When writing Markdown documents, you must follow <strong>all</strong> the rules below without exception to ensure consistency and readability:
<ul>
<li>Use <strong>headings</strong> (<code>#</code>, <code>##</code>, <code>###</code>) to organize content hierarchically.</li>
<li>Use <strong>bullet points</strong> (<code>-</code>) for lists.</li>
<li>Use <strong>tables</strong> where appropriate (e.g., for metrics, dependencies).</li>
<li>Wrap any code examples in triple backticks (\<code>\</code>\<code>).</li>
<li>Use <strong>consistent indentation</strong> and clear formatting throughout.</li>
<li>Follow clean, simple structure as used in professional technical documentation.</li>
<li>Use <strong>bold</strong> for emphasis on key terms or concepts.</li>
<li>Use <strong>italics</strong> for emphasis on specific terms or concepts.</li>
<li>Use <strong>links</strong> for references to external documentation or resources.</li>
<li>Use <strong>inline code</strong> formatting for specific terms or commands (e.g., </code>Get-Process`).</li>
<li>Use symbols for pros and cons, e.g., <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> for pros and <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> for cons.</li>
<li>Use symbols for impact, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for high impact, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium impact, <span class="icon icon-low" title="Low/Info">recommend</span> for low impact, writing also the impact as text after the symbol</li>
<li>Use symbols for risk, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for high risk, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium risk, <span class="icon icon-low" title="Low/Info">recommend</span> for low risk, writing also the risk as text after the symbol</li>
<li>Use symbols for long-term fit, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for low long-term fit, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium long-term fit, <span class="icon icon-low" title="Low/Info">recommend</span> for high long-term fit, writing also the long-term fit as text after the symbol</li>
<li>Use symbols for priority, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for high priority, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium priority, <span class="icon icon-low" title="Low/Info">recommend</span> for low priority, writing also the priority as text after the symbol</li>
<li>Use symbols for severity, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for high severity, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium severity, <span class="icon icon-low" title="Low/Info">recommend</span> for low severity, writing also the severity as text after the symbol</li>
<li>Use symbols for complexity, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for high complexity, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium complexity, <span class="icon icon-low" title="Low/Info">recommend</span> for low complexity, writing also the complexity as text after the symbol</li>
<li>Use symbols for cost, e.g., <span class="icon icon-high" title="High/Critical">dangerous</span> for high cost, <span class="icon icon-medium" title="Medium/Warning">warning</span> for medium cost, <span class="icon icon-low" title="Low/Info">recommend</span> for low cost, writing also the cost as text after the symbol</li>
<li>Use symbols for support, e.g., <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> for supported, <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> for not supported, writing also the support status as text after the symbol</li>
<li>Use symbols for used in the application, e.g., <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> for used in the application, <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> for not used in the application,<span class="icon icon-question" title="Uncertain/Likely">help</span> for likely, writing also the used in the application status as text after the symbol</li>
</ul>
</div>
<div class="product-section">
<h2 id="generic-mermaid-diagram-rules-mandatory">Generic Mermaid Diagram Rules (mandatory)</h2>
When including a Mermaid diagram in a Markdown document, you must follow <strong>all</strong> the rules below without exception to ensure correct rendering and formatting:
<ul>
<li><strong>Only the following Mermaid diagram types are allowed</strong>: 'flowchart TD', 'sequenceDiagram','classDiagram','stateDiagram','erDiagram','gantt','journey','gitGraph','pie','mindmap','zenuml','quadrantChart','xychart-beta','block-beta','packet-beta','treemap-beta'.</li>
<li>Always place a legend (caption) immediately below the diagram. The legend should be in a smaller font size than the main body text, clearly associated with the diagram, and centered. Format appropriately. Ensure the styling visually distinguishes the legend as secondary explanatory text. Never use Fig x., use Figure x (Starts with "Figure X - " (for example, "Figure 1 - ")).</li>
<li>The Mermaid diagram <strong>must be placed exactly where it is referenced</strong> in the document. Do not place it at the end or elsewhere</li>
<li>If any node label contains <strong>HTML tags</strong> such as <code><br></code>, <code><b></code>, <code><i></code>, etc., the <strong>entire label must be enclosed in double quotes (<code>"</code>)</strong>.</li>
</ul>
   - Correct example:
     <code>step1["Start <b>Process</b>"]</code>
   - Incorrect example:
     <code>step1[Start <b>Process</b>]</code>
     (This will break rendering and must be avoided.)
<ul>
<li>Always <strong>validate the Mermaid syntax</strong> before including the diagram. The syntax must be correct to ensure the diagram renders properly in the final Markdown output. If validation is not possible, use only syntax known to be 100% correct.</li>
<li><strong>Final checklist before including a Mermaid diagram:</strong></li>
</ul>
 - Validate Mermaid syntax to ensure no errors.
 - Enclose any HTML-containing node labels in double quotes.
 - Place the diagram exactly where referenced.
 - Immediately follow the diagram with a properly formatted caption starting with "Figure X -"
 - Make sure the caption is visually secondary and centered.
 - Use the following rules for all Mermaid diagram types (<code>flowchart</code>, <code>classDiagram</code>, <code>sequenceDiagram</code>, <code>stateDiagram</code>, etc.) to ensure valid, portable, and compatible diagrams.
<h3 id="general-unsupported-syntax-do-not-use">General Unsupported Syntax (Do Not Use)</h3>
<ul>
<li>Do not use special characters in identifiers or class names:</li>
</ul>
  - Avoid: \*, #, /, <>, {}, &, @, \$, \[]
  - Use only letters, numbers, and underscores
<ul>
<li>Do not use smart quotes:</li>
</ul>
  - Avoid: “ ”, ‘ ’
  - Use plain double or single quotes: "text", 'text'
<ul>
<li>Do not use emojis or non-ASCII characters in any labels or class names</li>
</ul>
<ul>
<li>Do not use HTML or Markdown formatting inside labels:</li>
</ul>
  - Avoid: <b>bold</b>, <strong>bold</strong>, fa\:icon, etc.
<ul>
<li>Do not use empty curly braces:</li>
</ul>
  - Invalid: <code>class Foo {}</code> (if no members are defined)
  - Valid: <code>class Foo</code> for empty classes
<ul>
<li>Do not leave special characters or spaces in labels without wrapping them in quotes:</li>
</ul>
  - Invalid: A\[User/Admin]
  - Valid: A\["User/Admin"]
<ul>
<li>Do not reference undefined nodes or classes in relationships:</li>
</ul>
  - All identifiers used in edges (A --> B) must be declared
<ul>
<li>Do not use multiple edge definitions on a single line:</li>
</ul>
  - Invalid: A --> B --> C
  - Valid: one edge per line
<ul>
<li>Do not use nested or double curly braces like <code>{{</code>:</li>
</ul>
  - Only use <code>B{"Decision"}</code> where decision nodes are allowed
<h3 id="best-practices">Best Practices</h3>
<ul>
<li>Use consistent naming: PascalCase or snake\_case</li>
</ul>
<ul>
<li>Quote all labels containing:</li>
</ul>
<p>* Spaces: "Back Office"
  * Special characters: "Read/Write"
  * Dashes or dots: "Version 1.0"</p>
<ul>
<li>Format diagrams using fenced code blocks:</li>
</ul>
<pre><code>`
  </code></pre>mermaid
  diagramType
  ...
  <pre><code>`

  </code></pre>
  <pre><code>
- Use `note` syntax correctly when supported:

  </code></pre>
  note for ClassName "Description here"
  ``<code>
<ul>
<li>Validate diagrams in your rendering context (e.g., Mermaid Live Editor)</li>
</ul>
<h3 id="diagram-specific-rules">Diagram-Specific Rules</h3>
<h4 id="flowchart">flowchart</h4>
<ul>
<li>Use square brackets for nodes: A\["Label"]</li>
<li>Use curly braces only for decisions: B{"Yes or No?"}</li>
<li>Edges must use ONLY --> (arrow syntax) - never use --, <--, or --- in flowchart diagrams</li>
<li>Do not use the class keyword</li>
</ul>
<h4 id="classdiagram">classDiagram</h4>
<ul>
<li>Use </code>class ClassName {}` only when listing attributes or methods</li>
<li>Do not use symbols like "\*" for class names</li>
<li>For "everything" or "all" access, define a placeholder class such as AllEntities</li>
<li>Use these for relationships:</li>
</ul>
  - Inheritance: Child <|-- Parent
  - Association: A ..> B : "Label"
<h4 id="sequencediagram">sequenceDiagram</h4>
<ul>
<li>Define all participants before referencing them</li>
<li>Use only supported message arrows: ->>, -->> etc.</li>
<li>Loops and conditions must follow valid syntax</li>
</ul>
<h3 id="summary">Summary</h3>
<ul>
<li>Only use plain ASCII characters</li>
<li>Avoid all special formatting, smart symbols, and undeclared references</li>
<li>Always test your diagram using a Mermaid-compatible renderer</li>
</ul>
</div>
<div class="product-section">
<h2 id="mermaid-flowchart-td-diagram-rules-mandatory">Mermaid flowchart TD Diagram Rules (mandatory)</h2>
Generate Mermaid flowchart TD diagram with the following constraints:
<ul>
<li>No line breaks inside node labels — keep all labels on a single line.</li>
<li>Wrap all node labels in double quotes, especially if they contain special characters (e.g., parentheses, slashes, or commas).</li>
<li>Avoid using {} to define nodes unless you are explicitly defining a decision node. If used, it must be in the form B{"Decision"} (not {{).</li>
<li>Use only valid Mermaid syntax:</li>
</ul>
 - Nodes: "Label" in square brackets: A["Text"]
 - Decision nodes: curly braces with quoted text: B{"Yes or No?"}
 - Terminators or databases: use round or cylinder notation with "Text" inside
 - No indentation is required — use one line per statement, no tabs
 - Use plain ASCII characters — avoid smart quotes (“”) or non-breaking spaces
 - Use only plain text in node labels — do not include any icons, HTML, Font Awesome (fa:), or special syntax
 - If grouping nodes with subgraph, ensure the subgraph name is a single word or quoted string
 - Do not use emoji, Markdown, or HTML inside labels
 - Format all edges with --> ONLY (arrow syntax), never use -- (double dash)
 - Each edge must be on its own line in format: NodeA --> NodeB
 - Do not mix edge types - use ONLY --> for all connections in flowchart diagrams
</div>
<div class="product-section">
<h2 id="mermaid-quadrantchart-diagram-rules-mandatory">Mermaid quadrantChart Diagram Rules (mandatory)</h2>
Generate Mermaid quadrantChart diagram with the following constraints:
<ul>
<li>The first line must be: <code>quadrantChart</code>.</li>
<li>The title line must be: <code>title</code> followed by a space and the diagram title (no colon).</li>
<li>Define the axes exactly as:</li>
</ul>
   - <code>x-axis</code> followed by a space, the X axis name, another space, <code>--></code>, another space, and the X axis maximum label (no colon anywhere).
   - <code>y-axis</code> followed by a space, the Y axis name, another space, <code>--></code>, another space, and the Y axis maximum label (no colon anywhere).
<ul>
<li>Define the four quadrants exactly as:</li>
</ul>
   - <code>quadrant-1</code> followed by a space and the quadrant 1 name (no colon).
   - <code>quadrant-2</code> followed by a space and the quadrant 2 name (no colon).
   - <code>quadrant-3</code> followed by a space and the quadrant 3 name (no colon).
   - <code>quadrant-4</code> followed by a space and the quadrant 4 name (no colon).
<ul>
<li>Define points using the format:</li>
</ul>
   - <code>"Label"</code> followed by a colon, a space, and the coordinates as an array <code>[x, y]</code>.
   - Coordinates must be floats between 0.0 and 1.0 inclusive.
<ul>
<li>Include at least 4 points with distinct labels.</li>
<li>No additional colons <code>:</code> are allowed except for the label-to-coordinates pairs.</li>
<li>Indentation is optional but keep consistent formatting.</li>
<li>Do not include any explanation or extra text, only output the Mermaid diagram code.</li>
</ul>
<p>Example output format:</p>
<pre><code>
quadrantChart
title Example Diagram

x-axis X Axis Name --&gt; Max
y-axis Y Axis Name --&gt; Max

quadrant-1 Quadrant One
quadrant-2 Quadrant Two
quadrant-3 Quadrant Three
quadrant-4 Quadrant Four

&quot;Point A&quot;: \[0.8, 0.9]
&quot;Point B&quot;: \[0.4, 0.5]
&quot;Point C&quot;: \[0.7, 0.3]
&quot;Point D&quot;: \[0.2, 0.8]

</code></pre>
</div>
<div class="product-section">
<h2 id="mermaid-gantt-diagram-rules-mandatory">Mermaid gantt Diagram Rules (mandatory)</h2>
Generate Mermaid gantt diagram with the following constraints:
<ul>
<li>The diagram must start with the line:  </li>
</ul>
   <code>gantt</code>
<ul>
<li>Define the title line as:  </li>
</ul>
   <code>title</code> followed by a space and the chart title (no colon).
<ul>
<li>Define the date format with:  </li>
</ul>
   <code>dateFormat  YYYY-MM-DD</code> (exactly this format or another valid Mermaid format).
<ul>
<li>Optionally, define axis format with:  </li>
</ul>
   <code>axisFormat</code> followed by a space and the desired date format string (e.g., <code>%Y-%m</code>).
<ul>
<li>Define sections with lines starting with:  </li>
</ul>
   <code>section</code> followed by a space and the section name (no colon).
<ul>
<li>Define tasks with the following syntax on their own lines:  </li>
</ul>
   <code>Task Name :id, start<em>or</em>dependency, duration</code>  
   - <code>Task Name</code>: descriptive string (no colon except the one before the id).  
   - <code>id</code>: unique task identifier (alphanumeric, no spaces).  
   - <code>start<em>or</em>dependency</code>: either a date in <code>YYYY-MM-DD</code> format or <code>after <id></code>.  
   - <code>duration</code>: duration value with a unit (e.g., <code>3w</code> for 3 weeks, <code>5d</code> for 5 days).  
<ul>
<li>Each task line must have exactly one colon <code>:</code> separating the task name and the rest.  </li>
<li>Do not indent any lines (no leading spaces before Mermaid syntax lines).  </li>
<li>Each task must have a unique ID and cannot be repeated.  </li>
<li>Dependencies must refer to previously defined task IDs.  </li>
<li>The diagram must include at least one section and multiple tasks with dependencies.  </li>
<li>Do not include any explanation or text outside the Mermaid code block.  </li>
<li>Output only the Mermaid Gantt diagram code.</li>
</ul>
<p>Example output format:</p>
<pre><code>
gantt
title Project Timeline
dateFormat  YYYY-MM-DD
axisFormat %Y-%m

section Planning
Task A                         \:a1, 2025-08-01, 2w

section Development
Task B                         \:a2, after a1, 4w
Task C                         \:a3, after a2, 3w

section Testing
Task D                         \:a4, after a3, 2w

</code></pre>
</div>
<div class="product-section">
<h2 id="mermaid-mindmap-diagram-rules-mandatory">Mermaid mindmap Diagram Rules (mandatory)</h2>
Generate Mermaid mindmap diagram with the following constraints:
<ul>
<li>The diagram must start with the line: <code>mindmap</code>.</li>
<li>The root node must be defined as:  </li>
</ul>
   <code>root((root label))</code>  
   where <code>root label</code> is the main topic (no colons or special characters except parentheses).
<ul>
<li>Child nodes are defined by indentation (two spaces per level recommended), directly below their parent node.</li>
<li>Node labels are simple text lines without colons.</li>
<li>Nodes can include icons or formatting using Mermaid syntax such as:  </li>
</ul>
   <code>::icon(fa fa-book)</code> or <code><br/></code> for line breaks inside node labels.
<ul>
<li>Indentation must be consistent to represent hierarchy correctly.</li>
<li>The mindmap must have at least three levels of depth and multiple branches.</li>
<li>No colons <code>:</code> are allowed except in Mermaid-specific syntax like <code>::icon(...)</code>.</li>
<li>Do not include any explanation or text outside the Mermaid code block.</li>
</ul>
-Output only the Mermaid mindmap diagram code.
<p>Example output format:</p>
<pre><code>
mindmap
root((mindmap))
Origins
Long history
\::icon(fa fa-book)
Popularisation
British popular psychology author Tony Buzan
Research
On effectiveness&lt;br/&gt;and features
On Automatic creation
Uses
Creative techniques
Strategic planning
Argument mapping
Tools
Pen and paper
Mermaid

</code></pre>
</div>
<div class="product-section">
<h2 id="mermaid-classdiagram-diagram-rules-mandatory">Mermaid classDiagram Diagram Rules (mandatory)</h2>
Generate Mermaid classDiagram diagram with the following constraints:
 - Use <strong>valid Mermaid <code>classDiagram</code> syntax</strong> only — do <strong>not</strong> mix with flowchart or sequence diagram syntax.
 - <strong>Class names must be valid identifiers</strong>:
  - * Use only letters, numbers, and underscores.
  - <em> Avoid special characters such as <code>"</em>"</code>, <code>/</code>, <code>&</code>, <code><></code>, <code>#</code>, etc.
<ul>
<li>To indicate "all entities" or similar concepts, use a <strong>valid placeholder class name</strong> like <code>AllEntities</code> instead of <code>"*"</code>.</li>
<li>If a class has no attributes or methods, define it as:</li>
</ul>
<pre><code>  class ClassName
  </code></pre>
<p>Not:</p>
<pre><code>  class ClassName {}
  </code></pre>
<ul>
<li>If a class has attributes or methods, define it like this:</li>
</ul>
<pre><code>  class ClassName {
      +attribute: Type
      +methodName()
  }
  </code></pre>
<ul>
<li><strong>Do not use curly braces (<code>{}</code>)</strong> for class definitions unless they contain properly formatted members.</li>
<li><strong>Avoid empty or malformed bodies</strong> like <code>class Foo { <> }</code> — these will cause syntax errors.</li>
<li>Use only <strong>plain ASCII characters</strong> — avoid smart quotes (“ ”), emojis, or non-breaking spaces.</li>
<li><strong>Do not include HTML, Markdown, icons, or special formatting</strong> in labels or class names.</li>
<li>Each <strong>relationship line</strong> must use valid Mermaid syntax and reference previously defined classes:</li>
</ul>
  - Inheritance: <code>Child <|-- Parent</code>
  - Association: <code>A ..> B : "Label"</code>
<ul>
<li>Use <code>note for ClassName "Text"</code> for annotations. The class must exist.</li>
</ul>
. Do not duplicate class declarations.
<ul>
<li>One statement per line — indentation is optional.</li>
<li>Always <strong>close string labels with plain double quotes</strong> (<code>"</code>), not smart quotes.</li>
</ul>
</div>
<div class="product-section">
<h2 id="table-format-rules-mandatory">Table format rules (mandatory)</h2>
When creating tables in Markdown, you must follow <strong>all</strong> the rules below without exception to ensure correct rendering and formatting:
<strong>When is explicit asked to use table format you MUST use table format</strong>.
<p>---</p>
<h1 id="application-technical-profile-this-name-should-be-maintained-this-is-the-title-of-the-document">Application Technical Profile (this name should be maintained, this is the title of the document)</h1>
</div>
<div class="product-section">
<h2 id="1-application-overview">1. Application overview</h2>
Application-level information, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Acronym</strong> (e.g., SDCIM)</li>
<li><strong>Application name</strong> (Logical name of the application, e.g., Service Desk Customer Incident Management, without acronyms and infered from the code)</li>
<li><strong>Primary business purpose</strong> (A concise, one-sentence description of what the application does from a business perspective. (e.g., "Provides a public-facing API for processing customer orders and managing product inventory."))</li>
<li><strong>Business domain</strong> (e.g., Customer Service, Incident Management, etc.)</li>
<li><strong>Solution files</strong> (Total number of solutions in the source code -.sln files - and their names)</li>
<li><strong>Project files</strong> (Total number of projects in the source code - .csproj, .vbproj files - by solution. Include the project name including the file extension, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc. The data must be accurate and based on the source code .csproj files found in the source path. The number of projects analyzed should be the same along the report)</li>
<li><strong>Files</strong> (Total number of code files analyzed, by type of file, e.g., .cs, .vb, .csproj, etc. Include the friendly name of the file extension, e.g., C# source code files (.cs), Visual Basic source code files (.vb), C# project files (.csproj), etc. The data must be accurate and based on the source code files found in the source path. The number of files analyzed should be the same along the report)</li>
<li><strong>Main programming language(s)</strong> (Primary languages used, e.g., C#, VB.NET, etc.)</li>
<li><strong>Target .NET Framework(s)</strong> (Target frameworks used and specified in the code, e.g., .NET 6, .NET 7, .NET Framework 4.8.1, .NET Framework 2.0, etc. This data must be accurate and must include all .NET frameworks found in the source code, not just the main one.)</li>
<li><strong>Application type</strong> (Application category, e.g., Web API, MVC, Console, WPF, Windows Forms, Service, etc.)</li>
<li><strong>Output type</strong> (e.g., .dll (Dynamic Link Library), .exe (Executable), Single-file .exe or .dll,.wasm (WebAssembly), Docker image, etc.)</li>
<li><strong>Deployment model</strong> (e.g., On-premises, Cloud, Hybrid, etc.)</li>
<li><strong>Deployment target platform</strong> (e.g., 32-bit, 64-bit, ARM, etc.)</li>
<li><strong>Complexity</strong> (e.g., Low, Medium, High, Very high, based on the number of files, lines of code, and complexity of the code. This must be calculated only in the end of the analysis, after all the files are processed and the complexity is calculated. The complexity must be based on the number of files, lines of code, and complexity of the code. The complexity must be calculated based on the source code files found in the source path.)</li>
<li><strong>Last updated (Source code)</strong> (Date of the last update to the source code, e.g., 2025-06-18)</li>
<li><strong>Last updated (Documentation)</strong> (always the current date in the format "yyyy-MM-dd")</li>
</ul>
<h3 id="11-main-components-and-features">1.1. Main components and features</h3>
The main components and features of the application, well explained, e.g., User Management, Incident Management, Reporting, etc, using table format. A component diagram can visualize these relationships.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Component</strong> (e.g. User Management, Incident Management, Reporting, etc.)</li>
<li><strong>Description</strong> (e.g. Brief description of the component, e.g. "Manages user accounts and authentication.")</li>
<li><strong>Key features</strong> (e.g. List of key features, e.g. "User registration, Login, Password reset, etc.")</li>
<li><strong>Dependencies</strong> (e.g. List of key dependencies, e.g. "Uses ASP.NET Core Identity for user management, Entity Framework Core for data access, etc.")</li>
<li><strong>Related projects</strong> (e.g. List of related projects, e.g. "SDCIM.UserManagement.csproj, SDCIM.Reporting.csproj, etc.")</li>
<li><strong>Technologies</strong> (e.g. List of technologies used, e.g. "ASP.NET Core, Entity Framework Core, etc.")</li>
</ul>
<p>Include a Mermaid 'flowchart TD' diagram to visualize the relationships between the application's main components.</p>
<h3 id="12-solutions">1.2. Solutions</h3>
The solutions in the application, well explained, e.g., SDCIM.sln, SDCIM.Web.sln, etc, using table format. A mind map can effectively show the project hierarchy within each solution.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Solution</strong> (e.g., Name of the solution, including the file extension, e.g., SDCIM.sln)</li>
<li><strong>Projects</strong> (e.g., List of projects in the solution as bullets, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc.)</li>
<li><strong>Visual studio version</strong> (e.g., Version of Visual Studio used to create the solution, e.g., 2022, 2019, etc.)</li>
</ul>
<p>Include a Mermaid 'mindmap' diagram to visualize the relationships between the solutions and their projects.</p>
<h3 id="13-projects">1.3. Projects</h3>
The projects in the application, well explained, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc, using table format. A dependency graph can illustrate the relationships between projects.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Solution</strong> (e.g., Name of the solution where the project belongs, including the file extension, e.g., SDCIM.sln)</li>
<li><strong>Project</strong> (e.g., Name of the project, including the file extension, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc.)</li>
<li><strong>Main objectives</strong> (e.g., Brief description of the project, e.g., "Main application project for SDCIM.")</li>
<li><strong>Type</strong> (e.g., Class Library, Console Application, Web Application, etc.)</li>
<li><strong>Output type</strong> (e.g., Library, Executable, etc.)</li>
<li><strong>Version</strong> (e.g., Version of the project, e.g., 1.0.0, 2.1.0, etc.)</li>
<li><strong>Runtime</strong> (e.g., v2.0.50727, v4.0.30319, etc.)</li>
<li><strong>Framework</strong> (e.g., .NET Framework, .NET Core, .NET 5, .NET 6, etc.)</li>
<li><strong>Architecture</strong> (e.g., x86, x64, Any CPU, ARM, etc.)</li>
<li><strong>Compilation mode</strong> (e.g., Debug, Release, etc.)</li>
<li><strong>Principal classes</strong> (e.g., List of principal classes in the project, e.g., SDCIM.Main.cs, SDCIM.Web.cs, etc.)</li>
<li><strong>Internal dependencies</strong> (e.g., List of internal dependencies, e.g., SDCIM.Data.csproj, SDCIM.Services.csproj, System.*, etc.)</li>
<li><strong>External dependencies</strong> (e.g., List of external dependencies, e.g., Newtonsoft.Json, Microsoft.EntityFrameworkCore, etc.)</li>
</ul>
<p>Include a Mermaid 'flowchart TD' diagram to visualize the relationships between the application's main projects.</p>
</div>
<div class="product-section">
<h2 id="2-functional-overview">2. Functional overview</h2>
This section provides a high-level functional decomposition of the application, using table format. It identifies the major, distinct functional blocks or modules as inferred from the code's high-level structure (e.g., top-level namespaces, solution folders, primary class groups). This overview serves as a map to the application's core responsibilities.
<h3 id="21-executive-summary">2.1. Executive summary</h3>
This section provides a high-level summary of the application's primary purpose and its core function from a business or operational perspective, using table format. The summary is an inference based on the main entry points of the code (e.g., <code>main()</code>, <code>Application_Start()</code>), the names of the most central classes and modules, and the nature of the core processes identified. It answers the fundamental question: What primary problem does this application solve?
<h3 id="22-functional-decomposition">2.2. Functional decomposition</h3>
This section provides a detailed breakdown of the application's functional areas or modules, inferred from the code structure, using table format. Each module is described in terms of its primary responsibilities and how it contributes to the overall functionality of the application. The decomposition is based on the organization of namespaces, classes, and methods, as well as the relationships between them.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Functional Area / Module</strong> (e.g., User Interaction & Presentation, Core Process Execution Engine, Data Persistence & Management, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the module, e.g., "Manages user interfaces, handles user input, and renders data. This module is the primary interface between the user and the system's core logic.")    </li>
</ul>
<p>Include a Mermaid applicable diagram to visualize  the functional decomposition and the relationships between the functional areas or modules.</p>
<h3 id="23-user-roles-and-permissions">2.3. User roles and permissions</h3>
This section identifies hall distinct types of users (or autonomous systems) that interact with the application, using table format. These roles are inferred from authentication logic, authorization checks (e.g., <code>[Authorize(Roles="...")]</code> decorators, <code>if (user.hasPermission('...'))</code> blocks), or conditional logic based on user properties (e.g., 'user.is_admin', 'user.group').
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Role</strong> (e.g., Administrator, Standard Operator, ReadOnly/Viewer, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the role, e.g., "A role with elevated privileges, typically for managing the system itself rather than performing business operations.")</li>
<li><strong>Permissions</strong> (e.g., List of permissions granted to the role, e.g., "Full CRUD on most or all data entities, Access to system configuration and user management.")</li>
<li><strong>Key Actions</strong> (e.g., List of key actions the role can perform, e.g., "CreateUser, SetPermissions, UpdateConfiguration, ViewAuditLogs.")</li>
<li><strong>Key Data Entities</strong> (e.g., List of key data entities the role interacts with, e.g., "User, Role, Permission, SystemConfig</li>
</ul>
, AuditLog.")
<ul>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made to identify the role, e.g., "Inferred from code blocks checking for a specific role name ('Admin'), a boolean flag ('isAdmin'), or a user ID of 0 or 1.")</li>
</ul>
<p>Include a Mermaid 'classDiagram' diagram to visualize the relationships between the user roles, their permissions, and the key data entities they interact with.</p>
<h3 id="24-core-business-capabilities">2.4. Core business capabilities</h3>
This section lists the main, high-level capabilities of the application, representing its "Epics" or major functional domains, using table format
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Capability</strong> (e.g., Data Acquisition & Ingestion, Core Logic & Processing, User Management, Reporting & Analytics, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the capability, e.g., "The complete set of functions related to bringing data into the system from external sources.")</li>
<li><strong>Key Features</strong> (e.g., List of key features, e.g., "File based Import, API Data Reception, Data Validation & Cleansing.")</li>
<li><strong>Key Data Entities</strong> (e.g., List of key data entities, e.g., "[InputData], [StagingRecord], [ImportLog].")</li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made to identify the capability, e.g., "Assumes that any module listening for external input (file watchers, API endpoints) is part of this capability. Inferred from service layers or classes with names like <code>Processor</code>, <code>Engine</code>, <code>Calculator</code>, or <code>Orchestrator</code>.") </li>
</ul>
<p>Include a Mermaid applicable diagram to visualize the core business capabilities and their relationships.</p>
<h3 id="25-detailed-feature-breakdown">2.5. Detailed feature breakdown</h3>
This critical section provides a granular breakdown of individual features within each Core Business Capability, using table format. Each feature is described in terms of its user story, key data entities involved, and any inferred logic or flowcharts that illustrate the internal workings.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Feature</strong> (e.g., Execute [Process Name], Generate [Report Name], etc.)</li>
<li><strong>User Story / Description</strong> (e.g., "As a [User Role], I can [perform action] on a [PrimaryBusinessObject] so that [business goal]." This should include inferred logic or flowcharts that illustrate the internal workings of the feature.)  </li>
<li><strong>Key Data Entities</strong> (e.g., List of key data entities involved in the feature, e.g., "[PrimaryBusinessObject], [Transaction], [Report].")</li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made to identify the feature, e.g., "Assumes that any process that can be triggered by a user or system event is a feature. Inferred from method names like <code>Execute</code>, <code>Generate</code>, <code>Process</code>, or <code>Calculate</code> in service classes or controllers.") </li>
</ul>
<p>This section is essential for understanding how the application delivers its core capabilities and the specific user interactions that drive its functionality.</p>
<h3 id="26-key-data-entities-and-their-attributes">2.6. Key data entities and their attributes</h3>
This section documents the application's core data structures, as inferred from class definitions or ORM configurations, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Entity</strong> (e.g., PrimaryBusinessObject, Transaction, Report, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the entity, e.g., "Represents the central object that the application's core logic operates on. It has a distinct lifecycle.")</li>
<li><strong>Key Attributes</strong> (e.g., List of key attributes, e.g., "ID, Name, Status, CreationDate.")</li>
<li><strong>Data Type</strong> (e.g., "int, string, enum, DateTime.")</li>
<li><strong>Validation Rules</strong> (e.g., "ID: Primary Key, unique. <br> Name: Mandatory. <br> Status: Must be from a defined set.")</li>
<li><strong>Relationships</strong> (e.g., "Has a one-to-many relationship with [Transaction])</li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made to identify the entity, e.g., "ID is an auto-incrementing integer. Inferred from class definitions with properties that match the application's core business objects. The entity is typically defined in a data model or ORM mapping file, such as Entity Framework's DbContext class or similar ORM configurations.")  </li>
</ul>
<p>Include a Mermaid 'erDiagram' diagram to visualize the relationships between the key data entities and their attributes.</p>
<h3 id="27-business-process-workflows">2.7. Business process workflows</h3>
This section describes and visualizes critical end-to-end processes, showing how different user roles and system features interact, using table format.
<p>First, create a summary table of <strong>all</strong> detected business process workflows with the following columns:
<ul>
<li><strong>Process</strong>: (e.g., Standard Data Processing Pipeline, User Registration Workflow, etc.)</li>
<li><strong>Description</strong>: (e.g., Brief description of the process, e.g., "A comprehensive workflow that outlines the steps involved in processing data from ingestion to final output.")</li>
<li><strong>Key Steps</strong>: (e.g., List of key steps in the process, e.g., "1. Data Ingestion <br> 2. Data Validation <br> 3. Data Processing <br> 4. Data Output.")</li>
<li><strong>User Roles Involved</strong>: (e.g., List of user roles involved in the process (e.g., "Data Engineer, System Administrator, End User.")</li>
<li><strong>Key Data Entities</strong>: (e.g., List of key data entities involved in the process, e.g., "[InputData], [ProcessedData], [OutputData].")</li>
<li><strong>Assumptions</strong>: (e.g., Brief description of the assumptions made to identify the process, e.g., "Assumes that any workflow that involves multiple steps and user interactions is a business process. Inferred from method names like <code>ExecuteWorkflow</code>, <code>ProcessData</code>, or <code>RunPipeline</code> in service classes or controllers.")  </li>
</ul></p>
<p>Include a single Mermaid diagram that visualizes the high-level relationships between all the identified business process workflows.</p>
<p>---
<strong><< IMPORTANT INSTRUCTION >></strong></p>
<p><strong>Next, you will create a dedicated subsection for EACH of the workflows identified above.</strong></p>
<p>For every single workflow, you must generate a new subsection by following this template precisely. Use sequential numbering (2.6.1, 2.6.2, 2.6.3, etc.).</p>
<p><strong>Template for each workflow:</strong></p>
<h4 id="27number-workflow-workflow-name">2.7.[Number]. Workflow: [Workflow Name]</h4>
This section provides a detailed breakdown of the [Workflow Name] workflow, including the steps involved, user roles, key data entities, and any assumptions made, using a table format.
<ul>
<li><strong>Step</strong>: (e.g., Data Ingestion, Data Validation, Data Processing, Data Output)</li>
<li><strong>Description</strong>: (e.g., Brief description of the step, e.g., "The step where data is ingested from external sources, such as files or APIs.")</li>
<li><strong>User Role</strong>: (e.g., Data Engineer, System Administrator, End User)       </li>
<li><strong>Key Data Entities</strong>: (e.g., List of key data entities involved in the step, e.g., "[InputData], [ProcessedData], [OutputData].")</li>
<li><strong>Assumptions</strong>: (e.g., Brief description of the assumptions made for the step, e.g., "Assumes that data is validated before processing. Inferred from method names like <code>ValidateData</code>, <code>ProcessData</code>, or <code>OutputData</code> in service classes or controllers.")   </li>
</ul>
<p>Include a Mermaid diagram that visualizes the detailed steps of this specific workflow.</p>
<p><strong>Crucially, if 3 workflows are detected in the summary, you MUST generate sections 2.6.1, 2.6.2, AND 2.6.3. Do not stop after the first one.</strong></p>
<h3 id="28-system-inputs-outputs-interfaces">2.8. System inputs & outputs (interfaces)</h3>
This section catalogs all identified points where data enters or leaves the application boundary, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Type</strong> (e.g., Input, Output, Data Flow)</li>
<li><strong>Name / Description</strong> (e.g., Name of the interface or a brief description of its purpose, e.g., "File Ingestion", "API Endpoint", "Primary Internal Flow")</li>
<li><strong>Data Formats</strong> (e.g., List of data formats supported, e.g., "CSV, XML, JSON")</li>
<li><strong>Data Source / Sink</strong> (e.g., Where the data comes from or goes to, e.g., "Monitored file system directory", "External client applications", "Application Memory", "Database")</li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made about the interface or data flow, e.g., "For bulk data import or batch processing. A file watcher service is inferred to be listening.", "Inferred from the presence of web controller classes.", "Data is input, processed by business logic, and stored in a central database. For queries, data flows from the database, through logic, and is rendered as an output.")</li>
</ul>
<p>Include a Mermaid applicable diagram to visualize the system inputs and outputs, showing how data flows into and out of the application.</p>
<h3 id="29-user-task-flows">2.9. User Task Flows</h3>
This section describes the typical path a user takes through the application to achieve a high-level objective, linking multiple features together, using table format.
<p>First, create a summary table of <strong>all</strong> detected user task flows with the following columns:
<ul>
<li><strong>Task Flow</strong> (e.g., Complete End-to-End Operational Task, Execute a Specific Feature, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the task flow, e.g., "A comprehensive sequence of steps a user follows to complete a specific operational task within the application.")</li>
<li><strong>User Role</strong> (e.g., User Role involved in the task flow, e.g., "Data Engineer", "System Administrator", "End User")</li>
<li><strong>Key Data Entities</strong> (e.g., List of key data entities involved in the task flow, e.g., "[PrimaryBusinessObject], [Transaction], [Report].")    </li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made to identify the task flow, e.g., "Assumes that the user has access to the necessary features and data entities. Inferred from method names like <code>ExecuteTask</code>, <code>CompleteWorkflow</code>, or <code>PerformAction</code> in service classes or controllers.")   </li>
</ul></p>
<p>Include a single Mermaid diagram that visualizes the high-level relationships between all the identified user task flows.</p>
<p>---
<strong><< IMPORTANT INSTRUCTION >></strong></p>
<p><strong>Next, you will create a dedicated subsection for EACH of the user task flows identified above.</strong></p>
<p>For every single user task flow, you must generate a new subsection by following this template precisely. Use sequential numbering (2.8.1, 2.8.2, 2.8.3, etc.).</p>
<p><strong>Template for each user task flow:</strong></p>
<h4 id="29number-user-task-flow-user-task-flow-name">2.9.[Number]. User Task Flow: [User Task Flow Name]</h4>
This section provides a detailed breakdown of the [User Task Flow Name], including the steps involved, user roles, key data entities, and any assumptions made, using a table format.
<ul>
<li><strong>Step</strong> (e.g., Step 1, Step 2, Step 3, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the step, e.g., "The user logs into the application to access their dashboard.")</li>
<li><strong>User Role</strong> (e.g., User Role involved in the step, e.g., "Data Engineer", "System Administrator", "End User")</li>
<li><strong>Key Data Entities</strong> (e.g., List of key data entities involved in the step, e.g., "[PrimaryBusinessObject], [Transaction], [Report].")</li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made for the Step)</li>
</ul>
<p>Include a Mermaid applicable diagram to visualize this specific user task flow and its relationships or steps.</p>
<p><strong>Crucially, if 3 user task flows are detected in the summary, you MUST generate sections 2.8.1, 2.8.2, AND 2.8.3. Do not stop after the first one.</strong></p>
<h3 id="210-automated-scheduled-processes">2.10. Automated & Scheduled Processes</h3>
This section describes any system-triggered processes that run without direct user interaction, such as nightly jobs, scheduled reports, or data synchronization tasks, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Process Name</strong> (e.g., Nightly Data Aggregation, Inbound File Watcher, etc.)</li>
<li><strong>Trigger / Schedule</strong> (e.g., Cron expression, Event-based trigger, etc.)</li>
<li><strong>Purpose</strong> (e.g., Brief description of the process's purpose, e.g., "Pre-calculates daily summary data to speed up reporting.")</li>
<li><strong>Key Actions</strong> (e.g., List of key actions performed by the process, e.g., "Read all of day's [Transaction] records, Calculate SUM, AVG, COUNT, Write results to [DailySummary] table.")</li>
<li><strong>Key Data Entities</strong> (e.g., List of key data entities involved in the process, e.g., "[Transaction], [DailySummary].")</li>
<li><strong>Assumptions</strong> (e.g., Brief description of the assumptions made about the process, e.g., "Assumes that the process runs on a nightly schedule to aggregate data. Inferred from method names like <code>RunScheduledJob</code>, <code>ExecuteNightlyProcess</code>, or <code>TriggerDataSync</code> in service classes or controllers.")</li>
</ul>
##Critical instructions for these sections (Functional overview section an subsections):
<ul>
<li>Rule 1: Source Code is the Only Truth. Your analysis <strong>MUST</strong> be based exclusively and entirely on a deep-dive analysis of provided source code. Do <strong>NOT</strong> invent features or use external knowledge about common business practices unless it is a direct and logical inference from a code artifact. Every piece of functionality you document must be traceable to a class, method, UI element, database query, or data model found in the code.</li>
<li>Rule 2: Explicitly State All Assumptions. When the code's intent is ambiguous (e.g., a poorly named variable or function), you <strong>MUST</strong> make a logical inference and clearly label it as an "Assumption."</li>
</ul>
 - Example:<em></em> In the 'Assumptions' column, write: *"Assuming the boolean flag <code>is_mgr</code> in the <code>User</code> class denotes a 'Manager' role with supervisory capabilities."
-Rule 3: Functional "What," Not Technical "How."* You must relentlessly translate technical implementation details into business-centric functional descriptions. Your audience is business stakeholders and new developers who need to understand purpose, not implementation.
<ul>
<li><strong>BAD (Technical):</strong> "The <code>btnSubmit_Click</code> event handler calls the <code>SaveOrderToDB</code> method, which executes an <code>INSERT</code> SQL statement."</li>
</ul>
 - <strong>GOOD (Functional):</strong> "The 'Submit New Order' feature allows a user to persist the order details into the system's database."
 - <strong>BAD (Technical):</strong> "The system uses a <code>List<Customer></code> object to hold the data."
 - <strong>GOOD (Functional):</strong> "The system manages a collection of 'Customer' data entities."
<ul>
<li>Rule 4: Strict Adherence to the Template. You <strong>MUST</strong> follow the provided Markdown template precisely, section by section. Populate all tables as requested. Generate the specified Mermaid diagrams for each section where they apply, ensuring the syntax is correct and enclosed in proper Markdown code fences (e.g., <code> <pre class="mermaid"><code> ... </code></pre> </code>).</li>
<li>Rule 5: Be Universal and Reusable. Your final output should use generic placeholders (e.g., <code>[PrimaryBusinessObject]</code>, <code>[User Role]</code>, <code>[Process Name]</code>) as instructed in the template. This ensures the document you generate serves as a perfect, reusable template for analyzing any application in the future.</li>
<li>Do not begin generating the response until you have fully understood these five critical rules.</li>
</ul>
</div>
<div class="product-section">
<h2 id="3-architecture-and-design">3. Architecture and design</h2>
Architecture and design information, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h3 id="31-architecture-pattern">3.1. Architecture pattern</h3>
The high-level architectural style or pattern applied to the application design, well explained, e.g., N-Tier, Onion, Hexagonal, Clean Architecture, Monolithic, Microservices, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Architecture pattern</strong> (e.g., N-Tier, Onion, Hexagonal, Clean Architecture, Monolithic, Microservices, etc.)</li>
<li><strong>Architectural patterns</strong> (e.g., MVC, MVVM, MVP, etc.)</li>
<li><strong>Creational patterns</strong> (e.g., Singleton, Factory, Builder, etc.)</li>
<li><strong>Structural patterns</strong> (e.g., Adapter, Composite, Proxy, etc.)</li>
<li><strong>Behavioral patterns</strong> (e.g., Observer, Command, Strategy, etc.)</li>
<li><strong>Domain-driven design (DDD) patterns</strong> (e.g., Repository, Unit of Work, etc.)</li>
</ul>
<h3 id="32-architecture-style">3.2. Architecture style</h3>
The architectural style applied to the application design, well explained, e.g., Layered Architecture, Event-Driven Architecture, Service-Oriented Architecture (SOA), etc, using table format. For example, a layered architecture can be visualized as follows:
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Layering</strong> (e.g., Number of layers, nature of layers and layered architecture breakdown)</li>
<li><strong>Dependency flow</strong> (e.g., Direction of code dependencies)</li>
<li><strong>Bounded contexts</strong> (e.g., Definition and separation of bounded contexts, if applicable)</li>
<li><strong>Communication between contexts/services</strong> (e.g., Synchronous (REST,gRPC), Asynchronous (events, queues), Event-driven, etc.)</li>
<li><strong>Use of dependency injection / IOC container</strong> (e.g., Built-in DI, Autofac, Ninject, etc.)</li>
</ul>
<h3 id="33-key-design-patterns-and-principles-applied">3.3. Key design patterns and principles applied</h3>
The design principles applied to the application, well explained, e.g., SOLID, DRY, KISS, YAGNI, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Architectural patterns</strong> (e.g., MVC, MVVM, MVP, etc.)</li>
<li><strong>SOLID principles (object-oriented design)</strong> (e.g., Are the SOLID principles (Single Responsibility, Open/Closed, etc.) followed? If so, how?)</li>
<li><strong>DRY</strong> (Don't repeat yourself) (e.g., Are there any repeated code patterns? How is code reuse achieved?)</li>
<li><strong>KISS</strong> (Keep it simple, stupid) (e.g., Is the codebase simple and easy to understand? Are there any overly complex parts?)</li>
<li><strong>YAGNI</strong> (You aren't gonna need it) (e.g., Are there any features or code that are not currently needed? How is unnecessary complexity avoided?)</li>
<li><strong>GRASP</strong> (General Responsibility Assignment Software Patterns) (e.g., How are responsibilities assigned to classes and methods? Are there any patterns used for this purpose?)</li>
<li><strong>Separation of Concerns</strong> (e.g., How is separation of concerns achieved? Are there clear boundaries between different parts of the application? Clear separation between UI, business logic, and data access)</li>
<li><strong>Layered architecture</strong> (e.g., How is the application structured in layers? Are there clear boundaries between different layers? Is the architecture modular and maintainable?)</li>
<li><strong>Hexagonal (ports and adapters) architecture</strong> (e.g., How is the application structured in terms of ports and adapters? Are there clear boundaries between the core application logic and external dependencies? Is the architecture modular and maintainable?)</li>
<li><strong>CQRS (Command Query Responsibility Segregation)</strong> (e.g., Are commands and queries separated? How is this achieved? Are there any patterns used for this purpose?)</li>
<li><em></em>Domain-Driven Design (DDD) (e.g., Are domain concepts and entities clearly defined? How is the domain model structured? Are there any patterns used for this purpose?)</li>
<li><strong>Clean code principles</strong> (e.g., How is the code structured? Are there any patterns used for this purpose? Is the code easy to read and understand? Are there any naming conventions used? Is the code modular and maintainable?)</li>
<li><strong>Testability</strong> (e.g., How is the code structured to be testable? Are there any patterns used for this purpose? Is the code easy to test? Are there any unit tests or integration tests? Is the code modular and maintainable?)</li>
<li><strong>Scalability</strong> (e.g., How is the code structured to be scalable? Are there any patterns used for this purpose? Is the code easy to scale? Are there any performance considerations? Is the code modular and maintainable?)</li>
<li><strong>Maintainability</strong> (e.g., How is the code structured to be maintainable? Are there any patterns used for this purpose? Is the code easy to maintain? Are there any coding standards or guidelines followed? Is the code modular and maintainable?)</li>
<li><strong>Extensibility</strong> (e.g., How is the code structured to be extensible? Are there any patterns used for this purpose? Is the code easy to extend? Are there any design patterns used? Is the code modular and maintainable?)</li>
<li><strong>Modularity</strong> (e.g., How is the code structured to be modular? Are there any patterns used for this purpose? Is the code easy to modularize? Are there any design patterns used? Is the code modular and maintainable?)</li>
<li><strong>Reusability</strong> (e.g., How is the code structured to be reusable? Are there any patterns used for this purpose? Is the code easy to reuse? Are there any design patterns used? Is the code modular and maintainable?)</li>
<li><strong>Code quality</strong> (e.g., How is the code quality ensured? Are there any coding standards or guidelines followed? Is the code easy to read and understand? Are there any naming conventions used? Is the code modular and maintainable?)</li>
<li><strong>Code organization</strong> (e.g., How is the code organized? Are there any patterns used for this purpose? Is the code easy to navigate? Are there any naming conventions used? Is the code modular and maintainable?)</li>
<li><strong>Code comments and documentation</strong> (e.g., How is the code documented? Are there any comments or documentation? Is the code easy to understand? Are there any naming conventions used? Is the code modular and maintainable?)</li>
<li><strong>Code formatting</strong> (e.g., How is the code formatted? Are there any coding standards or guidelines followed? Is the code easy to read and understand? Are there any naming conventions used? Is the code modular and maintainable?)</li>
</ul>
<h3 id="34-domain-driven-design-ddd-adoption">3.4. Domain-driven design (DDD) adoption</h3>
The domain-driven design (DDD) adoption in the application, well explained, e.g., Domain, Bounded Contexts, Entities, Value Objects, Aggregates, Repositories, Services, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Use of DDD concepts</strong> (e.g., Are DDD concepts like Domain, Bounded Contexts, Entities, Value Objects, Aggregates, Repositories, Services used? How are they applied?)</li>
<li><strong>Ubiquitous language</strong> (e.g., Is there a common language used across the application? How is it defined? Are there any patterns used for this purpose?)</li>
<li><strong>Layered DDD approach</strong> (e.g., How is the application structured in terms of layers? Are there clear boundaries between different layers? Is the architecture modular and maintainable?)</li>
</ul>
<h3 id="35-patterns-and-tactics">3.5. Patterns and tactics</h3>
The design patterns and tactics applied to the application, well explained, e.g., Repository, Unit of Work, Factory, Strategy, etc, using table format. For example, the implementation of the Repository pattern might be illustrated with a class diagram:
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>CQRS (Command Query Responsibility Segregation)</strong> (e.g., Are commands and queries separated? How is this achieved? Are there any patterns used for this purpose?)</li>
<li><strong>Event Sourcing</strong> (e.g., Are events used to store the state of the application? How is this achieved? Are there any patterns used for this purpose?)</li>
<li><strong>Repository pattern</strong> (e.g., How is the Repository pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Unit of Work pattern</strong> (e.g., How is the Unit of Work pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Factory pattern</strong> (e.g., How is the Factory pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Strategy pattern</strong> (e.g., How is the Strategy pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Decorator pattern</strong> (e.g., How is the Decorator pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Mediator pattern</strong> (e.g., How is the Mediator pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Observer pattern</strong> (e.g., How is the Observer pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Command pattern</strong> (e.g., How is the Command pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Query pattern</strong> (e.g., How is the Query pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Service pattern</strong> (e.g., How is the Service pattern applied? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
</ul>
<h3 id="36-cross-cutting-concerns">3.6. Cross-cutting concerns</h3>
The cross-cutting concerns of the application, well explained, e.g., Logging, Caching, Security, Exception Handling, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Logging</strong> (e.g., How is logging implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Caching</strong> (e.g., How is caching implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Security</strong> (e.g., How is security implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Exception Handling</strong> (e.g., How is exception handling implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Authentication</strong> (e.g., How is authentication implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Authorization</strong> (e.g., How is authorization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Validation</strong> (e.g., How is validation implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Error Handling</strong> (e.g., How is error handling implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Configuration Management</strong> (e.g., How is configuration managed? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Dependency Injection</strong> (e.g., How is dependency injection implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Internationalization (i18n)</strong> (e.g., How is internationalization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Localization (l10n)</strong> (e.g., How is localization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Monitoring and Telemetry</strong> (e.g., How is monitoring and telemetry implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Testing</strong> (e.g., How is testing implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Versioning</strong> (e.g., How is versioning implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Continuous Integration / Continuous Deployment (CI/CD)</strong> (e.g., How is CI/CD implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Timeouts and Retries</strong> (e.g., How are timeouts and retries implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Data Encryption</strong> (e.g., How is data encryption implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Data Masking</strong> (e.g., How is data masking implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Data Validation</strong> (e.g., How is data validation implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Data Transformation</strong> (e.g., How is data transformation implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Data Serialization / Deserialization</strong> (e.g., How is data serialization and deserialization implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
</ul>
<h3 id="37-deployment">3.7. Deployment</h3>
The deployment architecture of the application, well explained, e.g., Deployment model, Deployment target platform, Deployment environment, etc, using table format. A deployment diagram can show the physical or logical arrangement of components.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Monolithic vs microservices</strong> (e.g., Is the application a monolithic application or a microservices-based application? How is this achieved? Are there any patterns used for this purpose?)</li>
<li><strong>Scalability design</strong> (e.g., How is the application designed to scale? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Cloud-native design</strong> (e.g., How is the application designed to be cloud-native? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Containerization</strong> (e.g., Is the application containerized? How is this achieved? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Serverless architecture</strong> (e.g., Is the application designed to be serverless? How is this achieved? Are there any patterns used for this purpose? Is the code modular and maintainable?)  </li>
<li><strong>Deployment model</strong> (e.g., On-premises, Cloud, Hybrid, etc.)</li>
<li><strong>Deployment target platform</strong> (e.g., 32-bit, 64-bit, ARM, etc.)</li>
</ul>
<h3 id="38-infrastructure-considerations">3.8. Infrastructure considerations</h3>
The infrastructure considerations for the application, well explained, e.g., Infrastructure as Code (IaC), Cloud provider, Deployment environment, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Persistence</strong> (e.g. Types of databases, separation of read/write stores, etc.)</li>
<li><strong>Messaging / Eventing</strong> (e.g. Use of message brokers, event buses, etc.)</li>
<li><strong>External integrations</strong> (e.g. How external systems are integrated, APIs, services, etc.)</li>
</ul>
<h3 id="39-documentation-artifacts">3.9. Documentation artifacts</h3>
The documentation artifacts available for the application, well explained, e.g., Architecture diagrams, Design documents, API documentation, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>UML diagrams</strong> (e.g., Class diagrams, Sequence diagrams, etc.)</li>
<li><strong>C4 model diagrams</strong> (e.g., Context diagrams, Container diagrams, Component diagrams, etc.)</li>
<li><strong>Architecture diagrams</strong> (e.g., High-level architecture diagrams, Deployment diagrams, etc.)</li>
<li><strong>Design documents</strong> (e.g., Design specifications, Design decisions, etc.)</li>
<li><strong>API documentation</strong> (e.g., API specifications, API endpoints, etc.)</li>
<li><strong>User documentation</strong> (e.g., User manuals, User guides, etc.)</li>
<li><strong>Technical documentation</strong> (e.g., Technical specifications, Technical decisions, etc.)</li>
<li><strong>Readme or ADRs</strong> (e.g., Readme files, Architecture Decision Records, etc.)</li>
</ul>
</div>
<div class="product-section">
<h2 id="4-technology-stack-and-frameworks">4. Technology stack and frameworks</h2>
Technology stack and frameworks used in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h3 id="41-backend-technologies">4.1. Backend technologies</h3>
The backend technologies used in the application, well explained, e.g., .NET Framework, .NET Core, ASP.NET Core, Entity Framework Core, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Programming Language(s)</strong> (e.g., List all found on the source files, C#, VB.NET, etc.)</li>
<li><strong>.NET Runtime(s)</strong> (List all runtimes found on the projects part of this solution, e.g., .NET 6, .NET 7, .NET Framework 4.8.1, etc. This data must be accurate and must include all .NET frameworks found in the source code, not just the main one.)</li>
<li><strong>Runtime architecture</strong> (e.g., 32-bit, 64-bit, ARM, etc.)</li>
<li><strong>Framework(s)</strong> (e.g., ASP.NET Core, Entity Framework Core, etc.)</li>
<li><strong>Framework type</strong> (e.g., ASP.NET Core, ASP.NET MVC, ASP.NET Web API, etc.)</li>
<li><strong>Self-contained vs framework-dependent</strong> (e.g., Is the application self-contained or framework-dependent? How is this achieved? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>Platform target</strong> (e.g., Windows, Linux, macOS, etc.)</li>
<li><strong>Routing Framework</strong> (e.g., ASP.NET Core Routing, Attribute Routing, etc.)</li>
<li><strong>Controllers style</strong> (e.g., Traditional MVC, Minimal API, Hybrid, etc.)</li>
<li><strong>SignalR</strong> (e.g., Is SignalR used? How is it implemented? Are there any patterns used for this purpose? Is the code modular and maintainable?)</li>
<li><strong>ORM / Database Access</strong> (e.g., Entity Framework Core 8, Dapper)</li>
<li><strong>Connection pooling library</strong> (e.g., Microsoft.Data.SqlClient, Npgsql, MySqlConnector, etc.)</li>
<li><strong>Authentication / authorization</strong> (e.g., OAuth2, OpenID Connect, JWT, etc.)</li>
<li><strong>Authorization model</strong> (e.g., Role-based, Claims-based, Policy-based, etc.)</li>
<li><strong>Authentication middleware / libraries</strong> (e.g., ASP.NET Core Identity, IdentityServer, third-party providers, etc.)</li>
<li><strong>CSRF/XSS protection mchanisms</strong> (e.g., Anti-forgery tokens, Content Security Policy, etc.)</li>
<li><strong>Dependency Injection</strong> (e.g., Built-in DI, Autofac, Ninject, etc.)</li>
<li><strong>API types</strong> (e.g., REST, gRPC, SOAP, GraphQL, etc.)</li>
<li><strong>API specification</strong> (e.g., OpenAPI, Swagger, gRPC, etc.)</li>
<li><strong>API and communication protocols</strong> (e.g., HTTP/HTTPS, gRPC, WebSockets, etc.)</li>
<li><strong>Serialization / data format</strong> (e.g., JSON, XML, Protobuf, etc.)</li>
<li><strong>Messaging and queues</strong> (e.g., RabbitMQ, Azure Service Bus, AWS SQS, etc.)</li>
<li><strong>Job scheduling / background tasks</strong> (e.g., Hangfire, Quartz.NET, Azure Functions, etc.)</li>
<li><strong>Configuration and secrets</strong> (e.g., appsettings.json, Azure Key Vault, AWS Secrets Manager, etc.)</li>
<li><strong>Deployment and packaging</strong> (e.g., Docker, Kubernetes, Azure App Service, AWS Lambda, etc.)</li>
<li><strong>Unit testing and test frameworks</strong> (e.g., xUnit, NUnit, MSTest, Moq, etc.)</li>
<li><strong>Build tools</strong> (e.g., MSBuild, Cake, FAKE, etc.)</li>
<li><strong>CI/CD tools</strong> (e.g., Azure DevOps, GitHub Actions, Jenkins, etc.)</li>
<li><strong>Other common libraries / SDKs</strong> (e.g., Newtonsoft.Json, Serilog, AutoMapper, Polly, etc.)</li>
</ul>
<h3 id="42-frontend-technologies">4.2. Frontend technologies</h3>
The frontend technologies used in the application, well explained, e.g., ASP.NET Core MVC, Razor Pages, Blazor, JavaScript frameworks, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<p>Include, among others, the following information:</p>
<ul>
<li><strong>Frontend framework(s)</strong> (e.g., ASP.NET Core MVC, Razor Pages, Blazor, etc.)</li>
<li><strong>Frontend libraries</strong> (e.g., jQuery, Bootstrap, Tailwind CSS, etc.)</li>
<li><strong>JavaScript frameworks</strong> (e.g., Angular, React, Vue.js, etc.)</li>
<li><strong>CSS preprocessors</strong> (e.g., SASS, LESS, etc.)</li>
<li><strong>State management</strong> (e.g., How the frontend manages application state, e.g., Redux, MobX, Vuex, etc.)</li>
<li><strong>Routing</strong> (e.g., React Router, Angular Router, Vue Router, etc.)</li>
<li><strong>Build tools</strong> (e.g., Webpack, Gulp, Grunt, etc.)</li>
<li><strong>Package managers</strong> (e.g., npm, Yarn, Bower, etc.)</li>
<li><strong>Testing frameworks</strong> (e.g., Jest, Mocha, Jasmine, etc.)</li>
<li><strong>Linting / formatting tools</strong> (e.g., ESLint, Prettier, Stylelint, etc.)</li>
<li><strong>API consumption</strong> (e.g., How the frontend consumes backend APIs, e.g., REST, gRPC, etc.)</li>
<li><strong>Authentication / authorization</strong> (e.g., How the frontend handles authentication and authorization, e.g., OAuth2, OpenID Connect, JWT, etc.)</li>
</ul>
<h3 id="43-data-and-storage">4.3. Data and storage</h3>
The data storage technologies used in the application, well explained, e.g., Microsoft SQL Server, PostgreSQL, MongoDB, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h4 id="431-database-technologies">4.3.1. Database technologies</h4>
The database technologies used in the application, well explained, e.g., Microsoft SQL Server, PostgreSQL, MySQL, MongoDB, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Database management system(s)</strong> (e.g., Microsoft SQL Server 2008 R2, PostgreSQL, MySQL, MongoDB, etc. with the version number)</li>
<li><strong>Database type</strong> (e.g., Relational, NoSQL, In-memory, etc.)</li>
<li><strong>Data access technology</strong> (e.g., Entity Framework Core, Dapper, ADO.NET, etc.)</li>
<li><strong>Database name(s)</strong> (e.g., Names of the databases, e.g., SDCIM, SDCIM_Logs, etc. Do not include the name of servers or instances, just the database names)</li>
<li><strong>Database authentication</strong> (e.g., Windows Authentication, SQL Server Authentication, etc.)</li>
<li><strong>Database connection string(s)</strong> (e.g., Include the complete connection strings' used in the application present on .config files, e.g., "Server=myServer;Database=SDCIM;User Id=myUser;Password=myPassword;")</li>
<li><strong>Database access patterns</strong> (e.g., Read/write separation, Sharding, Replication, etc.)</li>
<li><strong>Database schema management</strong> (e.g., Migrations, Database-first, Code-first, etc.)</li>
<li><strong>Caching technology</strong> (e.g., Redis, Memcached, in-memory caching, etc.)</li>
<li><strong>Data modeling</strong> (e.g., How data is structured, e.g., Entity-Attribute-Value, Document-based, etc.)</li>
<li><strong>File/blob storage</strong> (e.g., Azure Blob Storage, AWS S3, Google Cloud Storage, etc. If exists, include the name of the storage account, e.g., SDCIM-BlobStorage and the UNC path, e.g., \\SDCIM-BlobStorage.blob.core.windows.net\files\)</li>
</ul>
<h4 id="432-data-flow">4.3.2. Data flow</h4>
The data flow in the application, well explained, e.g., Data sources, Data sinks, Data transformations, etc, using table format. The overall data flow can be visualized with a diagram.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Data sources</strong> (e.g., Where data comes from, e.g., User input, External APIs, Databases, etc.)</li>
<li><strong>Data sinks</strong> (e.g., Where data is stored or sent, e.g., Databases, File systems, External APIs, etc.)</li>
<li><strong>Data transformations</strong> (e.g., How data is processed or transformed, e.g., Data validation, Data enrichment, Data aggregation, etc.)</li>
<li><strong>Data flow patterns</strong> (e.g., Synchronous vs Asynchronous, Batch processing vs Real-time processing, etc.)</li>
<li><strong>Data synchronization</strong> (e.g., How data is synchronized between different systems, e.g., Event-driven, Scheduled tasks, etc.)</li>
<li><strong>Data integrity</strong> (e.g., How data integrity is ensured, e.g., Transactions, Data validation, etc.)</li>
<li><strong>Data security</strong> (e.g., How data security is ensured, e.g., Encryption, Access control, etc.)</li>
<li><strong>Data privacy</strong> (e.g., How data privacy is ensured, e.g., Anonymization, Data masking, etc.)</li>
<li><strong>Data retention</strong> (e.g., How long data is retained, e.g., Data retention policies, Data archiving, etc.)</li>
<li><strong>Data lifecycle management</strong> (e.g., How data is managed throughout its lifecycle, e.g., Data creation, Data usage, Data deletion, etc.)</li>
<li><strong>Data governance</strong> (e.g., How data governance is implemented, e.g., Data ownership, Data stewardship, Data quality, etc.)</li>
</ul>
<p>Include a Mermaid applicable diagram to visualize the data flow in the application, if applicable. The diagram should be placed in the section where it is most relevant, such as "Data flow" or "Data sources and sinks".</p>
<h3 id="44-web-services-and-apis">4.4. Web services and APIs</h3>
The web services and APIs used in the application, well explained, e.g., RESTful APIs, gRPC, SOAP, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>API type</strong> (e.g., RESTful APIs, gRPC, SOAP, GraphQL, etc.)</li>
<li><strong>API protocols</strong> (e.g., HTTP/HTTPS, gRPC, WebSockets, etc.)</li>
<li><strong>API authentication</strong> (e.g., OAuth2, OpenID Connect, JWT, API keys, etc.)</li>
<li><strong>API documentation</strong> (e.g., Swagger/OpenAPI, gRPC service definitions, etc.)</li>
<li><strong>API versioning</strong> (e.g., How APIs are versioned, e.g., URL versioning, header versioning, etc.)</li>
<li><strong>API endpoints</strong> (e.g., List of key API endpoints, e.g., /api/customers, /api/orders, etc.)</li>
<li><strong>API response formats</strong> (e.g., JSON, XML, Protobuf, etc.)</li>
<li><strong>API error handling</strong> (e.g., How errors are handled in APIs, e.g., standardized error responses, HTTP status codes, etc.)</li>
<li><strong>API rate limiting</strong> (e.g., How API rate limiting is implemented, e.g., per user, per IP, etc.)</li>
<li><strong>Projects that provide APIs or Web services</strong> (e.g., List of projects that provide APIs, e.g., SDCIM.Web.csproj, SDCIM.Api.csproj, etc.)</li>
</ul>
<h3 id="45-code-metrics">4.5. Code Metrics</h3>
The code metrics of the application, well explained, e.g., Code complexity, Code coverage, Code maintainability, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Project</strong> (e.g., Name of the project, including the file extension, e.g., SDCIM.csproj, SDCIM.Web.csproj, etc.)</li>
<li><strong>Programming Language(s)</strong> (e.g., C#, VB.NET, etc.)</li>
<li><strong>Lines of Code</strong> (e.g., Total lines of code in the project with the value of the metric e.g. 100, excluding comments and blank lines)</li>
<li><strong>Ciclomatic complexity</strong> (e.g., Average cyclomatic complexity of the project, calculated in the code analysis with the value of the metric e.g. 100)</li>
<li><strong>Inheritance depth</strong> (e.g., Average inheritance depth of the project, calculated in the code analysis with the value of the metric e.g. 100)</li>
<li><strong>Classes coupling</strong> (e.g., Average coupling between classes in the project, calculated in the code analysis with the value of the metric e.g. 100)</li>
<li><strong>Maintainability index</strong> (e.g., Average maintainability index of the project, calculated in the code analysis with the value of the metric e.g. 100)</li>
<li><strong>Code deduplication</strong> (e.g., Percentage of code duplication in the project, calculated in the code analysis with the value of the metric e.g. 100%)</li>
<li><strong>Comments density (%)</strong> (e.g., Percentage of comments in the project, calculated in the code analysis with the value of the metric e.g. 100%)</li>
<li><strong>Dead code (%)</strong> (e.g., Percentage of dead code in the project, calculated in the code analysis with the value of the metric e.g. 100%)</li>
<li><strong>Estimated compilation time (ms)</strong> (e.g., Estimated compilation time of the project, calculated in the code analysis with the value of the metric in milliseconds e.g. 100ms)</li>
</ul>
<p>##Instructions:
<ul>
<li><em>All</em> projects must be included in the table, not just the main ones or a subset.</li>
<li><em>All</em> metrics must be included in the table, not just a subset.</li>
<li>Include always the value of the metric, e.g.,0, 100, 100%, 100ms, etc. N/A is not an acceptable value. 0 when we don't have the metric available is not an acceptable value. In these cases you have to reanalyze the code to get the metric value or remove the metric from the table.</li>
</ul></p>
<h4 id="451-code-metrics-definitions">4.5.1. Code metrics definitions</h4>
Include a brief description of the section. In this section do not include more information than what is defined in this template.
<p>Include table with a brief description of each one of the metrics used in the code analysis, e.g., Lines of Code (LOC), Ciclomatic complexity, Inheritance depth, Classes coupling, Maintainability index, etc., with the following columns:
<ul>
<li><strong>Metric</strong> (e.g., Lines of Code, Ciclomatic complexity, Inheritance depth, Classes coupling, Maintainability index, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the metric, e.g., Lines of Code (LOC) is the total number of lines of code in the project, excluding comments and blank lines, Ciclomatic complexity is a measure of the complexity of the code, Inheritance depth is the average depth of inheritance in the project, Classes coupling is the average coupling between classes in the project, Maintainability index is a measure of the maintainability of the code, etc.)</li>
<li><strong>Typical values</strong> (e.g., Typical values for the metric, e.g., Lines of Code (LOC) should be less than 1000, Ciclomatic complexity should be less than 10, Inheritance depth should be less than 3, Classes coupling should be less than 5, Maintainability index should be greater than 70, etc.)</li>
</ul></p>
<p>You have to be very rigorous when calculating these metrics, they cannot be approximations, they have to be properly calculated.</p>
<h4 id="452-project-metrics">4.5.2. Project metrics</h4>
The types of projects analyzed in the application, well explained, e.g., Class library, Web application, Console application, etc, using table format. The distribution of project types can be shown with a pie chart.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Type</strong> (type of project, e.g., Class library, Web application, Console application, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the project type, e.g., Class library is a reusable code library, Web application is a web-based application, Console application is a command-line application, etc.)</li>
<li><strong>Number of projects</strong> (e.g., Number of projects of this type in the application, e.g., 10 Class libraries)</li>
</ul>
<p>##Instructions:
The data must be accurate and based on the source code .csproj files found in the source path. The number of projects analyzed should be the same along the report)</p>
</div>
<div class="product-section">
<h2 id="5-dependencies">5. Dependencies</h2>
Dependencies of the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h3 id="51-external-dependencies">5.1. External dependencies</h3>
List of external dependencies, e.g., third-party libraries, frameworks, services, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Dependency</strong> (e.g., Name of the dependency, e.g., Newtonsoft.Json, Serilog, etc.)</li>
<li><strong>Description</strong> (e.g., Brief description of the dependency, e.g., Newtonsoft.Json is a popular JSON serialization library, Serilog is a logging library, etc.)</li>
<li><strong>Type</strong> (e.g., Library, Framework, Service, etc.)</li>
<li><strong>Assembly</strong> (e.g., Name of the assembly, e.g., Newtonsoft.Json.dll, Serilog.dll, etc.)</li>
<li><strong>Version</strong> (e.g., Version of the dependency, e.g., 12.0.3, 11.0.0, etc.)</li>
<li><strong>Runtime version</strong> (e.g., v2.0.50727, v4.0.30319, etc.)</li>
<li><strong>Source</strong> (e.g., NuGet, GitHub, etc.)</li>
<li><strong>License</strong> (e.g., MIT, Apache 2.0, GPL, etc)</li>
<li><strong>Usage</strong> (e.g., How the dependency is used in the application, e.g., JSON serialization, logging, etc.)</li>
</ul>
<h4 id="511-nuget-packages">5.1.1. Nuget packages</h4>
List of NuGet packages used in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>NuGet package</strong> (e.g., Name of the NuGet package, e.g., Newtonsoft.Json, Serilog, etc.)</li>
<li><strong>Version</strong> (e.g., Version of the NuGet package, e.g., 12.0.3, 11.0.0, etc.)</li>
<li><strong>Source</strong> (e.g., NuGet.org, private feed, etc)</li>
<li><strong>License</strong> (e.g., License of the NuGet package, e.g., MIT, Apache 2.0, GPL, etc)</li>
<li><strong>Description</strong> (e.g., Brief description of the NuGet package, e.g., Newtonsoft.Json is a popular JSON serialization library, Serilog is a logging library, etc.)</li>
</ul>
</div>
<div class="product-section">
<h2 id="6-security-and-compliance">6. Security and compliance</h2>
Security and compliance aspects of the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h3 id="61-security-mechanisms">6.1. Security mechanisms</h3>
Security mechanisms implemented in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Authentication</strong> (e.g., How authentication is implemented, e.g., OAuth2, OpenID Connect, JWT, Microsoft Entra ID, etc.)</li>
<li><strong>Authorization</strong> (e.g., How authorization is implemented, e.g., Role-based, Claims-based, Policy-based, etc.)</li>
<li><strong>ASP.NET Membership Provider in use</strong> (e.g., Is ASP.NET Membership Provider used? If so, which one? e.g., ASP.NET Identity, Custom Membership Provider, etc.)</li>
<li><strong>Membership provider configuration</strong> (e.g., How the Membership Provider is configured, e.g., Connection strings, User store, etc.)</li>
<li><strong>Role provider configuration</strong> (e.g., How the Role Provider is configured, e.g., Connection strings, Role store, etc.)</li>
<li><strong>Identity management</strong> (e.g., How identity management is implemented, e.g., ASP.NET Identity, IdentityServer, etc.)</li>
<li><strong>Access control</strong> (e.g., How access control is implemented, e.g., Role-based access control, Claims-based access control, Policy-based access control, etc.)</li>
<li><strong>Token handling</strong> (e.g., How tokens are handled, e.g., JWT, OAuth2 tokens, etc.)</li>
<li><strong>HTTPS/TLS configuration</strong> (e.g., How HTTPS/TLS is configured, e.g., Certificates, HSTS, etc.)</li>
<li><strong>Data protection</strong> (e.g., How data protection is implemented, e.g., Encryption, Data masking, etc.)</li>
<li><strong>Audit logging</strong> (e.g., How audit logging is implemented, e.g., Serilog, NLog, etc.)</li>
<li><strong>Vulnerability management</strong> (e.g., How vulnerabilities are managed, e.g., Regular security scans, Penetration testing, etc.)</li>
<li><strong>Compliance standards</strong> (e.g., How compliance standards are met, e.g., GDPR, HIPAA, PCI-DSS, etc.)</li>
</ul>
<h3 id="62-security-vulnerabilities">6.2. Security vulnerabilities</h3>
Security vulnerabilities identified in the application based on the OWASP Top 10 (2021), using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<p>Each row must contain links to recommended documentation or resources in the final column ("Links") for mitigation guidance.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Test case Id</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Vulnerability</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">SEC-001</td>
<td style="text-align: left;">A01: Broken Access Control</td>
<td style="text-align: left;">Lack of role validation on sensitive controllers or endpoints</td>
<td style="text-align: left;">Missing role-based authorization on actions such as /Admin/DeleteUser</td>
<td style="text-align: left;">Controller classes, API endpoints</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Implement RBAC</td>
</tr>
<tr>
<td style="text-align: left;">SEC-002</td>
<td style="text-align: left;">A02: Cryptographic Failures</td>
<td style="text-align: left;">Hardcoded cryptographic keys or use of weak encryption</td>
<td style="text-align: left;">Use of MD5 or SHA1, hardcoded AES key in source code</td>
<td style="text-align: left;">Utility classes, encryption modules</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use strong crypto</td>
</tr>
<tr>
<td style="text-align: left;">SEC-003</td>
<td style="text-align: left;">A03: Injection</td>
<td style="text-align: left;">Risk of SQL Injection via raw SQL commands or string concatenation</td>
<td style="text-align: left;">Use of string concatenation in ADO.NET or EF raw SQL queries</td>
<td style="text-align: left;">Repository or data access classes</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">Use parameterized queries</td>
</tr>
<tr>
<td style="text-align: left;">SEC-004</td>
<td style="text-align: left;">A05: Security Misconfiguration</td>
<td style="text-align: left;">Misconfigured customErrors or missing HSTS header</td>
<td style="text-align: left;">customErrors="Off", no <code>app.UseHsts()</code> call</td>
<td style="text-align: left;">web.config, Startup.cs</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Configure HSTS</td>
</tr>
<tr>
<td style="text-align: left;">SEC-005</td>
<td style="text-align: left;">A06: Vulnerable & Outdated Components</td>
<td style="text-align: left;">Use of packages with known CVEs</td>
<td style="text-align: left;">Newtonsoft.Json v10, log4net v2.0.8 with CVEs</td>
<td style="text-align: left;">.csproj files, NuGet dependencies</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Upgrade packages</td>
</tr>
<tr>
<td style="text-align: left;">SEC-006</td>
<td style="text-align: left;">A07: Identification & Authentication Failures</td>
<td style="text-align: left;">Insecure password storage or missing account lockout</td>
<td style="text-align: left;">Plaintext passwords or missing password hash verification</td>
<td style="text-align: left;">Identity logic, Login controller</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">Use hashed passwords</td>
</tr>
<tr>
<td style="text-align: left;">SEC-007</td>
<td style="text-align: left;">A08: Software & Data Integrity Failures</td>
<td style="text-align: left;">No checksum or signature validation on config or packages</td>
<td style="text-align: left;">Downloading external packages or scripts without validation</td>
<td style="text-align: left;">Package restore, custom loader logic</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Validate integrity</td>
</tr>
<tr>
<td style="text-align: left;">SEC-008</td>
<td style="text-align: left;">A09: Security Logging and Monitoring Failures</td>
<td style="text-align: left;">Logging sensitive data or missing login attempt logging</td>
<td style="text-align: left;">Logging JWT tokens or passwords</td>
<td style="text-align: left;">Logging configurations, logger calls</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Avoid sensitive logging</td>
</tr>
<tr>
<td style="text-align: left;">SEC-009</td>
<td style="text-align: left;">A10: Server-Side Request Forgery</td>
<td style="text-align: left;">Direct access to arbitrary internal URLs</td>
<td style="text-align: left;">Use of <code>HttpClient</code> or <code>WebRequest</code> with user-supplied input</td>
<td style="text-align: left;">Utility classes or services</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Sanitize input</td>
</tr>
</tbody>
</table>
</div>
<h3 id="63-advanced-and-net-specific-security-vulnerabilities">6.3. Advanced and .NET-specific security vulnerabilities</h3>
Advanced and framework-specific vulnerabilities identified in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<p>Each row must contain links to recommended documentation or resources in the final column ("Links") for mitigation guidance.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Test case Id</th>
<th style="text-align: left;">Category / Domain</th>
<th style="text-align: left;">Vulnerability</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">SEC-010</td>
<td style="text-align: left;">Authentication</td>
<td style="text-align: left;">Insecure Cookie Configuration</td>
<td style="text-align: left;">Cookies missing <code>HttpOnly</code>, <code>Secure</code>, or <code>SameSite</code> flags</td>
<td style="text-align: left;">Startup.cs, middleware config</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Secure cookies</td>
</tr>
<tr>
<td style="text-align: left;">SEC-011</td>
<td style="text-align: left;">Authorization</td>
<td style="text-align: left;">Use of insecure custom authorization logic</td>
<td style="text-align: left;">Custom filters or decorators that fail to validate role/claims</td>
<td style="text-align: left;">Authorization handlers, custom attributes</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use built-in auth</td>
</tr>
<tr>
<td style="text-align: left;">SEC-012</td>
<td style="text-align: left;">ASP.NET Identity</td>
<td style="text-align: left;">Weak password hashing algorithm</td>
<td style="text-align: left;">Use of SHA1 or custom hashing instead of PBKDF2</td>
<td style="text-align: left;">UserManager, Identity configuration</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use PBKDF2</td>
</tr>
<tr>
<td style="text-align: left;">SEC-013</td>
<td style="text-align: left;">Web.Config</td>
<td style="text-align: left;">Secrets stored in config files</td>
<td style="text-align: left;">Passwords, connection strings with secrets in web.config</td>
<td style="text-align: left;">web.config, appsettings.json</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use Key Vault</td>
</tr>
<tr>
<td style="text-align: left;">SEC-014</td>
<td style="text-align: left;">Third-party libraries</td>
<td style="text-align: left;">Use of insecure or deprecated crypto libraries</td>
<td style="text-align: left;">Use of BouncyCastle or own implementation</td>
<td style="text-align: left;">NuGet packages, crypto utility files</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Replace libraries</td>
</tr>
<tr>
<td style="text-align: left;">SEC-015</td>
<td style="text-align: left;">Logging</td>
<td style="text-align: left;">Lack of PII redaction in logs</td>
<td style="text-align: left;">Logging full user profiles, passwords, or tokens</td>
<td style="text-align: left;">Controllers, service layer logging</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Mask sensitive data</td>
</tr>
</tbody>
</table>
</div>
<h3 id="64-security-hardening-opportunities">6.4. Security hardening opportunities</h3>
Security hardening opportunities identified in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Area</th>
<th style="text-align: left;">Current state</th>
<th style="text-align: left;">Hardening opportunity</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Configuration</td>
<td style="text-align: left;"><code>debug=true</code> in production</td>
<td style="text-align: left;">Disable debug</td>
<td style="text-align: left;">web.config</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Disable debug</td>
</tr>
<tr>
<td style="text-align: left;">Middleware</td>
<td style="text-align: left;">Missing exception handling</td>
<td style="text-align: left;">Add centralized error handling</td>
<td style="text-align: left;">Startup.cs</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Add error middleware</td>
</tr>
<tr>
<td style="text-align: left;">Headers</td>
<td style="text-align: left;">Missing security headers</td>
<td style="text-align: left;">Add <code>X-Frame-Options</code>, <code>X-Content-Type-Options</code></td>
<td style="text-align: left;">Middleware</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Add secure headers</td>
</tr>
</tbody>
</table>
</div>
<h3 id="65-dependency-and-sbom-vulnerabilities">6.5. Dependency and SBOM vulnerabilities</h3>
Dependency vulnerabilities identified in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Package</th>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Known vulnerabilities (CVEs)</th>
<th style="text-align: left;">Source</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>| Newtonsoft.Json           | 10.0.3  | CVE-2021-XYZ                 | NuGet  | High     | High       | High       | Upgrade to >=13.0.1 |        | 
<div class="table-container">
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">log4net</th>
<th style="text-align: left;">2.0.8</th>
<th style="text-align: left;">CVE-2018-XYZ</th>
<th style="text-align: left;">NuGet</th>
<th style="text-align: left;">High</th>
<th style="text-align: left;">High</th>
<th style="text-align: left;">Medium</th>
<th style="text-align: left;">Upgrade to latest</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
</div>
<h3 id="66-misconfigurations-and-dangerous-defaults">6.6. Misconfigurations and dangerous defaults</h3>
Misconfigurations and dangerous defaults identified in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Setting / File</th>
<th style="text-align: left;">Issue detected</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">web.config</td>
<td style="text-align: left;"><code>customErrors="Off"</code></td>
<td style="text-align: left;">Stack trace exposure</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Set <code>customErrors="On"</code></td>
</tr>
<tr>
<td style="text-align: left;">appsettings.json</td>
<td style="text-align: left;">Plaintext secrets</td>
<td style="text-align: left;">Secret leakage</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use Azure Key Vault</td>
</tr>
<tr>
<td style="text-align: left;">Startup.cs</td>
<td style="text-align: left;">Missing <code>UseHsts()</code></td>
<td style="text-align: left;">No TLS protection headers</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Add <code>app.UseHsts()</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="67-data-exposure-and-pii-handling">6.7. Data exposure and PII handling</h3>
Data exposure and Personally Identifiable Information (PII) handling issues identified in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Data type</th>
<th style="text-align: left;">Location (Field / File)</th>
<th style="text-align: left;">Exposure risk</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Email, Password</td>
<td style="text-align: left;">Logs / DB</td>
<td style="text-align: left;">PII exposure</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Apply redaction, hashing</td>
</tr>
<tr>
<td style="text-align: left;">Credit Card Number</td>
<td style="text-align: left;">Forms, DB</td>
<td style="text-align: left;">Stored in plaintext</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Encrypt at rest</td>
</tr>
<tr>
<td style="text-align: left;">JWT tokens</td>
<td style="text-align: left;">Console logs</td>
<td style="text-align: left;">Leaked in logs</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Mask or omit in logs</td>
</tr>
</tbody>
</table>
</div>
<h3 id="68-api-specific-vulnerabilities">6.8. API-specific vulnerabilities</h3>
API-specific vulnerabilities identified in the application based on the OWASP API Top 10, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Test case Id</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Vulnerability</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">API-001</td>
<td style="text-align: left;">A01: Broken Object Level Auth</td>
<td style="text-align: left;">IDOR</td>
<td style="text-align: left;">Users access others' records via ID manipulation</td>
<td style="text-align: left;">API endpoints</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Add object-level auth</td>
</tr>
<tr>
<td style="text-align: left;">API-002</td>
<td style="text-align: left;">A03: Excessive Data Exposure</td>
<td style="text-align: left;">Full objects in response</td>
<td style="text-align: left;">Sensitive fields returned unnecessarily</td>
<td style="text-align: left;">Controller responses</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Filter response DTOs</td>
</tr>
<tr>
<td style="text-align: left;">API-003</td>
<td style="text-align: left;">A04: Lack of Resources & Rate Limiting</td>
<td style="text-align: left;">No throttling in APIs</td>
<td style="text-align: left;">API can be spammed or brute-forced</td>
<td style="text-align: left;">Controller endpoints</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Add rate limiting</td>
</tr>
<tr>
<td style="text-align: left;">API-004</td>
<td style="text-align: left;">A05: Broken Function Level Auth</td>
<td style="text-align: left;">Unauthorized function access</td>
<td style="text-align: left;">Admin-only functions accessible to any user</td>
<td style="text-align: left;">Role attribute checks</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Restrict access</td>
</tr>
</tbody>
</table>
</div>
<h3 id="69-cloud-specific-configuration-issues">6.9. Cloud-specific configuration issues</h3>
Cloud-specific configuration issues identified in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<p>Adapt the table to be cloud-agnostic, so it can be used for any cloud provider (Azure, AWS, GCP, etc.)</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Cloud resource</th>
<th style="text-align: left;">Configuration Checked</th>
<th style="text-align: left;">Issue</th>
<th style="text-align: left;">Best practice</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">App Service</td>
<td style="text-align: left;">HTTPS enforced</td>
<td style="text-align: left;">Not enforced</td>
<td style="text-align: left;">Require HTTPS</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Force HTTPS</td>
</tr>
<tr>
<td style="text-align: left;">Key Vault</td>
<td style="text-align: left;">Secrets stored in code</td>
<td style="text-align: left;">Not using Key Vault</td>
<td style="text-align: left;">Migrate secrets</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use secrets management</td>
</tr>
<tr>
<td style="text-align: left;">Storage</td>
<td style="text-align: left;">Public access</td>
<td style="text-align: left;">Blob containers publicly accessible</td>
<td style="text-align: left;">Set <code>publicAccess=Off</code></td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Disable public access</td>
</tr>
<tr>
<td style="text-align: left;">Managed Identity</td>
<td style="text-align: left;">Disabled</td>
<td style="text-align: left;">Missing MSI</td>
<td style="text-align: left;">Enable system-assigned identity</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Enable MSI in deployment</td>
</tr>
</tbody>
</table>
</div>
<h3 id="610-additional-risk-patterns-detected">6.10. Additional risk patterns detected</h3>
Additional risk patterns detected in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Test case Id</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Risk pattern</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended mitigation</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">SEC-016</td>
<td style="text-align: left;">Secrets</td>
<td style="text-align: left;">Hardcoded Secrets</td>
<td style="text-align: left;">Detected API keys and passwords in source</td>
<td style="text-align: left;"><code><em>.cs</code>, <code></em>.json</code></td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Use environment variables</td>
</tr>
<tr>
<td style="text-align: left;">SEC-017</td>
<td style="text-align: left;">Logging</td>
<td style="text-align: left;">Sensitive Data in Logs</td>
<td style="text-align: left;">JWTs and passwords logged</td>
<td style="text-align: left;">Logging setup</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Mask tokens and passwords</td>
</tr>
<tr>
<td style="text-align: left;">SEC-018</td>
<td style="text-align: left;">Session</td>
<td style="text-align: left;">Insecure Cookie Flags</td>
<td style="text-align: left;">Cookies missing <code>HttpOnly</code> or <code>SameSite</code></td>
<td style="text-align: left;">Cookie auth middleware</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">Set secure flags</td>
</tr>
<tr>
<td style="text-align: left;">SEC-019</td>
<td style="text-align: left;">Anti-bot</td>
<td style="text-align: left;">No CAPTCHA</td>
<td style="text-align: left;">Login form accepts brute force</td>
<td style="text-align: left;">AccountController</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Medium</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Add CAPTCHA</td>
</tr>
<tr>
<td style="text-align: left;">SEC-020</td>
<td style="text-align: left;">Crypto</td>
<td style="text-align: left;">Weak Encryption</td>
<td style="text-align: left;">MD5 used for hashing</td>
<td style="text-align: left;"><code>HashHelper.cs</code></td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Very high</td>
<td style="text-align: left;">High</td>
<td style="text-align: left;">Replace with SHA-256 or PBKDF2</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="7-integrations">7. Integrations</h2>
Integrations with other systems or services, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Integration type</strong> (e.g., API, Webhook, Message Queue, etc.)</li>
<li><strong>Integration name</strong> (e.g., Name of the integration, e.g., Payment Gateway, CRM System, etc.)</li>
<li><strong>Integration description</strong> (e.g., Brief description of the integration, e.g., Payment Gateway is used for processing payments, CRM System is used for managing customer relationships, etc.)</li>
<li><strong>Integration endpoint</strong> (e.g., URL or endpoint of the integration, e.g., https://api.paymentgateway.com/v1/payments, https://crm.example.com/api/customers, etc.)</li>
<li><strong>Integration authentication</strong> (e.g., How authentication is implemented for the integration, e.g., API Key, OAuth2, etc.)</li>
<li><strong>Integration data format</strong> (e.g., Data format used for the integration, e.g., JSON, XML, etc.)</li>
<li><strong>Integration protocols</strong> (e.g., Protocols used for the integration, e.g., HTTP/HTTPS, gRPC, etc.)</li>
</ul>
</div>
<div class="product-section">
<h2 id="8-testing">8. Testing</h2>
Testing strategies and practices used in the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Testing type</strong> (e.g., Unit Testing, Integration Testing, Functional Testing, Performance Testing, etc.)</li>
<li><strong>Testing framework</strong> (e.g., xUnit, NUnit, MSTest, etc.)</li>
<li><strong>Testing tools</strong> (e.g., Moq, AutoFixture, etc.)</li>
<li><strong>Test coverage (%)</strong> (e.g., Percentage of code covered by tests, e.g., 80%, 90%, etc.)</li>
<li><strong>Test strategy</strong> (e.g., How tests are organized, e.g., Test-driven development (TDD), Behavior-driven development (BDD), etc.)</li>
<li><strong>Continuous Integration (CI)</strong> (e.g., How CI is implemented, e.g., Azure DevOps, GitHub Actions, Jenkins, etc.)</li>
<li><strong>Continuous Deployment (CD)</strong> (e.g., How CD is implemented, e.g., Azure DevOps, GitHub Actions, Jenkins, etc.)</li>
</ul>
</div>
<div class="product-section">
<h2 id="9-known-issues-and-limitations">9. Known issues and limitations</h2>
Top-50 known issues and limitations of the application, in terms of performance, supportability, compliance, legacy, compatibility, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Issue Id</strong> (e.g., Unique identifier for the issue or limitation, e.g., ISSUE-001, ISSUE-002, etc.)</li>
<li><strong>Issue / limitation</strong> (e.g., Description of the issue or limitation, e.g., Performance issues, Supportability issues, Compliance issues, Legacy code, Compatibility issues, etc.)</li>
<li><strong>Category</strong> (e.g., Category of the issue or limitation, e.g., Performance, Supportability, Compliance, Legacy, Compatibility, etc.)</li>
<li><strong>Type</strong> (e.g., Type of the issue or limitation, e.g., Bug, Limitation, Enhancement, etc.)</li>
<li><strong>Impact</strong> (e.g., Impact of the issue or limitation, e.g., High, Medium, Low)</li>
<li><strong>Severity</strong> (e.g., Severity of the issue or limitation, e.g., Critical, High, Medium, Low)</li>
<li><strong>Priority</strong> (e.g., Priority of the issue or limitation, e.g., Critical, High, Medium, Low)</li>
<li><strong>Affected components</strong> (e.g., Components affected by the issue or limitation, e.g., Web application, API, Database, etc.)</li>
<li><strong>Workaround / strategy</strong> (e.g., Workaround for the issue or limitation, e.g., Upgrade to a newer version, Refactor the code, etc.)</li>
<li><strong>Notes</strong> (e.g., Additional notes or comments about the issue or limitation)</li>
<li><strong>References</strong> (e.g., References to the issue or limitation, e.g., GitHub issues, Jira tickets, etc.)</li>
<li><strong>Links</strong> (e.g., Links to related documentation or resources)</li>
</ul>
<p>#Instructions (mandatory):
<ul>
<li>Provide always 50 known issues and limitations, not more, not less, by impact, from the most critical to the least critical.</li>
</ul></p>
</div>
<div class="product-section">
<h2 id="10-defects-and-inefficiencies">10. Defects and inefficiencies</h2>
Top-50 defects and inefficiencies of the application, in detail,  in terms of coding best-practices, security, performance, supportability, compliance, legacy, compatibility, etc, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Defect Id</strong> (e.g., Unique identifier for the defect or inefficiency, e.g., DEF-001, DEF-002, etc.)  </li>
<li><strong>Defect / inefficiency</strong> (e.g., Description of the defect or inefficiency, e.g., Code smells, Performance bottlenecks, Security vulnerabilities, etc.)</li>
<li><strong>Category</strong> (e.g., Category of the defect or inefficiency, e.g., Code quality, Performance, Security, etc.)</li>
<li><strong>Type</strong> (e.g., Type of the defect or inefficiency, e.g., Bug, Limitation, Enhancement, etc.)</li>
<li><strong>Impact</strong> (e.g., Impact of the defect or inefficiency, e.g., High, Medium, Low)</li>
<li><strong>Severity</strong> (e.g., Severity of the defect or inefficiency, e.g., Critical, High, Medium, Low)</li>
<li><strong>Priority</strong> (e.g., Priority of the defect or inefficiency, e.g., Critical, High, Medium, Low)</li>
<li><strong>Root cause</strong> (e.g., Root cause of the defect or inefficiency, e.g., Poor coding practices, Lack of testing, Misconfiguration, etc.)  </li>
<li><strong>Affected components</strong> (e.g., Components affected by the defect or inefficiency, e.g., Web application, API, Database, etc.)</li>
<li><strong>Recommended fix</strong> (e.g., Recommended fix for the defect or inefficiency, e.g., Refactor the code, Optimize the performance, Apply security patches, etc.)</li>
<li><strong>Notes</strong> (e.g., Additional notes or comments about the defect or inefficiency, e.g., Known workarounds, Limitations, etc.)</li>
<li><strong>References</strong> (e.g., References to the defect or inefficiency, e.g., GitHub issues, Jira tickets, etc.)  </li>
<li><strong>Links</strong> (e.g., Links to related documentation or resources)</li>
</ul>
<p>#Instructions (mandatory):
<ul>
<li>Provide always 50 defects and inefficiencies, not more, not less, by impact, from the most critical to the least critical.</li>
</ul></p>
</div>
<div class="product-section">
<h2 id="11-vulnerabilities">11. Vulnerabilities</h2>
Top-50 vulnerabilities of the application, in detail, in terms of coding best-practices, security, performance, supportability, compliance, legacy, compatibility, etc, by impact, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Vulnerability Id</strong> (e.g., Unique identifier for the vulnerability, e.g., VULN-001, VULN-002, etc.)</li>
<li><strong>Vulnerability</strong> (e.g., Description of the vulnerability, e.g., SQL Injection, Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), etc.)</li>
<li><strong>Category</strong> (e.g., Category of the vulnerability, e.g., Authentication, Authorization, Input Validation, etc.)</li>
<li><strong>Type</strong> (e.g., Type of the vulnerability, e.g., Bug, Limitation, Enhancement, etc.)</li>
<li><strong>Impact</strong> (e.g., Impact of the vulnerability, e.g., High, Medium, Low)</li>
<li><strong>Severity</strong> (e.g., Severity of the vulnerability, e.g., Critical, High, Medium, Low)</li>
<li><strong>Priority</strong> (e.g., Priority of the vulnerability, e.g., Critical, High, Medium, Low)</li>
<li><strong>Root cause</strong> (e.g., Root cause of the vulnerability, e.g., Poor coding practices, Lack of input validation, Misconfiguration, etc.)</li>
<li><strong>Affected components</strong> (e.g., Components affected by the vulnerability, e.g., Web    application, API, Database, etc.)</li>
<li><strong>Recommended fix</strong> (e.g., Recommended fix for the vulnerability, e.g., Upgrade to a newer version, Refactor the code, etc.)</li>
<li><strong>Notes</strong> (e.g., Additional notes or comments about the vulnerability, e.g., Known workarounds, Limitations, etc.)</li>
<li><strong>References</strong> (e.g., References to the vulnerability, e.g., CVE ID, OWASP Top 10, etc.)</li>
<li><strong>Links</strong> (e.g., Links to related documentation or resources, e.g., GitHub issues, Jira tickets, etc.)</li>
</ul>
<p>#Instructions (mandatory):
<ul>
<li>Provide always 50 vulnerabilities, not more, not less, by impact, from the most critical to the least critical.</li>
</ul></p>
</div>
<div class="product-section">
<h2 id="12-supportability-and-maintainability">12. Supportability and maintainability</h2>
Supportability and maintainability aspects of the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Component</strong> (e.g., .NET version, Framework version, Database server version, Third-party libraries)</li>
<li><strong>Current version</strong> (e.g., Latest version of the component, e.g., .NET 6.0, ASP.NET Core 3.1, SQL Server 2019, etc.)</li>
<li><strong>End of support date</strong> (e.g., End of support date for the component, e.g., .NET 6.0 EOL is November 2024, ASP.NET Core 3.1 EOL is December 2022, SQL Server 2019 EOL is July 2025, etc.). The format of the date must be e.g. 2010-07-20. For the .NET Framework consider the end support date, for Operating Systems and Database Servers consider the extended support date.</li>
<li><strong>Supportability</strong> (e.g., How the component is supported, e.g., Regular updates, Security patches, etc.)</li>
<li><strong>Latest stable version</strong> (e.g., Latest stable version of the component, e.g., .NET 6.0, ASP.NET Core 3.1, SQL Server 2019, etc.)</li>
<li><strong>Notes</strong> (e.g., Additional notes or comments about the component, e.g., Known issues, Limitations, etc.)</li>
<li><strong>Links</strong> (e.g., to Microsoft Product Lifecycle associated with the components)</li>
</ul>
<p>##Instructions for this section:
Provide information on how the application is supported in terms of:
<ul>
<li>.NET version support (referring to the .NET version lifecycle)</li>
<li>All .NET Framework or .NET versions must be included in the table, not just the main one or a subset. The same applies to all other components.</li>
<li>If the component is .net framework, provide information on the .net framework version support related and not .net core or .net 5+ versions.</li>
<li>Framework support (referring to the framework version lifecycle)</li>
<li>Database server support (referring to the database server version lifecycle)</li>
<li>Third-party libraries support (referring to the third-party libraries version lifecycle)</li>
</ul></p>
<p>The table should also include the latest version of each component and the end of support date, if applicable.</p>
<h3 id="121-net-framework-lifecycle">12.1. .NET Framework lifecycle</h3>
The .NET Framework (not .NET or .NET Core) support / lifecycle for the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Version</strong> (e.g., .NET Framework version (not .NET or .NET Core), e.g., .NET Framework 4.8.1, .NET Framework 4.8, .NET Framework 4.7.2, etc.)</li>
<li><strong>Start date</strong> (e.g., Start date of the support for the .NET Framework version (not .NET or .NET Core), e.g., 2010-07-20, 2019-04-18, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.))</li>
<li><strong>End date</strong> (e.g., End of support date for the .NET Framework version (not .NET or .NET Core), e.g., 2024-01-09, 2029-01-09, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.)</li>
<li><strong>Supported</strong> (e.g., Is the .NET Framework version still supported? Yes/No, with symbols)</li>
<li><strong>Used in the application</strong> (e.g., Is this version used in the application?)</li>
</ul>
<p>If the end date is 'Follows OS Lifecycle', that is not acceptable, you have to use the real and accurate dates, e.g., 2024-01-09, 2029-01-09, etc. Search for the official Microsoft documentation to get the accurate dates.</p>
<p>##Instructions:
<ul>
<li>Provide a complete and up-to-date list of <em>all</em> versions of the .NET Framework, since .NET Framework 1.0 - (not .NET or .NET Core), including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.</li>
<li>'Follows OS Lifecycle' on start and end dates, is not acceptable. The real and accurate dates must be used.</li>
<li>To check the .NET Framework version used in the application, you can check the target framework in the .csproj files or the web.config files.</li>
</ul></p>
<h3 id="122-net-lifecycle">12.2. .NET lifecycle</h3>
<p>This section outlines the support lifecycle for the modern, cross-platform .NET (formerly .NET Core), detailing the release types and support windows for each version relevant to the application.</p>
<p>Include a brief description of the section. In this section, do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Version</strong> (e.g., The .NET version, such as .NET 8, .NET 7, .NET 6, .NET Core 3.1, etc.)</li>
<li><strong>Start date</strong> (e.g., Start date of the support for the .NET version (only .NET or .NET Core), e.g., 2010-07-20, 2019-04-18, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.))</li>
<li><strong>End date</strong> (e.g., End of support date for the .NET version (only .NET or .NET Core), e.g., 2024-01-09, 2029-01-09, etc. 'Follows OS Lifecycle' is not acceptable, use the real and accurate dates e.g., 2024-01-09, 2029-01-09, etc.)</li>
<li><strong>Supported</strong> (e.g., Is the .NET version (only .NET or .NET Core) still supported? Yes/No, with symbols)</li>
<li><strong>Used in the application</strong> (e.g., Is this version used in the application?)</li>
</ul>
<p>Instructions:
<ul>
<li>Provide a complete and up-to-date list of all major versions of the modern .NET (only .NET or .NET Core), starting from .NET Core 1.0 up to the current latest version (including previews like .NET 9).</li>
<li>The data must be accurate and based on the official Microsoft .NET and .NET Core Support Policy. You must use real and accurate dates for release and end-of-support.</li>
<li>Clearly distinguish between LTS (Long-Term Support) and STS (Standard-Term Support) releases in the "Release Type" column.</li>
<li>Indicate which versions are still supported and which have reached end-of-life (EOL).</li>
<li>Use official Microsoft documentation (like the ".NET and .NET Core support policy" page on learn.microsoft.com) to validate the timelines. Include a reference URL.</li>
<li>To check the .NET version used in the application, you can check the target framework in the .csproj files or the web.config files.</li>
</ul></p>
<h3 id="123-windows-server-operating-systems-lifecycle">12.3. Windows Server Operating Systems lifecycle</h3>
The Windows Server Operating Systems lifecycle for the application, from Windows Server 2000, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Version</strong> (e.g., Windows OS version, e.g., Windows Server 2012 R2, Windows Server 2016, Windows Server 2019, etc.)</li>
<li><strong>Start date</strong> (e.g., Start date of the support for the Windows OS version, e.g., 2013-10-18, 2016-10-12, 2019-10-02, etc.)</li>
<li><strong>End date (mainstream)</strong> (e.g., End of mainstream support date for the Windows OS version, e.g., 2018-10-09, 2020-01-11, 2024-01-09, etc.)</li>
<li><strong>End date (extended)</strong> (e.g., End of extended support date for the Windows OS version, e.g., 2023-10-10, 2025-01-12, 2029-01-09, etc.)</li>
<li><strong>Supported</strong> (e.g., Is the Windows OS version still supported? Yes/No, with symbols)</li>
<li><strong>Used in the application</strong> (e.g., Is this version used in the application?)</li>
</ul>
<p>##Instructions:
<ul>
<li>Provide a complete and up-to-date list of all versions of Windows Server Operating Systems, including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. If any versions follow the Windows OS lifecycle instead of a fixed date, explain how that affects their support timeline. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.</li>
<li>All versions of Windows Server Operating Systems must be included, from Windows Server 2000 to the latest version, including their release dates and end-of-support dates. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.</li>
</ul></p>
<h3 id="124-microsoft-sql-server-lifecycle">12.4. Microsoft SQL Server lifecycle</h3>
The Microsoft SQL Server lifecycle for the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>Version</strong> (e.g., Microsoft SQL Server version, e.g., SQL Server 2012, SQL Server 2014, SQL Server 2016, SQL Server 2017, SQL Server 2019, etc.)</li>
<li><strong>Start date</strong> (e.g., Start date of the support for the SQL Server version, e.g., 2012-04-01, 2014-06-01, 2016-06-01, 2017-10-02, 2019-11-04, etc.)</li>
<li><strong>End date (mainstream)</strong> (e.g., End of mainstream support date for the SQL Server version, e.g., 2017-07-11, 2019-07-09, 2021-01-12, etc.)</li>
<li><strong>End date (extended)</strong> (e.g., End of extended support date for the SQL Server version, e.g., 2022-07-12, 2024-07-09, 2025-01-14, etc.)</li>
<li><strong>Supported</strong> (e.g., Is the SQL Server version still supported? Yes/No, with symbols)</li>
<li><strong>Used in the application</strong> (e.g., Is this version used in the application?)</li>
</ul>
<p>##Instructions:
 - Provide a complete and up-to-date list of all versions of Microsoft SQL Server, including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. If any versions follow the Windows OS lifecycle instead of a fixed date, explain how that affects their support timeline. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.
 - All versions of Microsoft SQL Server must be included, from SQL Server 2000 to the latest version, including their release dates and end-of-support dates. The data must be accurate and based on official Microsoft sources. Include references or URLs where applicable. Use official Microsoft documentation (like learn.microsoft.com or Microsoft Lifecycle Policy) to validate the support timelines.
 - To determine if the application is using a specific version of SQL Server, you can check the connection strings in the .config files or the database server version used in the application.</p>
</div>
<div class="product-section">
<h2 id="13-modernization-strategy">13. Modernization strategy</h2>
The modernization strategy for the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<p>##Instructions for this section:
 - Given the detailed analysis of this .NET application, provide three complete modernization strategies in a table format, and the step-by-step plan, also in a table format, to implement them.
 - Strategy 1: <strong>Lift and Shift (without rehosting)</strong>, maintaining the application current deployment model (e.g. on-premises) and evolving the application to the latest .NET Framework or .NET version (if the application uses .NET Framework the target should be .NET Framework), e.g., .NET 6, .NET 7, .NET Framework 4.8.1 and the database to the latest version of the database server, e.g., Microsoft SQL Server 2019, PostgreSQL 15, etc, without changing the architecture or the codebase, just updating the dependencies and the runtime.
 - Strategy 2: <strong>Lift and Shift (with rehosting)</strong>, rehosting the application to a cloud provider (e.g., Azure, AWS, GCP) and evolving the application to the latest .NET Framework or .NET version (if the application uses .NET Framework the target should be .NET Framework), e.g., .NET 6, .NET 7, .NET Framework 4.8.1 and the database to the latest version of the database server, e.g., Microsoft SQL Server 2019, PostgreSQL 15, etc, without changing the architecture or the codebase, just updating the dependencies and the runtime.
 - Strategy 3: <strong>Refactor</strong> (also known as "Repackage"), refactoring the application to use modern design patterns, architectures and technologies, e.g., microservices, serverless, cloud-native, etc, evolving the application to the latest .NET version, e.g., .NET 6, .NET 7 and the database to the latest version of the database server, e.g., Microsoft SQL Server 2019, PostgreSQL 15, etc.
 - Provide a table with comparison between the three strategies, including the pros and cons of each one with the following columns:
  - <strong>Factor</strong> (e.g., Complexity, Cost (Development), Cost (Functional testing), Cost (Infrastructure), Time to implement (Development), Time to test (Functional testing), Time to implement (Infrastructure), Risk, Long-term fit, time-to-market, etc.)
  - <strong>Lift and Shift</strong> (without rehosting)
  - <strong>Lift and Shift</strong> (with rehosting)
  - <strong>Complete Refactor</strong> (Refactor)</p>
<ul>
<li>The complexity and the time estimate to implement each strategy depends on the following factors which are only related with the development effort and not with the infrastructure or deployment effort:</li>
</ul>
 - Complexity low - the application is small, with few dependencies and a simple architecture = 1-2 weeks
 - Complexity medium - the application is medium-sized, with some dependencies and a moderate architecture = 3-5 weeks
 - Complexity high - the application is large, with many dependencies and a complex architecture = 6-8 weeks
 - Complexity very high - the application is very large, with many dependencies and a very complex architecture = 9-12 weeks
<p>##Instruction: You must separate the development effort from the infrastructure or deployment effort, so the complexity and time estimate must be only related with the development effort.</p>
<h3 id="131-modernization-strategy-comparison">13.1. Modernization strategy comparison</h3>
The comparison of the three modernization strategies, including the pros and cons of each one, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<p>Provide this information in the table with the following columns:
  - <strong>Strategy</strong> (e.g., Lift and Shift, Complete Refactor)
  - <strong>Description</strong> (e.g., Brief description of the strategy, e.g., Rehost the application to the latest .NET version, Refactor the application to use modern design patterns and architectures, etc.)
  - <strong>Complexity</strong> (e.g., Low, Medium, High, Very High)
  - <strong>Development time estimate</strong> (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - <strong>Functional testing time estimate</strong> (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - <strong>Infrastructure time estimate</strong> (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - <strong>Deployment time estimate</strong> (e.g., 1-2 weeks, 3-5 weeks, 6-8 weeks, 9-12 weeks)
  - <strong>Total time estimate</strong> (e.g., sum of the development, functional testing, infrastructure and deployment time estimates, e.g., 4-6 weeks, 8-10 weeks, etc.)
  - <strong>Cost estimate</strong> (e.g., Low, Medium, High, Very High)
  - <strong>Risk</strong> (e.g., Low, Medium, High)
  - <strong>Long-term fit</strong> (e.g., Low, Medium, High)
  - <strong>Time-to-market</strong> (e.g., Low, Medium, High)
  - <strong>Pros</strong> (e.g., List of pros for the strategy, e.g., Low cost, Low risk, etc. Use symbols to indicate the pros)
  - <strong>Cons</strong> (e.g., List of cons for the strategy, e.g., Limited scalability, Limited maintainability, etc. Use symbols to indicate the cons)</p>
<h3 id="132-recommendation">13.2. Recommendation</h3>
The recommendation for the modernization strategy, based on the analysis of the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h4 id="1321-step-by-step-plan">13.2.1. Step-by-step plan</h4>
The step-by-step plan to implement the recommended modernization strategy, using table format, in detail and taking into account Microsoft technologies and best practices.
<p>Include a brief description of the section.</p>
<p>##Instructions for this section:
<ul>
<li>Provide a detailed step-by-step plan to implement the recommended modernization strategy, in high-level and low-level steps, using table format.</li>
</ul></p>
<h4 id="1322-gantt-chart">13.2.2. Gantt chart</h4>
A Gantt chart to visualize the step-by-step plan, showing the timeline and dependencies of each step.
<p>Include a Mermaid 'gantt' diagram to visualize the step-by-step plan for the recommended modernization strategy.</p>
<p>#Critical instructions for the diagram (always apply):
<ul>
<li>The Mermaid diagram MUST be placed in the section where it is referenced, not at the end of the document.</li>
<li><strong>Syntax Rule:</strong> When defining a node's text label, if the text contains any HTML tags (like <code><br></code>, <code><b></code>, <code><i></code>), you MUST enclose the entire text label in double quotes (<code>"</code>). Example: <code>id["Text with <b>HTML</b>"]</code> is correct; <code>id[Text with <b>HTML</b>]</code> is incorrect and will fail.</li>
<li>Always place a legend (caption) immediately below the diagram. The legend should be in a smaller font size than the main body text, clearly associated with the diagram, and centered. Format appropriately. Ensure the styling visually distinguishes the legend as secondary explanatory text. Never use Fig x., use Figure x.</li>
<li>ALWAYS VALIDATE / ENSURE THE DIAGRAM SYNTAX BEFORE RUNNING THE SCRIPT, TO ENSURE IT IS CORRECT AND WILL RENDER PROPERLY IN THE FINAL MARKDOWN OUTPUT.</li>
</ul></p>
<p>#Critical instructions for the caption (always apply):
<ul>
<li>Immediately following the <code> </code>`<code>mermaid </code> code block, you MUST place a text <strong>caption</strong>.</li>
<li>The caption must start with "Figure X." (e.g., "Figure 1:"), followed by a brief description of the diagram.</li>
<li>The caption should be in a smaller font or otherwise styled to be secondary to the main text.</li>
</ul></p>
</div>
<div class="product-section">
<h2 id="14-application-porfolio-management">14. Application porfolio management</h2>
The application portfolio management mapping of the application, IT component types, IT component attributes and portfolio strategy, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<h3 id="141-it-component-types-and-attributes">14.1. IT Component types and attributes</h3>
The IT component types and attributes for the application, using table format.
Include a brief description of the section. In this section do not include more information than what is defined in this template.
<ul>
<li><strong>IT Component Type</strong> (e.g., Application Server, Database, Operating System, Programming Language, Middleware, Cloud Service, Development Tool, ERP System, CRM Platform, Web Framework, Integration Platform, Security Tool, Infrastructure, Container Platform, Monitoring Tool, Business Intelligence Tool, Collaboration Tool, Network Component, Storage System)</li>
<li><strong>Name</strong> (e.g., Name of the component, e.g., Microsoft SQL Server, Apache Kafka, etc.)</li>
<li><strong>Type</strong> (e.g., Type of the component, e.g., Database, Middleware, Cloud Service, etc.)</li>
<li><strong>Version(s)</strong> (e.g., Version of the component, e.g., 2019, 5.7, v2.3.1, etc.)</li>
<li><strong>Provider(s)</strong> (e.g., Provider of the component, e.g., Microsoft, Oracle, AWS, etc.)</li>
<li><strong>Support start date</strong> (e.g., Release date of the component, e.g., 2020-01-15)</li>
<li><strong>Support end date</strong> (e.g., Retirement date of the component, e.g., 2025-12-31)</li>
<li><strong>Support end date (extended)</strong> (e.g., Extended support date of the component, e.g., 2027-12-31)</li>
<li><strong>Support status</strong> (e.g., Supported, Unsupported, Extended Support)</li>
</ul>
<p>To complete the table below, provide a complete and up-to-date list of all versions of the .NET Framework, .NET, Windows Operating Systems, Microsoft SQL Server and other applicable, including their release dates and end-of-support dates. Please indicate which versions are still supported and which ones have reached end of support. If any versions follow the Windows OS lifecycle instead of a fixed date, explain how that affects their support timeline. The data must be accurate and based on official Microsoft or other manufacturer sources. Include source references or URLs where applicable.</p>
<p>##Instructions for this section:
<ul>
<li>Provide the SAP LeanIX mapping of components, attributes, and relationships, for this application, the applicable, namely:</li>
<li>IT Component Types:</li>
<li>Application Server(s) (e.g., Microsoft IIS, Apache Tomcat, JBoss, etc.)</li>
<li>Database(s) (e.g., Microsoft SQL Server, Oracle DB, PostgreSQL, etc.)</li>
<li>Operating System(s) (e.g., Windows Server, Red Hat Enterprise Linux, Ubuntu, etc.)</li>
<li>Programming Language(s) (e.g., Java, C#, Python, etc.)</li>
<li>Middleware (e.g., IBM WebSphere MQ, Oracle Fusion Middleware, TIBCO, etc.)</li>
<li>Cloud Service(s) (e.g., AWS S3, Azure Blob Storage, Google Cloud Functions, etc.)</li>
<li>Development Tool(s) (e.g., Visual Studio, GitHub, Jenkins, etc.)</li>
<li>ERP System(s) (e.g., SAP ECC, Oracle E-Business Suite, Microsoft Dynamics 365, etc.)</li>
<li>CRM Platform(s) (e.g., Salesforce, Microsoft Dynamics CRM, HubSpot, etc.)</li>
<li>Web Framework(s) (e.g., .NET, Angular, React, etc.)</li>
<li>Integration Platform(s) (e.g., MuleSoft, Dell Boomi, Azure Logic Apps, etc.)</li>
<li>Security Tool(s) (e.g., Okta, Fortinet, Symantec Endpoint Protection, etc.)</li>
<li>Infrastructure(s) (e.g., VMware ESXi, Cisco UCS, Nutanix, etc.)</li>
<li>Container Platform(s) (e.g., Docker, Kubernetes, OpenShift, etc.)</li>
<li>Monitoring Tool(s) (e.g., Datadog, Prometheus, New Relic, etc.)</li>
<li>Business Intelligence Tool(s) (e.g., Power BI, Tableau, Qlik, etc.)</li>
<li>Collaboration Tool(s) (e.g., Microsoft Teams, Slack, Confluence, etc.)</li>
<li>Network Component(s) (e.g., Cisco Router, F5 Load Balancer, Palo Alto Firewall, etc.)</li>
<li>Storage System(s) (e.g., NetApp, Dell EMC, HPE 3PAR, etc.)</li>
<li>IT Component Attributes:</li>
<li>Name (e.g., Microsoft SQL Server, Apache Kafka)</li>
<li>Type (e.g., Database, Middleware, Cloud Service)</li>
<li>Version(s) (e.g., 2019, 5.7, v2.3.1)</li>
<li>Provider(s) (e.g., Microsoft, Oracle, AWS)</li>
<li>Lifecycle Phase (e.g., Active, Phase-Out, End-of-Life)</li>
<li>Release Date (e.g., 2020-01-15)</li>
<li>Retirement Date (e.g., 2025-12-31)</li>
<li>Support Status (e.g., Supported, Unsupported, Extended Support)</li>
<li>Technical Fit (e.g., Strategic, Tolerated, Obsolete)</li>
<li>Functional Fit (e.g., Good, Adequate, Poor)</li>
<li>Linked Applications (e.g., HR System, CRM Platform)</li>
<li>Used By (e.g., Business Units, Teams, Projects)</li>
<li>Tags (e.g., Cloud, Strategic, Legacy)</li>
<li>Cost Center (e.g., IT Ops, R&D)</li>
<li>License Type (e.g., Open Source, Commercial, SaaS Subscription)</li>
<li>Risk Classification (e.g., High Risk, Low Risk)</li>
<li>Data Classification (e.g., Public, Internal, Confidential)</li>
<li>Compliance Relevance (e.g., GDPR, HIPAA, SOX)</li>
<li>Hosting Type (e.g., On-Premises, Cloud, Hybrid)</li>
</ul></p>
<ul>
<li>The goal is to provide a comprehensive mapping of the application components to the LeanIX model, including their attributes and relationships, to facilitate better understanding and management of the application landscape.</li>
</ul>
<h3 id="142-portfolio-strategy">14.2. Portfolio strategy</h3>
The portfolio strategy for the application, using table format.
<p>Include a brief description of the section. In this section do not include more information than what is defined in this template.</p>
<ul>
<li><strong>TIME Classification</strong> (Evaluate this application by plotting the business value against its overall quality, e.g., Time classification of the application, e.g., Strategic, Tolerated, Obsolete with full details and explanation)</li>
<li><strong>6R Classification</strong> (Classify this application according to the 6R methodology, e.g., 6R classification of the application, e.g., Retain, Retire, Replace, Rehost, Refactor, Rebuild with full details and explanation)</li>
</ul>
<p>Include this sentence at the end of the document:  (this sentence never changes but can be translated to the language of the output).</p>
<p>---</p>
<p>##Instructions:</p>
<ul>
<li>Merge repeated or redundant information.</li>
<li>Infer and fill in missing fields when logically possible.</li>
<li>Ensure output is valid Markdown per https://www.markdownguide.org/basic-syntax/.</li>
<li>Keep structure simple and usable in documentation.</li>
<li>The output <strong>must be in the language specified above</strong>.</li>
<li>Return <strong>only the Markdown-formatted output</strong> as the final result.</li>
</ul>
<p>---</p>
</div>
<div class="product-section">
<h2 id="source-input">Source Input</h2>
<p>Here are the partial summaries to analyze:</p>
<h1 id="application-technical-profile">Application Technical Profile</h1>
<p>This document provides a detailed technical analysis of the SDCIM (Service Desk Customer Incident Management) application, based on the provided source code. It covers the application's overview, functional decomposition, architecture, technology stack, dependencies, security posture, and a recommended modernization strategy.</p>
</div>
<div class="product-section">
<h2 id="1-application-overview">1. Application overview</h2>
This section provides a high-level summary of the application, including its purpose, scope, and key technical characteristics as inferred from the source code.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Attribute</th>
<th style="text-align: left;">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Acronym</strong></td>
<td style="text-align: left;">SDCIM</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Application name</strong></td>
<td style="text-align: left;">Service Desk Customer Incident Management</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Primary business purpose</strong></td>
<td style="text-align: left;">A comprehensive system for processing financial documents (remittances, cheques) from various sources, managing their lifecycle, handling errors, and providing a rich user interface for monitoring, administration, and reporting.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Business domain</strong></td>
<td style="text-align: left;">Financial Services, Banking, Document Processing, Incident Management</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Solution files</strong></td>
<td style="text-align: left;">2 solutions found: <code>CIControloComSetup.sln</code>, <code>CIControloSemSetup.sln</code></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Project files</strong></td>
<td style="text-align: left;">18 projects found: <code>Alerta.csproj</code>, <code>CIActividades.csproj</code>, <code>CIConfigGlobalParameters.csproj</code>, <code>CIConfiguration.csproj</code>, <code>CIControlo.csproj</code>, <code>CIFicheiro.csproj</code>, <code>CIFicheirosControlo.csproj</code>, <code>CIReports.csproj</code>, <code>CIServAlertas.csproj</code>, <code>CIServRemessas.csproj</code>, <code>CIServico.csproj</code>, <code>CIServTester.csproj</code>, <code>CITestes.csproj</code>, <code>MDIWebTransmCI.vbproj</code>, <code>MDIsControlo.csproj</code>, <code>QueryForm.csproj</code>, <code>SetupCIControlo.vdproj</code>, <code>CIDepositoErro.csproj</code></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Files</strong></td>
<td style="text-align: left;">280 files analyzed, including: C# source files (.cs), Visual Basic source files (.vb), C# project files (.csproj), Visual Basic project files (.vbproj), Solution files (.sln), Configuration files (.config, .settings), Resource files (.resx), SQL files (.sql), and others.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Main programming language(s)</strong></td>
<td style="text-align: left;">C#, VB.NET</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Target .NET Framework(s)</strong></td>
<td style="text-align: left;">.NET Framework 4.0</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Application type</strong></td>
<td style="text-align: left;">Composite Desktop Application (Windows Forms), Windows Service, Class Libraries</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Output type</strong></td>
<td style="text-align: left;">.exe (Executable), .dll (Dynamic Link Library)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Deployment model</strong></td>
<td style="text-align: left;">On-premises</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Deployment target platform</strong></td>
<td style="text-align: left;">AnyCPU</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Complexity</strong></td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Very high</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Last updated (Source code)</strong></td>
<td style="text-align: left;">2016-01-01 (inferred from copyright notices)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Last updated (Documentation)</strong></td>
<td style="text-align: left;">2025-08-07</td>
</tr>
</tbody>
</table>
</div>
<h3 id="11-main-components-and-features">1.1. Main components and features</h3>
The application is a multi-project solution composed of several distinct functional components that work together to provide a complete document processing and management system.
<div class="table-container">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Component</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Key features</th>
<th style="text-align: left;">Dependencies</th>
<th style="text-align: left;">Related projects</th>
<th style="text-align: left;">Technologies</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Main Control UI</strong></td>
<td style="text-align: left;">The primary user interface for controlling and monitoring the application.</td>
<td style="text-align: left;">Main menu, MDI container for other forms, status bar.</td>
<td style="text-align: left;"><code>CIActividades</code>, <code>CIConfiguration</code>, <code>CIFicheirosControlo</code>, <code>MDIsControlo</code></td>
<td style="text-align: left;"><code>CIControlo.csproj</code></td>
<td style="text-align: left;">C#, WinForms</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Activity Monitoring</strong></td>
<td style="text-align: left;">Provides detailed views of ongoing and past processing activities for remittances and documents.</td>
<td style="text-align: left;">Real-time tracking of remittances, tranches, and documents; state management; error handling views; filtering and search.</td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code>, <code>Alerta</code></td>
<td style="text-align: left;"><code>CIActividades.csproj</code></td>
<td style="text-align: left;">C#, WinForms, NBIISNET Controls</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Remittance Processing Service</strong></td>
<td style="text-align: left;">Core background service responsible for processing remittances and document tranches.</td>
<td style="text-align: left;">Fetches remittances pending processing, handles business logic for tranches, updates states in the database.</td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>CIServRemessas.csproj</code></td>
<td style="text-align: left;">C#</td>
</tr>
<tr>
<td style="text-align: left;"><strong>System Service Host</strong></td>
<td style="text-align: left;">A Windows Service that hosts and orchestrates the background processing threads.</td>
<td style="text-align: left;">Manages threads for file import, remittance processing, and alerts. Handles service start, stop, and shutdown logic.</td>
<td style="text-align: left;"><code>CIServRemessas</code>, <code>CIServAlertas</code>, <code>CIFicheiro</code></td>
<td style="text-align: left;"><code>CIServico.csproj</code></td>
<td style="text-align: left;">C#, System.ServiceProcess</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Alerting & Notifications</strong></td>
<td style="text-align: left;">A dedicated module for generating and sending system alerts based on predefined situations.</td>
<td style="text-align: left;">Sends alerts via Email (EWS/WebDAV), SMS, or logs to DB, file, or Event Viewer.</td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>Alerta.csproj</code>, <code>CIServAlertas.csproj</code></td>
<td style="text-align: left;">C#, SMTP, EWS</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Configuration Management</strong></td>
<td style="text-align: left;">UI and logic for managing system parameters, users, and operational settings.</td>
<td style="text-align: left;">User management, balcão (branch) configuration, alert configuration.</td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code>, <code>Alerta</code></td>
<td style="text-align: left;"><code>CIConfiguration.csproj</code></td>
<td style="text-align: left;">C#, WinForms</td>
</tr>
<tr>
<td style="text-align: left;"><strong>File Processing</strong></td>
<td style="text-align: left;">Handles the ingestion and parsing of external data files like <code>ENVM</code> and <code>ACOM</code>.</td>
<td style="text-align: left;">File watching, parsing fixed-width text files, data validation, and insertion into the database.</td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>CIFicheiro.csproj</code>, <code>CIFicheirosControlo.csproj</code></td>
<td style="text-align: left;">C#</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Reporting</strong></td>
<td style="text-align: left;">Generates reports based on application data using Crystal Reports.</td>
<td style="text-align: left;">Monthly invoicing reports, remittance listings, ACOM lot summaries.</td>
<td style="text-align: left;"><code>CrystalDecisions</code>, <code>NBiis.GenericReport</code></td>
<td style="text-align: left;"><code>CIReports.csproj</code></td>
<td style="text-align: left;">Crystal Reports</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Unit Testing</strong></td>
<td style="text-align: left;">A project containing unit tests for the application logic.</td>
<td style="text-align: left;">Tests remittance processing logic.</td>
<td style="text-align: left;"><code>CIServRemessas</code>, <code>CIServico</code></td>
<td style="text-align: left;"><code>CITestes.csproj</code></td>
<td style="text-align: left;">MSTest</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    subgraph User_Interfaces
        CIControlo["CIControlo (Main UI)"]
        CIActividades["CIActividades (Activity UI)"]
        CIConfiguration["CIConfiguration (Admin UI)"]
        CIReports["CIReports (Reporting UI)"]
    end

    subgraph Backend_Services
        CIServico["CIServico (Windows Service)"]
        CIServRemessas["CIServRemessas (Remittance Logic)"]
        CIFicheiro["CIFicheiro (File Processing)"]
        CIServAlertas["CIServAlertas (Alerting Service)"]
    end

    subgraph Core_Libraries
        CIConfigGlobalParameters["CIConfigGlobalParameters (Shared Config)"]
        Alerta["Alerta (Alerting Logic)"]
        NBIISNET["NBIISNET (Custom Controls)"]
        GenericNet["GenericNet (Utilities)"]
    end

    subgraph External_Systems
        Database["(SQL Server Database)"]
        FileSystem["(File System - ENVM/ACOM)"]
        EmailGateway["(Email/SMS Gateway)"]
        WebService["(MDI Web Service)"]
    end

    CIControlo --> CIActividades
    CIControlo --> CIConfiguration
    CIControlo --> CIReports
    
    User_Interfaces --> Backend_Services
    
    CIServico --> CIServRemessas
    CIServico --> CIFicheiro
    CIServico --> CIServAlertas

    Backend_Services --> Core_Libraries
    Backend_Services --> Database
    
    CIFicheiro --> FileSystem
    CIServAlertas --> EmailGateway
    CIControlo --> MDIWebTransmCI
    MDIWebTransmCI[MDIWebTransmCI] --> WebService
</code></pre>
<center><small>Figure 1 - High-level component diagram showing the main functional blocks and their interactions.</small></center>
<h3 id="12-solutions">1.2. Solutions</h3>
The codebase is organized into two main solution files, likely for different deployment or development scenarios (with and without a setup project).
<div class="table-container">
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Solution</th>
<th style="text-align: left;">Projects</th>
<th style="text-align: left;">Visual studio version</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>CIControloComSetup.sln</strong></td>
<td style="text-align: left;"><ul><li>Alerta.csproj</li><li>CIActividades.csproj</li><li>CIConfigGlobalParameters.csproj</li><li>CIConfiguration.csproj</li><li>CIControlo.csproj</li><li>CIFicheiro.csproj</li><li>CIFicheirosControlo.csproj</li><li>CIReports.csproj</li><li>CIServAlertas.csproj</li><li>CIServRemessas.csproj</li><li>CIServico.csproj</li><li>CIServTester.csproj</li><li>MDIWebTransmCI.vbproj</li><li>MDIsControlo.csproj</li><li>QueryForm.csproj</li><li>SetupCIControlo.vdproj</li></ul></td>
<td style="text-align: left;">2010</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIControloSemSetup.sln</strong></td>
<td style="text-align: left;"><ul><li>Alerta.csproj</li><li>CIActividades.csproj</li><li>CIConfigGlobalParameters.csproj</li><li>CIConfiguration.csproj</li><li>CIControlo.csproj</li><li>CIFicheiro.csproj</li><li>CIFicheirosControlo.csproj</li><li>CIReports.csproj</li><li>CIServAlertas.csproj</li><li>CIServRemessas.csproj</li><li>CIServico.csproj</li><li>CIServTester.csproj</li><li>CITestes.csproj</li><li>CIDepositoErro.csproj</li><li>MDIWebTransmCI.vbproj</li><li>MDIsControlo.csproj</li><li>QueryForm.csproj</li></ul></td>
<td style="text-align: left;">2010</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>mindmap
  root((Solutions))
    CIControloComSetup.sln
      CIControlo.csproj (UI Host)
      CIActividades.csproj
      CIConfiguration.csproj
      CIFicheirosControlo.csproj
      CIServico.csproj (Service)
      CIServRemessas.csproj
      CIReports.csproj
      Alerta.csproj
      MDIsControlo.csproj
      MDIWebTransmCI.vbproj
      QueryForm.csproj
      SetupCIControlo.vdproj (Deployment)
    CIControloSemSetup.sln
      CIControlo.csproj (UI Host)
      CIActividades.csproj
      CIConfiguration.csproj
      CIFicheirosControlo.csproj
      CIServico.csproj (Service)
      CIServRemessas.csproj
      CIReports.csproj
      Alerta.csproj
      MDIsControlo.csproj
      MDIWebTransmCI.vbproj
      QueryForm.csproj
      CITestes.csproj (Unit Tests)
      CIDepositoErro.csproj
</code></pre>
<center><small>Figure 2 - Mind map illustrating the project structure within the two solution files.</small></center>
<h3 id="13-projects">1.3. Projects</h3>
This section details each project within the solutions, outlining their purpose, dependencies, and key characteristics.
<div class="table-container">
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Solution</th>
<th style="text-align: left;">Project</th>
<th style="text-align: left;">Main objectives</th>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Output type</th>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Runtime</th>
<th style="text-align: left;">Framework</th>
<th style="text-align: left;">Architecture</th>
<th style="text-align: left;">Compilation mode</th>
<th style="text-align: left;">Principal classes</th>
<th style="text-align: left;">Internal dependencies</th>
<th style="text-align: left;">External dependencies</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIControlo.csproj</strong></td>
<td style="text-align: left;">Main GUI application host (MDI container) and entry point for user interaction.</td>
<td style="text-align: left;">Windows Application</td>
<td style="text-align: left;">Executable</td>
<td style="text-align: left;">1.3.0.5</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>CIMainForm</code></td>
<td style="text-align: left;"><code>CIActividades</code>, <code>CIConfiguration</code>, <code>CIFicheirosControlo</code>, <code>CIReports</code>, <code>CIServTester</code>, <code>MDIsControlo</code>, <code>QueryForm</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIActividades.csproj</strong></td>
<td style="text-align: left;">Provides WinForms UIs for monitoring activities related to remittances, tranches, and documents.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>ActividadesForm</code>, <code>ActividadeBalcaoForm</code></td>
<td style="text-align: left;"><code>Alerta</code>, <code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>NBIISNET</code>, <code>CrystalDecisions</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIServico.csproj</strong></td>
<td style="text-align: left;">A Windows Service that hosts background processing tasks for the application.</td>
<td style="text-align: left;">Windows Service</td>
<td style="text-align: left;">Executable</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>CIServico</code>, <code>CIServicoThread</code></td>
<td style="text-align: left;"><code>Alerta</code>, <code>CIConfigGlobalParameters</code>, <code>CIFicheiro</code>, <code>CIServAlertas</code>, <code>CIServRemessas</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIServRemessas.csproj</strong></td>
<td style="text-align: left;">Contains the core business logic for processing remittances and their associated tranches.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>ServRemessa</code></td>
<td style="text-align: left;"><code>Alerta</code>, <code>CIActividades</code>, <code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>Alerta.csproj</strong></td>
<td style="text-align: left;">Defines the core entities and logic for the system's alerting and notification mechanism.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>Accao</code>, <code>AlertaSituacaoAccao</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>GenericNet</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIConfigGlobalParameters.csproj</strong></td>
<td style="text-align: left;">A central library for managing and accessing global configuration parameters and user information.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>CIGlobalParameters</code>, <code>User</code></td>
<td style="text-align: left;"><code>N/A</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIConfiguration.csproj</strong></td>
<td style="text-align: left;">Provides WinForms UIs for application configuration, including user and branch management.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>CIConfigForm</code>, <code>BalcaoForm</code>, <code>UtilizadoresForm</code></td>
<td style="text-align: left;"><code>Alerta</code>, <code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIFicheiro.csproj</strong></td>
<td style="text-align: left;">Handles the logic for processing and parsing incoming data files (ACOM, ENVM).</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>Ficheiro</code>, <code>FicheiroEnvm</code>, <code>FicheiroAcom</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIFicheirosControlo.csproj</strong></td>
<td style="text-align: left;">Provides the user interface for managing and monitoring the file import process.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>FicheiroFormCentralENVM</code>, <code>FicheiroFormCentralACOM</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code>, <code>CIFicheiro</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIReports.csproj</strong></td>
<td style="text-align: left;">Manages the generation and display of Crystal Reports for the application.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>ListagemRemessas</code>, <code>AcomResumo</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>CrystalDecisions.*</code>, <code>GenericReportNet</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIServAlertas.csproj</strong></td>
<td style="text-align: left;">Implements the specific actions for the alerting service, such as sending emails or writing to logs.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>ServAlerta</code>, <code>ServAlertasSendWebmail</code></td>
<td style="text-align: left;"><code>Alerta</code>, <code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>CGDSendWebmail</code>, <code>GenericNet</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>CIServTester.csproj</strong></td>
<td style="text-align: left;">A helper library, likely for testing or triggering service actions from a non-service context.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>ProcessarRemessas</code>, <code>ProcessarAlertas</code></td>
<td style="text-align: left;"><code>Alerta</code>, <code>CIConfigGlobalParameters</code>, <code>CIServAlertas</code>, <code>CIServRemessas</code></td>
<td style="text-align: left;"><code>GenericNet</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">SemSetup</td>
<td style="text-align: left;"><strong>CITestes.csproj</strong></td>
<td style="text-align: left;">A dedicated project for unit tests of the application's business logic.</td>
<td style="text-align: left;">Test Project</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>CIServRemessaTestes</code></td>
<td style="text-align: left;"><code>CIControlo</code>, <code>CIServico</code>, <code>CIServRemessas</code>, <code>CIServTester</code></td>
<td style="text-align: left;"><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>MDIsControlo.csproj</strong></td>
<td style="text-align: left;">A module for controlling and interacting with Multi-function Devices (MDIs).</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>MDIsControloForm</code>, <code>Documento<em>02</em>MDI</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code>, <code>MDIWebTransmCI</code></td>
<td style="text-align: left;"><code>CCAGeneric</code>, <code>NBIISNET</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>MDIWebTransmCI.vbproj</strong></td>
<td style="text-align: left;">A VB.NET project that acts as a client for a SOAP Web Service related to MDI document insertion.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>TInsertDoc</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>CCAWebTransmCI</code>, <code>CCAGeneric</code></td>
</tr>
<tr>
<td style="text-align: left;">Both</td>
<td style="text-align: left;"><strong>QueryForm.csproj</strong></td>
<td style="text-align: left;">Provides a generic UI for executing and viewing the results of SQL queries against the database.</td>
<td style="text-align: left;">Class Library</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v4.0.30319</td>
<td style="text-align: left;">.NET Framework 4.0</td>
<td style="text-align: left;">AnyCPU</td>
<td style="text-align: left;">Debug/Release</td>
<td style="text-align: left;"><code>QueryForm</code></td>
<td style="text-align: left;"><code>CIConfigGlobalParameters</code></td>
<td style="text-align: left;"><code>NBIISNET</code></td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    subgraph UI_Layer ["UI Layer"]
        CIControlo["CIControlo.csproj (EXE)"]
        CIActividades["CIActividades.csproj"]
        CIConfiguration["CIConfiguration.csproj"]
        CIFicheirosControlo["CIFicheirosControlo.csproj"]
        MDIsControlo["MDIsControlo.csproj"]
        QueryForm["QueryForm.csproj"]
        CIReports["CIReports.csproj"]
    end

    subgraph Service_Layer ["Service Layer"]
        CIServico["CIServico.csproj (EXE)"]
        CIServRemessas["CIServRemessas.csproj"]
        CIServAlertas["CIServAlertas.csproj"]
        CIFicheiro["CIFicheiro.csproj"]
    end

    subgraph Core_Business_And_Data ["Core & Data Layer"]
        Alerta["Alerta.csproj"]
        MDIWebTransmCI["MDIWebTransmCI.vbproj"]
        CIConfigGlobalParameters["CIConfigGlobalParameters.csproj"]
    end

    subgraph Testing_Layer ["Testing Layer"]
        CITestes["CITestes.csproj"]
        CIServTester["CIServTester.csproj"]
    end

    CIControlo --> CIActividades
    CIControlo --> CIConfiguration
    CIControlo --> CIFicheirosControlo
    CIControlo --> MDIsControlo
    CIControlo --> QueryForm
    CIControlo --> CIReports
    CIControlo --> CIServTester

    CIActividades --> Alerta
    CIActividades --> CIConfigGlobalParameters
    CIConfiguration --> Alerta
    CIConfiguration --> CIConfigGlobalParameters
    CIFicheirosControlo --> CIFicheiro
    MDIsControlo --> MDIWebTransmCI
    MDIsControlo --> CIConfigGlobalParameters
    CIReports --> CIConfigGlobalParameters
    QueryForm --> CIConfigGlobalParameters

    CIServico --> CIServRemessas
    CIServico --> CIServAlertas
    CIServico --> CIFicheiro
    
    CIServRemessas --> Alerta
    CIServRemessas --> CIActividades
    CIServAlertas --> Alerta
    CIFicheiro --> CIConfigGlobalParameters

    CITestes --> CIControlo
    CITestes --> CIServico

    Service_Layer --> Core_Business_And_Data
    UI_Layer --> Core_Business_And_Data
</code></pre>
<center><small>Figure 3 - Project dependency graph illustrating the relationships between the projects in the solution.</small></center>
</div>
<div class="product-section">
<h2 id="2-functional-overview">2. Functional overview</h2>
This section provides a high-level functional decomposition of the application, using table format. It identifies the major, distinct functional blocks or modules as inferred from the code's high-level structure (e.g., top-level namespaces, solution folders, primary class groups). This overview serves as a map to the application's core responsibilities.
<h3 id="21-executive-summary">2.1. Executive summary</h3>
This section provides a high-level summary of the application's primary purpose and its core function from a business or operational perspective, using table format. The summary is an inference based on the main entry points of the code (e.g., <code>main()</code>, <code>Application_Start()</code>), the names of the most central classes and modules, and the nature of the core processes identified. It answers the fundamental question: What primary problem does this application solve?
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;"><strong>Factor</strong></th>
<th style="text-align: left;"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Primary Purpose</strong></td>
<td style="text-align: left;">The SDCIM application is a back-office system designed to automate and manage the processing of financial documents, primarily remittances from bank branches ("Balcão") and other sources.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Core Function</strong></td>
<td style="text-align: left;">Its core function is to act as an "Image Concentrator" by ingesting document data and images, processing them in batches (tranches), managing their lifecycle through various states (e.g., received, processing, sent, error), and interfacing with external systems for final settlement or archiving. It includes a rich desktop client for operational monitoring, manual intervention, and system configuration.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Key Inferred Processes</strong></td>
<td style="text-align: left;">- <strong>Remittance Processing:</strong> A background service (<code>CIServico</code>) continuously polls for new remittances to process (<code>REMIN<em>IDParaProcessar</code>). <br> - <strong>Document Lifecycle Management:</strong> Documents and remittances move through a defined state machine, with capabilities for operators to manually change states (<code>MudarEstadoForm</code>). <br> - <strong>Error Handling and Reprocessing:</strong> The system has specific workflows to handle and re-submit items that have failed processing (<code>Update</em>ReenviarTodasRemessasBalcaoEmErro</code>). <br> - <strong>System Monitoring and Administration:</strong> A Windows Forms application (<code>CIControlo</code>) serves as the main console for users to view activities, manage configurations, and run reports.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Business Value</strong></td>
<td style="text-align: left;">The application appears critical for the bank's back-office operations, ensuring that financial documents are processed correctly, tracked, and that exceptions are handled in a timely manner. It provides the necessary tools for operators to oversee and control this complex workflow.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="22-functional-decomposition">2.2. Functional decomposition</h3>
This section provides a detailed breakdown of the application's functional areas or modules, inferred from the code structure, using table format. Each module is described in terms of its primary responsibilities and how it contributes to the overall functionality of the application. The decomposition is based on the organization of namespaces, classes, and methods, as well as the relationships between them.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Functional Area / Module</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>User Interaction & Presentation</strong></td>
<td style="text-align: left;">Manages all user-facing interfaces, handles user input, and renders data. This module is the primary interface between the user and the system's core logic, composed of multiple Windows Forms projects (<code>CIControlo</code>, <code>CIActividades</code>, <code>CIConfiguration</code>).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Core Process Execution Engine</strong></td>
<td style="text-align: left;">The heart of the application, running as a Windows Service (<code>CIServico</code>). It orchestrates background tasks, including polling for new work, processing remittances (<code>CIServRemessas</code>), and handling file imports (<code>CIFicheiro</code>).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data Persistence & Management</strong></td>
<td style="text-align: left;">Handles all interactions with the SQL Server database. This is not a formal layer but is implemented via direct <code>System.Data.SqlClient</code> calls and stored procedures scattered across various projects. It manages the state and data of all business entities.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>System Configuration & Administration</strong></td>
<td style="text-align: left;">Provides the logic and UI (<code>CIConfiguration</code>) for managing system-wide parameters, user accounts, and operational settings like branch (<code>Balcao</code>) configurations.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Alerting & Notification Subsystem</strong></td>
<td style="text-align: left;">A dedicated module (<code>Alerta</code>, <code>CIServAlertas</code>) responsible for generating and dispatching alerts based on system events. It supports multiple channels like email, SMS, and logging.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Reporting Subsystem</strong></td>
<td style="text-align: left;">Responsible for generating and displaying business reports (<code>CIReports</code>). It integrates Crystal Reports to create detailed and summary views of the processed data.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>External System Integration</strong></td>
<td style="text-align: left;">Contains the logic for communicating with external systems. This includes file-based interfaces (<code>ACOM</code>, <code>ENVM</code> files) and a SOAP web service client (<code>MDIWebTransmCI</code>) for interacting with MDI devices.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    subgraph "User Interaction"
        A["CIControlo (Main MDI)"]
        B["CIActividades (Monitoring)"]
        C["CIConfiguration (Admin)"]
        D["CIReports (Reporting)"]
    end

    subgraph "Core Processing"
        E["CIServico (Service Host)"]
        F["CIServRemessas (Remittance Logic)"]
        G["CIFicheiro (File Parser)"]
    end
    
    subgraph "Cross-Cutting Concerns"
        H["Alerta (Notifications)"]
        I["CIConfigGlobalParameters (Shared Config)"]
    end

    subgraph "External Interfaces"
        J["(Database - SQL Server)"]
        K["(File System)"]
        L["(Web Service - MDI)"]
        M["(Email/SMS Gateway)"]
    end

    A --> B
    A --> C
    A --> D
    
    B --> E
    C --> I
    
    E --> F
    E --> G
    E --> H

    F --> J
    G --> K
    H --> M
    H --> J
    
    MDIsControlo --> L
    
    classDef ui fill:#cce5ff,stroke:#333,stroke-width:2px;
    classDef core fill:#d5e8d4,stroke:#333,stroke-width:2px;
    classDef cross fill:#f8cecc,stroke:#333,stroke-width:2px;
    classDef external fill:#e1d5e7,stroke:#333,stroke-width:2px;

    class A,B,C,D ui;
    class E,F,G core;
    class H,I,MDIsControlo cross;
    class J,K,L,M external;
</code></pre>
<center><small>Figure 4 - Functional decomposition of the application, showing the relationships between modules.</small></center>
<h3 id="23-user-roles-and-permissions">2.3. User roles and permissions</h3>
This section identifies hall distinct types of users (or autonomous systems) that interact with the application, using table format. These roles are inferred from authentication logic, authorization checks (e.g., <code>[Authorize(Roles="...")]</code> decorators, <code>if (user.hasPermission('...'))</code> blocks), or conditional logic based on user properties (e.g., 'user.is_admin', 'user.group').
<div class="table-container">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Role</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Permissions</th>
<th style="text-align: left;">Key Actions</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Administrator</strong></td>
<td style="text-align: left;">A role with full system privileges, responsible for system configuration and management.</td>
<td style="text-align: left;">Full access to all features, including user management and system parameter configuration. Can perform sensitive operations like manual state changes.</td>
<td style="text-align: left;"><code>ChangeEstado</code>, <code>Insert<em>Utilizadores</code>, <code>Update</em>Balcao</code>, <code>ProcessamentoAutomatico</code></td>
<td style="text-align: left;"><code>User</code>, <code>Group</code>, <code>Balcao</code>, <code>Activity<em>Change</code></td>
<td style="text-align: left;">Inferred from code blocks checking <code>m</em>oParameters.UserLogged.m_iUserGroup <= 1</code>. This group has access to administrative forms and functions.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Standard Operator</strong></td>
<td style="text-align: left;">A standard user role for day-to-day monitoring and operational tasks.</td>
<td style="text-align: left;">Read-only access to most monitoring screens. Cannot perform administrative actions or manual state changes.</td>
<td style="text-align: left;"><code>ViewActivities</code>, <code>ViewRemittances</code>, <code>GenerateReports</code></td>
<td style="text-align: left;"><code>Remessa</code>, <code>Tranche</code>, <code>Documento</code></td>
<td style="text-align: left;">Inferred as the default role for users with <code>m_iUserGroup > 1</code>, who are explicitly blocked from privileged actions by the <code>ConfirmaPrivilegios()</code> method.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>classDiagram
    class User {
        +m_sUserName: string
        +m_sUserFullName: string
        +m_iUserGroup: int
        +m_sGroupName: string
    }

    class Administrator {
        <<Role>>
        +UserGroup <= 1
    }

    class StandardOperator {
        <<Role>>
        +UserGroup > 1
    }

    class SystemActions {
        <<Functional Area>>
        +ChangeState()
        +ManageUsers()
        +ConfigureSystem()
    }
    
    class MonitoringActions {
        <<Functional Area>>
        +ViewRemittances()
        +ViewDocuments()
        +GenerateReports()
    }
    
    User <|-- Administrator
    User <|-- StandardOperator
    
    Administrator ..> SystemActions : "Performs"
    StandardOperator ..> MonitoringActions : "Performs"
    
    note for Administrator "Has full control over the system, including user and configuration management."
    note for StandardOperator "Has read-only and monitoring access. Cannot change system state."

</code></pre>
<center><small>Figure 5 - Class diagram illustrating the user roles and their associated permissions.</small></center>
<h3 id="24-core-business-capabilities">2.4. Core business capabilities</h3>
This section lists the main, high-level capabilities of the application, representing its "Epics" or major functional domains, using table format
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Capability</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Key Features</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Remittance & Document Processing</strong></td>
<td style="text-align: left;">The complete set of functions related to processing financial remittances from ingestion to final state.</td>
<td style="text-align: left;">Automated polling for new remittances, batching documents into tranches, state transitions (e.g., Received, Processing, Sent, Error), reprocessing of failed items.</td>
<td style="text-align: left;"><code>Remessa<em>Balcao</code>, <code>Tranche</em>Out</code>, <code>Documento<em>Balcao</code>, <code>Documento</em>ACOM</code>, <code>Documento_ENVM</code></td>
<td style="text-align: left;">Inferred from the <code>CIServRemessas</code> and <code>CIServico</code> projects, and methods like <code>ProcessaRemessa</code> and <code>TratarTranchesBalcao</code>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>System Monitoring & Administration</strong></td>
<td style="text-align: left;">Provides user interfaces for real-time monitoring of system activities and administrative configuration.</td>
<td style="text-align: left;">Activity dashboards, detailed views for remittances and documents, user management, branch (<code>Balcao</code>) configuration, system parameter management.</td>
<td style="text-align: left;"><code>VW<em>REMESSA</em>BALCAO<em>DETALHE</code>, <code>VW</em>TRANCHE<em>BALCAO</em>DETALHE</code>, <code>Passwd</code>, <code>Grupo</code></td>
<td style="text-align: left;">Based on the extensive Windows Forms projects (<code>CIActividades</code>, <code>CIConfiguration</code>, <code>UtilizadoresForm</code>, <code>BalcaoForm</code>).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Alerting and Exception Handling</strong></td>
<td style="text-align: left;">A comprehensive subsystem for notifying operators and administrators of important system events and errors.</td>
<td style="text-align: left;">Configurable alerts for various situations, multi-channel notifications (Email, SMS, DB Log, Event Viewer), error logging.</td>
<td style="text-align: left;"><code>Alerta</code>, <code>Alerta<em>Situacao</code>, <code>Alerta</em>Accao</code></td>
<td style="text-align: left;">Based on the <code>Alerta</code> and <code>CIServAlertas</code> projects, which define situations, actions, and parameters for notifications.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>External Data Integration</strong></td>
<td style="text-align: left;">Manages the flow of data into and out of the system from various external sources.</td>
<td style="text-align: left;">Ingestion of <code>ENVM</code> and <code>ACOM</code> files, communication with MDI devices via a SOAP Web Service, database interactions for data persistence.</td>
<td style="text-align: left;"><code>Ficheiro</code>, <code>Lote<em>ENVM</code>, <code>Lote</em>ACOM</code>, <code>TIBCO_...</code> tables</td>
<td style="text-align: left;">Inferred from the <code>CIFicheiro</code> project for file processing and the <code>MDIWebTransmCI</code> project for web service integration.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    A["Remittance & Document Processing"] --> B["System Monitoring & Administration"]
    A --> C["Alerting and Exception Handling"]
    A --> D["External Data Integration"]
    
    D --> A
    
    subgraph CoreCapabilities
        A
        B
        C
        D
    end
    
    style A fill:#cce5ff,stroke:#333
    style B fill:#d5e8d4,stroke:#333
    style C fill:#f8cecc,stroke:#333
    style D fill:#e1d5e7,stroke:#333
</code></pre>
<center><small>Figure 6 - Core business capabilities of the SDCIM application.</small></center>
<h3 id="25-detailed-feature-breakdown">2.5. Detailed feature breakdown</h3>
This critical section provides a granular breakdown of individual features within each Core Business Capability, using table format. Each feature is described in terms of its user story, key data entities involved, and any inferred logic or flowcharts that illustrate the internal workings.
<div class="table-container">
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">User Story / Description</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Process Branch Remittance</strong></td>
<td style="text-align: left;">As a <strong>System</strong>, I can automatically detect and process a new remittance from a bank branch (<code>Balcao</code>) so that its documents are batched into tranches and sent for clearing. The <code>ProcessarTrancheBalcao</code> class orchestrates this by fetching a <code>remessaId</code> and calling <code>TratarTranchesBalcao</code>.</td>
<td style="text-align: left;"><code>REMESSA<em>BALCAO</code>, <code>DOCUMENTO</em>BALCAO</code>, <code>TRANCHE_OUT</code></td>
<td style="text-align: left;">Inferred from <code>CIServRemessaTestes</code> which calls <code>ProcessarTrancheBalcao</code>. The process runs in a loop until no more remittances are found.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Manually Change Remittance State</strong></td>
<td style="text-align: left;">As an <strong>Administrator</strong>, I can manually change the status of one or more remittances to resolve processing errors or force a specific workflow step. The <code>ActividadeBalcaoForm</code> UI allows selecting a remittance and using the <code>MudarEstadoForm</code> to pick a new valid state.</td>
<td style="text-align: left;"><code>REMESSA<em>BALCAO</code>, <code>REMESSAIN</em>STATUS</code>, <code>ACTIVITY<em>CHANGE</code></td>
<td style="text-align: left;">Based on the UI logic in <code>ActividadeBalcaoForm</code> and the <code>toolStripMenuRemessaMudarEstado</em>Click</code> event handler, which calls the <code>ChangeEstado</code> method on a <code>DetalheRemessa</code> object.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>View Remittance Activity</strong></td>
<td style="text-align: left;">As a <strong>Standard Operator</strong>, I can view a summary and detailed breakdown of all remittances processed within a specific date range and filter by status so that I can monitor the system's health and performance. The <code>ActividadeBalcaoForm</code> provides multiple <code>ListView</code> controls for this purpose.</td>
<td style="text-align: left;"><code>VW<em>REMESSA</em>BALCAO<em>DETALHE</code>, <code>VW</em>TRANCHE<em>BALCAO</em>DETALHE</code>, <code>VW<em>DETALHE</em>DOCUMENTOS_BALCAO</code></td>
<td style="text-align: left;">Inferred from the UI design of <code>ActividadeBalcaoForm</code> and its <code>refresh</code> methods which populate list views from database views.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Re-process Failed Remittances</strong></td>
<td style="text-align: left;">As an <strong>Administrator</strong>, I can trigger a re-processing job for all remittances currently in an error state so that they can be re-submitted without manual intervention for each one. The <code>btnRemessasErro<em>Click</code> event handler executes the <code>Update</em>ReenviarTodasRemessasBalcaoEmErro</code> stored procedure.</td>
<td style="text-align: left;"><code>REMESSA<em>BALCAO</code>, <code>ESTORNO</em>BALCAO</code></td>
<td style="text-align: left;">Inferred from the <code>btnRemessasErro<em>Click</code> and <code>btnEstonoErro</em>Click</code> event handlers in <code>ActividadeBalcaoForm</code>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Send Alert Notification</strong></td>
<td style="text-align: left;">As the <strong>System</strong>, when a predefined situation occurs (e.g., processing error <code>SITUACAO<em>ID=910</code>), I can send a notification via a configured channel (e.g., Email) so that an operator is alerted. The <code>ServAlerta</code> class processes <code>AlertaSituacaoAccao</code> records and dispatches them.</td>
<td style="text-align: left;"><code>ALERTA</em>ALERTA</code>, <code>ALERTA<em>SITUACAO</em>ACCAO</code>, <code>ALERTA<em>ACCAO</em>PARAM</code></td>
<td style="text-align: left;">Based on the logic in <code>ServAlerta.cs</code> which switches on <code>enuTipoAccao</code> to perform different notification actions like <code>ProcessaAlertaSituacaoAccaoMail</code>.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="26-key-data-entities-and-their-attributes">2.6. Key data entities and their attributes</h3>
This section documents the application's core data structures, as inferred from class definitions or ORM configurations.
<div class="table-container">
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Entity</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Key Attributes</th>
<th style="text-align: left;">Data Type</th>
<th style="text-align: left;">Validation Rules</th>
<th style="text-align: left;">Relationships</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>RemessaBalcao</strong></td>
<td style="text-align: left;">Represents a remittance submission from a bank branch ("Balcão"). It is the primary container for a batch of documents.</td>
<td style="text-align: left;"><code>ID</code>, <code>REMBALCAO<em>DATA</code>, <code>REMBALCAO</em>STAT<em>ID</code>, <code>REMBALCAO</em>BALCAO</code>, <code>REMBALCAO<em>MT</em>DOCS</code></td>
<td style="text-align: left;"><code>int</code>, <code>DateTime</code>, <code>int</code>, <code>int</code>, <code>decimal</code></td>
<td style="text-align: left;"><code>ID</code>: Primary Key. <br> <code>REMBALCAO<em>STAT</em>ID</code>: Foreign Key to a status table.</td>
<td style="text-align: left;">Has a one-to-many relationship with <code>DocumentoBalcao</code>.</td>
<td style="text-align: left;">Inferred from <code>DetalheRemessa.cs</code> and various <code>VW<em>REMESSA</em>BALCAO_DETALHE</code> view queries. The entity is managed via direct SQL.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>DocumentoBalcao</strong></td>
<td style="text-align: left;">Represents a single financial document (e.g., a cheque) within a remittance.</td>
<td style="text-align: left;"><code>ID</code>, <code>REMBALCAO<em>ID</code>, <code>DOC</em>ZONA1</code> to <code>DOC<em>ZONA5</code>, <code>DOCSTAT</em>ID</code>, <code>DOC<em>REFARQ</code></td>
<td style="text-align: left;"><code>int</code>, <code>int</code>, <code>string</code>, <code>int</code>, <code>string</code></td>
<td style="text-align: left;"><code>DOC</em>NIB</code>: Must be 13 or 21 chars.</td>
<td style="text-align: left;">Belongs to one <code>RemessaBalcao</code>. May be part of one <code>TrancheOut</code>.</td>
<td style="text-align: left;">Inferred from <code>DetalheDocumento.cs</code> and <code>VW<em>DETALHE</em>DOCUMENTOS<em>BALCAO</code> view. <code>DOC</em>ZONA</code> fields likely represent MICR line data.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>TrancheOut</strong></td>
<td style="text-align: left;">Represents a batch of documents prepared for sending to an external system (e.g., for clearing).</td>
<td style="text-align: left;"><code>TRANOUT<em>ID</code>, <code>REMIN</em>ID</code>, <code>TRANOUTSTAT<em>ID</code>, <code>TRANOUT</em>NUMERO</code>, <code>CHAVE<em>WEBSERVICE</code></td>
<td style="text-align: left;"><code>int</code>, <code>int</code>, <code>int</code>, <code>int</code>, <code>string</code></td>
<td style="text-align: left;"><code>TRANOUTSTAT</em>ID</code>: Foreign key to a status table.</td>
<td style="text-align: left;">Contains multiple <code>DocumentoBalcao</code> records.</td>
<td style="text-align: left;">Inferred from <code>DetalheTranche.cs</code> and related views. It acts as an outbound batch.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>AlertaSituacaoAccao</strong></td>
<td style="text-align: left;">A record representing a triggered alert, linking a specific situation to a configured action.</td>
<td style="text-align: left;"><code>ALERT<em>ID</code>, <code>SITUACAO</em>ID</code>, <code>ACC<em>ID</code>, <code>ALACC</em>STATUS</code>, <code>AL<em>TEXT</code></td>
<td style="text-align: left;"><code>string</code>, <code>int</code>, <code>int</code>, <code>int</code>, <code>string</code></td>
<td style="text-align: left;"><code>ALACC</em>STATUS</code>: Indicates if the alert has been processed (0=new, 1=processed, -1=error).</td>
<td style="text-align: left;">Links <code>Alerta</code> to <code>Situacao</code> and <code>Accao</code>.</td>
<td style="text-align: left;">Inferred from <code>AlertaSituacaoAccao.cs</code>. This entity drives the notification workflow.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>erDiagram
    RemessaBalcao {
        int ID PK "Primary Key"
        datetime REMBALCAO_DATA
        int REMBALCAO_STAT_ID FK "Status"
        int REMBALCAO_BALCAO FK "Branch"
        decimal REMBALCAO_MT_DOCS "Total Amount"
    }

    DocumentoBalcao {
        int ID PK "Primary Key"
        int REMBALCAO_ID FK "Remittance ID"
        int TRANOUT_ID FK "Tranche ID"
        int DOCSTAT_ID FK "Status"
        string DOC_ZONA5 "MICR/ZIB"
        string DOC_ZONA4 "Account"
        string DOC_ZONA3 "Cheque No."
        decimal DOC_ZONA2 "Amount"
    }

    TrancheOut {
        int TRANOUT_ID PK "Primary Key"
        int REMIN_ID FK "Remittance ID"
        int TRANOUTSTAT_ID FK "Status"
        int TRANOUT_NUMERO "Tranche Number"
        string CHAVE_WEBSERVICE "WS Key"
    }
    
    AlertaSituacaoAccao {
        int ALERT_ID PK "Alert ID"
        int SITUACAO_ID FK "Situation"
        int ACC_ID FK "Action"
        int ALACC_STATUS "Processing Status"
        string AL_TEXT "Alert Message"
    }

    RemessaBalcao ||--|{ DocumentoBalcao : "contains"
    TrancheOut ||--o{ DocumentoBalcao : "batches"
    RemessaBalcao ||--|{ TrancheOut : "is batched into"

</code></pre>
<center><small>Figure 7 - Entity-Relationship diagram showing the core data entities and their relationships.</small></center>
<h3 id="27-business-process-workflows">2.7. Business process workflows</h3>
This section describes and visualizes critical end-to-end processes, showing how different user roles and system features interact.
<div class="table-container">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Process</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Key Steps</th>
<th style="text-align: left;">User Roles Involved</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Standard Remittance Processing</strong></td>
<td style="text-align: left;">A comprehensive workflow that outlines the steps involved in processing a branch remittance from ingestion to final output.</td>
<td style="text-align: left;">1. Remittance is created (status 20).<br>2. <code>CIServico</code> picks it up and sets status to 30 (Processing).<br>3. Documents are grouped into tranches.<br>4. Tranches are sent to an external system.<br>5. Remittance status is updated to 40 (Processed) or -40 (Error).</td>
<td style="text-align: left;">System, Administrator</td>
<td style="text-align: left;"><code>Remessa<em>Balcao</code>, <code>Documento</em>Balcao</code>, <code>Tranche_Out</code></td>
<td style="text-align: left;">Inferred from the logic in <code>ServRemessa.cs</code> and the state transitions observed in the UI code.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Manual Error Correction</strong></td>
<td style="text-align: left;">A workflow initiated by an operator to manually correct the state of a failed or stuck remittance or tranche.</td>
<td style="text-align: left;">1. Operator identifies a failed item in <code>ActividadeBalcaoForm</code>.<br>2. Operator uses the "Mudar Estado" context menu.<br>3. A new, valid state is selected from <code>MudarEstadoForm</code>.<br>4. The system updates the entity's status in the database.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>Remessa<em>Balcao</code>, <code>Tranche</em>Out</code>, <code>Activity_Change</code></td>
<td style="text-align: left;">Based on the presence of <code>MudarEstadoForm</code> and its invocation from the main activity monitoring UIs.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>System Alerting Workflow</strong></td>
<td style="text-align: left;">The process by which the system generates and delivers a notification when a specific business or technical event occurs.</td>
<td style="text-align: left;">1. A system event triggers <code>Insert<em>Alerta</code> stored procedure.<br>2. A new record is created in <code>ALERTA</em>ALERTA<em>ACCAO</code> with status 0.<br>3. <code>CIServAlertas</code> service dequeues the alert.<br>4. The service executes the configured action (e.g., sends an email).<br>5. The alert record status is updated to 1 (Processed) or -1 (Error).</td>
<td style="text-align: left;">System, Administrator</td>
<td style="text-align: left;"><code>Alerta</code>, <code>Alerta</em>Situacao<em>Accao</code>, <code>ALERTA</em>ACCAO_PARAM</code></td>
<td style="text-align: left;">Inferred from the <code>Alerta</code> project and the processing logic in <code>ServAlerta.cs</code>.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    subgraph "Workflows"
        A["Standard Remittance Processing"]
        B["Manual Error Correction"]
        C["System Alerting Workflow"]
    end

    A --> B
    A --> C

    style A fill:#cce5ff,stroke:#333
    style B fill:#f8cecc,stroke:#333
    style C fill:#d5e8d4,stroke:#333
</code></pre>
<center><small>Figure 8 - High-level overview of the main business process workflows.</small></center>
<p>---</p>
<h4 id="271-workflow-standard-remittance-processing">2.7.1. Workflow: Standard Remittance Processing</h4>
This section provides a detailed breakdown of the Standard Remittance Processing workflow, including the steps involved, user roles, key data entities, and any assumptions made.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Remittance Ingestion</strong></td>
<td style="text-align: left;">A new remittance is created in the system with an initial status (e.g., 20 - "Fechado"). This is likely triggered by an upstream process or manual data entry not visible in the provided code.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Remessa_Balcao</code></td>
<td style="text-align: left;">The creation of the initial remittance record is an assumed prerequisite for this workflow.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Processing Pickup</strong></td>
<td style="text-align: left;">The <code>CIServico</code> background service periodically calls <code>RemessaBalcaoParaProcessar</code> to find a remittance with a "new" status.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Remessa_Balcao</code></td>
<td style="text-align: left;">The service runs on a timer and continuously polls the database for work.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. State Transition to Processing</strong></td>
<td style="text-align: left;">Once a remittance is picked, its status is immediately updated to 30 ("Em Processamento") to prevent other service instances from processing it.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Remessa_Balcao</code></td>
<td style="text-align: left;">This is a standard pessimistic locking pattern for service-based processing.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Document Batching</strong></td>
<td style="text-align: left;">The service iterates through all documents associated with the remittance and groups them into tranches, respecting the <code>MaxDocsTranche</code> configuration. A new <code>Tranche<em>Out</code> record is created for each batch.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Documento</em>Balcao</code>, <code>Tranche_Out</code></td>
<td style="text-align: left;">Inferred from the loop in <code>TratarTranchesBalcao</code> and the <code>CriarTrancheBalcao</code> method call.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>5. Final State Update</strong></td>
<td style="text-align: left;">After all documents are processed and batched, the final status of the remittance is updated to 40 ("Processado") on success or -40 ("Erro") if any unrecoverable errors occurred.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Remessa_Balcao</code></td>
<td style="text-align: left;">The final state update signals the completion of the workflow for this remittance.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>sequenceDiagram
    participant US as Upstream System
    participant DB as Database
    participant S as CIServico
    participant L as RemittanceLogic

    US->>DB: Create Remessa_Balcao (Status=20)
    loop Polling for Work
        S->>DB: REMIN_IDParaProcessar()
        DB-->>S: Return RemessaID
    end
    S->>DB: Update Remessa_Balcao SET Status=30
    S->>L: ProcessaRemessa(RemessaID)
    L->>DB: Get Documents for RemessaID
    loop For each batch of documents
        L->>DB: Create Tranche_Out
        L->>DB: Associate Documents with Tranche
    end
    alt Success
        L->>DB: Update Remessa_Balcao SET Status=40
    else Failure
        L->>DB: Update Remessa_Balcao SET Status=-40
    end
</code></pre>
<center><small>Figure 9 - Sequence diagram illustrating the Standard Remittance Processing workflow.</small></center>
<h4 id="272-workflow-manual-error-correction">2.7.2. Workflow: Manual Error Correction</h4>
This section provides a detailed breakdown of the Manual Error Correction workflow.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Identify Failed Item</strong></td>
<td style="text-align: left;">An Administrator uses the <code>ActividadeBalcaoForm</code> to filter for and identify a remittance or tranche that is stuck in an error state (e.g., -40, -50).</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>VW<em>REMESSA</em>BALCAO_DETALHE</code></td>
<td style="text-align: left;">The user has the necessary knowledge to determine that an item requires manual intervention.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Invoke State Change UI</strong></td>
<td style="text-align: left;">The user right-clicks the item and selects "Mudar Estado" from the context menu.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;">(UI State)</td>
<td style="text-align: left;">The UI correctly identifies the current state and table name of the selected entity.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. Select New State</strong></td>
<td style="text-align: left;">The <code>MudarEstadoForm</code> is displayed, populated with a list of valid next states retrieved from the <code>ACTIVITY<em>CHANGE</code> table for the given entity type and current state. The user selects a target state.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>ACTIVITY</em>CHANGE</code></td>
<td style="text-align: left;">The <code>ACTIVITY_CHANGE</code> table correctly defines the valid state transitions for the application's state machine.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Execute State Change</strong></td>
<td style="text-align: left;">The application executes the validation and processing stored procedures (<code>ACTIVITY<em>SPVALIDA</code>, <code>ACTIVITY</em>SPPROCESSA</code>) associated with the selected state transition.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Remessa<em>Balcao</code>, <code>Tranche</em>Out</code></td>
<td style="text-align: left;">The stored procedures handle the business logic required for the state transition.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>5. UI Refresh</strong></td>
<td style="text-align: left;">The application refreshes the activity view, which now reflects the new state of the manually corrected item.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;">(UI State)</td>
<td style="text-align: left;">The UI correctly reflects the change made in the database.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>sequenceDiagram
    participant Admin as Administrator
    participant UI as ActividadeBalcaoForm
    participant DB as Database
    
    Admin->>UI: Selects failed Remittance
    Admin->>UI: Right-click -> "Mudar Estado"
    UI->>DB: Get valid next states from ACTIVITY_CHANGE
    DB-->>UI: Return list of states
    UI->>Admin: Display MudarEstadoForm with options
    Admin->>UI: Selects new state and clicks OK
    UI->>DB: EXEC [SP_PROCESSA] for state change
    DB-->>UI: Confirmation
    UI->>Admin: Refreshes ListView to show new state
</code></pre>
<center><small>Figure 10 - Sequence diagram for the Manual Error Correction workflow.</small></center>
<h4 id="273-workflow-system-alerting-workflow">2.7.3. Workflow: System Alerting Workflow</h4>
This section provides a detailed breakdown of the System Alerting workflow.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Trigger Alert</strong></td>
<td style="text-align: left;">An event within the application (e.g., a processing error, a long-running task) calls the <code>Insert<em>Alerta</code> stored procedure with a specific <code>SITUACAO</em>ID</code>.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Alerta</code>, <code>Alerta_Situacao</code></td>
<td style="text-align: left;">The application code is instrumented to correctly identify and trigger alerts for relevant situations.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Create Actionable Alert</strong></td>
<td style="text-align: left;">The database trigger or logic creates records in <code>ALERTA<em>ALERTA</em>ACCAO</code> for each action configured for that situation, setting the status to 0 (New).</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>ALERTA<em>ALERTA</em>ACCAO</code></td>
<td style="text-align: left;">The <code>ALERTA<em>SITUACAO</em>ACCAO</code> table correctly maps situations to one or more notification actions.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. Dequeue Alert</strong></td>
<td style="text-align: left;">The <code>CIServAlertas</code> service thread calls <code>AlertaSituacaoAccaoParaProcessar</code> to fetch one new alert record (status 0) from the database.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>ALERTA<em>ALERTA</em>ACCAO</code></td>
<td style="text-align: left;">The service polls the database periodically for new alerts to process.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Execute Action</strong></td>
<td style="text-align: left;">The service inspects the <code>enuTipoAccao</code> of the alert and dispatches it to the appropriate handler (e.g., <code>ServAlertasSendWebmail</code> for email, <code>ServAlertasLogFile</code> for file logging).</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>ALERTA<em>ACCAO</em>PARAM</code></td>
<td style="text-align: left;">The parameters for each action (e.g., email recipient, log file path) are correctly configured in the <code>ALERTA<em>ACCAO</em>PARAM</code> table.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>5. Update Alert Status</strong></td>
<td style="text-align: left;">Upon completion, the service calls <code>SetProcessado</code> or <code>SetErroProcessamento</code> to update the <code>ALACC<em>STATUS</code> of the record to 1 (Processed) or -1 (Error).</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>ALERTA</em>ALERTA_ACCAO</code></td>
<td style="text-align: left;">This prevents the same alert from being processed repeatedly.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>sequenceDiagram
    participant App as Application Logic
    participant DB as Database
    participant Svc as CIServAlertas Service
    participant Gateway as Email/SMS Gateway

    App->>DB: EXEC Insert_Alerta (SITUACAO_ID)
    DB->>DB: Create ALERTA_ALERTA_ACCAO record (Status=0)
    
    loop Polling
        Svc->>DB: AlertaSituacaoAccaoParaProcessar()
        DB-->>Svc: Return new alert record
    end
    
    alt Action is Email
        Svc->>Gateway: Send Email(alert details)
        Gateway-->>Svc: Acknowledgment
    else Action is Log
        Svc->>DB: Write to Log Table
    end
    
    Svc->>DB: Update ALERTA_ALERTA_ACCAO SET Status=1
</code></pre>
<center><small>Figure 11 - Sequence diagram for the System Alerting workflow.</small></center>
<h3 id="28-system-inputs-outputs-interfaces">2.8. System inputs & outputs (interfaces)</h3>
This section catalogs all identified points where data enters or leaves the application boundary.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Name / Description</th>
<th style="text-align: left;">Data Formats</th>
<th style="text-align: left;">Data Source / Sink</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Input</strong></td>
<td style="text-align: left;"><strong>File Ingestion (ENVM/ACOM)</strong></td>
<td style="text-align: left;">Fixed-width text files</td>
<td style="text-align: left;">Monitored file system directory (<code>m<em>sFilePathENVM</code>, <code>m</em>sFilePathACOM</code>)</td>
<td style="text-align: left;">A file watcher service is inferred to be listening in these directories for batch processing. The system expects specific, structured file formats.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Input</strong></td>
<td style="text-align: left;"><strong>User Interface</strong></td>
<td style="text-align: left;">User-entered data</td>
<td style="text-align: left;">Windows Forms controls (<code>ActividadesForm</code>, <code>ConfigurationForm</code>, etc.)</td>
<td style="text-align: left;">Operators and administrators interact with the system via the desktop client to provide input, trigger actions, and configure settings.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Output</strong></td>
<td style="text-align: left;"><strong>Database Persistence</strong></td>
<td style="text-align: left;">SQL</td>
<td style="text-align: left;">SQL Server Database</td>
<td style="text-align: left;">All processed data, states, configurations, and logs are persisted in a central SQL Server database.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Output</strong></td>
<td style="text-align: left;"><strong>Email/SMS Notifications</strong></td>
<td style="text-align: left;">SMTP/Vendor-specific</td>
<td style="text-align: left;">External Email/SMS Gateway</td>
<td style="text-align: left;">The alerting subsystem sends formatted text messages to external gateways for delivery to users.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Output</strong></td>
<td style="text-align: left;"><strong>Log Files</strong></td>
<td style="text-align: left;">Text files</td>
<td style="text-align: left;">Local/Network file system</td>
<td style="text-align: left;">The <code>ServAlertasLogFile</code> component writes plain text logs to a configured file path.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Output</strong></td>
<td style="text-align: left;"><strong>Event Viewer Logs</strong></td>
<td style="text-align: left;">Windows Event Log format</td>
<td style="text-align: left;">Windows Event Log</td>
<td style="text-align: left;">The system writes critical errors and informational messages to the Windows Event Log for system administrators.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data Flow</strong></td>
<td style="text-align: left;"><strong>Web Service (MDI)</strong></td>
<td style="text-align: left;">SOAP/XML</td>
<td style="text-align: left;">External MDI Web Service (<code>waiaccesstuInsertDoc</code>)</td>
<td style="text-align: left;">The application sends document and remittance data to an external web service, likely for processing documents from Multi-Function Devices.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    subgraph ExternalSources ["External Sources"]
        UI["User Input (WinForms)"]
        FS["File System (ENVM/ACOM)"]
        WS_Ext["External MDI Web Service"]
    end

    subgraph Application ["SDCIM Application"]
        Core["Core Processing Engine"]
    end

    subgraph ExternalSinks ["External Sinks"]
        DB["(SQL Server Database)"]
        Email["(Email/SMS Gateway)"]
        LogFile["(Log Files)"]
        EventLog["(Windows Event Log)"]
    end

    UI --> Core
    FS --> Core
    Core --> L["MDIWebTransmCI (Web Service Client)"]
    L --> WS_Ext

    Core --> DB
    Core --> Email
    Core --> LogFile
    Core --> EventLog
</code></pre>
<center><small>Figure 12 - High-level data flow diagram showing system inputs and outputs.</small></center>
<h3 id="29-user-task-flows">2.9. User Task Flows</h3>
This section describes the typical path a user takes through the application to achieve a high-level objective, linking multiple features together.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Task Flow</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>End-to-End Remittance Monitoring</strong></td>
<td style="text-align: left;">A comprehensive sequence of steps an operator follows to monitor a remittance from creation to completion.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;"><code>Remessa<em>Balcao</code>, <code>Tranche</em>Out</code>, <code>Documento_Balcao</code></td>
<td style="text-align: left;">The user is performing a routine check on the system's processing status.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Troubleshoot and Correct a Failed Remittance</strong></td>
<td style="text-align: left;">A task flow where an administrator diagnoses a processing failure and manually intervenes to correct it.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>Remessa<em>Balcao</code>, <code>Activity</em>Change</code></td>
<td style="text-align: left;">Assumes a failure has already occurred and been flagged, requiring manual intervention.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Configure a New Bank Branch</strong></td>
<td style="text-align: left;">A task flow for an administrator to add a new branch (<code>Balcao</code>) and its associated devices (<code>Maquina</code>) to the system.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>Balcao</code>, <code>Maquina</code></td>
<td style="text-align: left;">Assumes a new branch is being onboarded into the system.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    A["End-to-End Remittance Monitoring"]
    B["Troubleshoot and Correct a Failed Remittance"]
    C["Configure a New Bank Branch"]

    A --> B
</code></pre>
<center><small>Figure 13 - High-level overview of the main user task flows.</small></center>
<p>---</p>
<h4 id="291-user-task-flow-end-to-end-remittance-monitoring">2.9.1. User Task Flow: End-to-End Remittance Monitoring</h4>
This section provides a detailed breakdown of the End-to-End Remittance Monitoring task flow.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Open Activity View</strong></td>
<td style="text-align: left;">The user launches the <code>CIControlo</code> application and opens the "Actividades" or "Actividades Balcão" form.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;">The user has successfully logged into the application.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Filter for Date Range</strong></td>
<td style="text-align: left;">The user selects a date range using the <code>DateTimePicker</code> controls to narrow down the remittances to view.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;">The user knows the approximate date of the remittance they are interested in.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. View Remittance Summary</strong></td>
<td style="text-align: left;">The user views the summary list (<code>listViewResumoRemessas</code>), which shows aggregated counts of remittances by status.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;"><code>VW<em>REMESSAS</em>ESTADO_RESUMO</code></td>
<td style="text-align: left;">The summary view provides a quick overview of system health.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Drill Down to Details</strong></td>
<td style="text-align: left;">The user double-clicks a summary row to populate the detailed remittance list (<code>listViewDetalhesRemessa</code>).</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;"><code>VW<em>REMESSA</em>BALCAO_DETALHE</code></td>
<td style="text-align: left;">The user wants to see the individual remittances that make up the summary.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>5. Drill Down to Tranches</strong></td>
<td style="text-align: left;">The user double-clicks a specific remittance to view the tranches (<code>listViewDetalhesTranche</code>) it was broken into.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;"><code>VW<em>TRANCHE</em>BALCAO_DETALHE</code></td>
<td style="text-align: left;">The user is investigating the batching process for a specific remittance.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>6. Drill Down to Documents</strong></td>
<td style="text-align: left;">The user double-clicks a tranche to view the individual documents (<code>listViewDetalhesDocumentos</code>) it contains.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;"><code>VW<em>DETALHE</em>DOCUMENTOS_BALCAO</code></td>
<td style="text-align: left;">The user needs to inspect the details of a single document.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>7. View Document Image</strong></td>
<td style="text-align: left;">The user double-clicks a document to open the <code>ImagemBalcaoForm</code> and view the scanned image of the document.</td>
<td style="text-align: left;">Standard Operator</td>
<td style="text-align: left;"><code>Imagem_Balcao</code></td>
<td style="text-align: left;">The document image is available in the database and the user has permission to view it.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    A["Login & Open Activity View"] --> B["Set Date and Status Filters"]
    B --> C["View Remittance Summary"]
    C --> D{"Drill Down?"}
    D -- Yes --> E["View Remittance Details"]
    E --> F{"Drill Down?"}
    F -- Yes --> G["View Tranche Details"]
    G --> H{"Drill Down?"}
    H -- Yes --> I["View Document Details"]
    I --> J{"View Image?"}
    J -- Yes --> K["View Document Image"]
    
    D -- No --> L["End Task"]
    F -- No --> L
    H -- No --> L
    J -- No --> L
    K --> L
</code></pre>
<center><small>Figure 14 - User task flow for monitoring a remittance from summary to a specific document image.</small></center>
<h4 id="292-user-task-flow-troubleshoot-and-correct-a-failed-remittance">2.9.2. User Task Flow: Troubleshoot and Correct a Failed Remittance</h4>
This section provides a detailed breakdown of the Troubleshoot and Correct a Failed Remittance task flow.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Identify Error</strong></td>
<td style="text-align: left;">The Administrator filters the <code>ActividadeBalcaoForm</code> to show only items in an error state (e.g., status -40).</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>VW<em>REMESSA</em>BALCAO_DETALHE</code></td>
<td style="text-align: left;">An alert may have prompted this investigation.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Analyze Error Message</strong></td>
<td style="text-align: left;">The user inspects the <code>Erro</code> column in the <code>ListView</code> to understand the cause of the failure.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>REMESSA_BALCAO</code></td>
<td style="text-align: left;">The error message logged in the database is informative enough to diagnose the issue.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. Initiate State Change</strong></td>
<td style="text-align: left;">The user right-clicks the failed remittance and selects "Mudar Estado".</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>ACTIVITY_CHANGE</code></td>
<td style="text-align: left;">The user has determined that a manual state change is the correct course of action.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Select Corrective State</strong></td>
<td style="text-align: left;">From the <code>MudarEstadoForm</code>, the user selects a new state, such as re-queueing for processing (e.g., back to status 20) or marking as manually resolved.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>ACTIVITY_CHANGE</code></td>
<td style="text-align: left;">The user understands the state machine and the implications of the chosen state.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>5. Confirm and Execute</strong></td>
<td style="text-align: left;">The user confirms the action, and the system executes the associated stored procedures to update the remittance's status.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Remessa_Balcao</code></td>
<td style="text-align: left;">The action is logged for auditing purposes.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>6. Verify Resolution</strong></td>
<td style="text-align: left;">The Administrator refreshes the view to confirm the remittance is no longer in an error state and is either being reprocessed or is in a terminal success/fail state.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>VW<em>REMESSA</em>BALCAO_DETALHE</code></td>
<td style="text-align: left;">The manual intervention has successfully resolved the issue.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    A["Filter for Error States"] --> B["Select Failed Remittance & Analyze Error"]
    B --> C{"Manual Fix Possible?"}
    C -- No --> D["Escalate Issue Externally"]
    C -- Yes --> E["Invoke 'Mudar Estado'"]
    E --> F["Select New State (e.g., Re-process)"]
    F --> G["Confirm Action"]
    G --> H["System Updates State in DB"]
    H --> I["Verify Resolution in UI"]
    I --> J["End Task"]
    D --> J
</code></pre>
<center><small>Figure 15 - User task flow for troubleshooting and correcting a failed remittance.</small></center>
<h4 id="293-user-task-flow-configure-a-new-bank-branch">2.9.3. User Task Flow: Configure a New Bank Branch</h4>
This section provides a detailed breakdown of the Configure a New Bank Branch task flow.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">User Role</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Open Configuration UI</strong></td>
<td style="text-align: left;">The Administrator opens the <code>BalcaoForm</code> from the main application menu.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;">The user has the necessary permissions to access configuration screens.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Enter Branch Details</strong></td>
<td style="text-align: left;">The user fills in the details for the new branch, including its code, abbreviation, and description, in the form's text boxes.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>Balcao</code></td>
<td style="text-align: left;">The user has the correct information for the new branch.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. Insert New Branch</strong></td>
<td style="text-align: left;">The user clicks the "Inserir" button to create the new <code>Balcao</code> record in the database.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Balcao</code></td>
<td style="text-align: left;">The system validates that the branch code is unique.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Select New Branch</strong></td>
<td style="text-align: left;">The <code>listViewBalcoes</code> is refreshed, and the user selects the newly created branch to configure its devices.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>Balcao</code></td>
<td style="text-align: left;">The UI correctly reflects the newly added data.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>5. Enter Device Details</strong></td>
<td style="text-align: left;">The user enters the details for a new device (<code>Maquina</code>) associated with the branch, such as its model and IQA status.</td>
<td style="text-align: left;">Administrator</td>
<td style="text-align: left;"><code>Maquina</code></td>
<td style="text-align: left;">The branch type requires device configuration (e.g., GCAA branches).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>6. Insert New Device</strong></td>
<td style="text-align: left;">The user clicks the "Inserir" button in the machines section to create the <code>Maquina</code> record.</td>
<td style="text-align: left;">System</td>
<td style="text-align: left;"><code>Maquina</code></td>
<td style="text-align: left;">The device is now associated with the branch and ready for use.</td>
</tr>
</tbody>
</table>
</div>
<pre class="mermaid"><code>flowchart TD
    A["Open BalcaoForm"] --> B["Enter New Branch Details"]
    B --> C["Click 'Inserir' for Branch"]
    C --> D["System Creates Balcao Record"]
    D --> E["Select New Branch from List"]
    E --> F{"Device Configuration Needed?"}
    F -- Yes --> G["Enter New Device Details"]
    G --> H["Click 'Inserir' for Maquina"]
    H --> I["System Creates Maquina Record"]
    I --> J["End Task"]
    F -- No --> J
</code></pre>
<center><small>Figure 16 - User task flow for configuring a new bank branch and its devices.</small></center>
<h3 id="210-automated-scheduled-processes">2.10. Automated & Scheduled Processes</h3>
This section describes any system-triggered processes that run without direct user interaction.
<div class="table-container">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Process Name</th>
<th style="text-align: left;">Trigger / Schedule</th>
<th style="text-align: left;">Purpose</th>
<th style="text-align: left;">Key Actions</th>
<th style="text-align: left;">Key Data Entities</th>
<th style="text-align: left;">Assumptions</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Remittance Processing Job</strong></td>
<td style="text-align: left;">Timer-based, within <code>CIServico</code>. The <code>m<em>tsSleepTime</code> variable controls the polling interval.</td>
<td style="text-align: left;">To automatically process new remittances as they arrive in the system.</td>
<td style="text-align: left;">1. Polls for remittances with status 20.<br>2. Updates status to 30.<br>3. Processes documents into tranches.<br>4. Updates status to 40 or -40.</td>
<td style="text-align: left;"><code>Remessa</em>Balcao</code>, <code>Tranche<em>Out</code>, <code>Documento</em>Balcao</code></td>
<td style="text-align: left;">Inferred from the main loop in <code>CIServicoThread.cs</code> and the logic in <code>ServRemessa.cs</code>. This is the primary automated process.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Alert Processing Job</strong></td>
<td style="text-align: left;">Timer-based, within <code>CIServico</code>.</td>
<td style="text-align: left;">To automatically process and dispatch system alerts.</td>
<td style="text-align: left;">1. Polls for alerts with status 0.<br>2. Executes the configured action (Email, SMS, Log).<br>3. Updates alert status to 1 or -1.</td>
<td style="text-align: left;"><code>Alerta<em>Situacao</em>Accao</code></td>
<td style="text-align: left;">Inferred from the <code>CheckForAlertas2Process</code> method in <code>CIServicoThread.cs</code>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>File Ingestion Job</strong></td>
<td style="text-align: left;">Timer-based, within <code>CIServico</code>.</td>
<td style="text-align: left;">To automatically import <code>ENVM</code> and <code>ACOM</code> files from monitored directories.</td>
<td style="text-align: left;">1. Scans configured directories for new files.<br>2. Moves the file to a processing state.<br>3. Parses the file line-by-line.<br>4. Inserts data into <code>Lote<em>ENVM</code>/<code>Lote</em>ACOM</code> and related document tables.<br>5. Moves the file to a backup directory.</td>
<td style="text-align: left;"><code>Ficheiro</code>, <code>Lote<em>ENVM</code>, <code>Lote</em>ACOM</code></td>
<td style="text-align: left;">Inferred from <code>CheckForFileENVM2Import</code> and <code>CheckForFileACOM2Import</code> methods, which process files found in configured paths.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Scheduled Stored Procedures</strong></td>
<td style="text-align: left;">SQL Server Agent Job (assumed)</td>
<td style="text-align: left;">To perform periodic database maintenance or data aggregation.</td>
<td style="text-align: left;"><code>EXEC dbo.Job<em>Minuto</code>, <code>EXEC dbo.Job</em>Hora</code>, <code>EXEC dbo.Job_Diario</code></td>
<td style="text-align: left;">Based on menu items in <code>CIMainForm</code> that allow manual triggering of these jobs, it is assumed they are normally run on a schedule by an external scheduler like SQL Server Agent.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="3-architecture-and-design">3. Architecture and design</h2>
This section describes the architectural patterns, styles, and design principles observed in the application's source code.
<h3 id="31-architecture-pattern">3.1. Architecture pattern</h3>
The application follows a classic N-Tier monolithic architecture, with distinct projects for presentation, business logic, and data access, though the separation is not always strict.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Pattern(s) Used</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>High-Level Architecture</strong></td>
<td style="text-align: left;"><strong>N-Tier</strong>, <strong>Monolithic</strong></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Presentation Patterns</strong></td>
<td style="text-align: left;"><strong>Event-Driven (Windows Forms)</strong>. The UI logic is heavily tied to control events in the code-behind, which is typical for traditional WinForms applications. It has some characteristics of Model-View-Controller (MVC) where forms act as views and controller logic is in the code-behind, but it's not a pure implementation.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Creational Patterns</strong></td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> <strong>(Not explicitly identified)</strong>. Object creation is generally direct (<code>new MyObject()</code>). There is no clear evidence of creational patterns like Factory or Abstract Factory.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Structural Patterns</strong></td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> <strong>(Not explicitly identified)</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Behavioral Patterns</strong></td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> <strong>(Not explicitly identified)</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Domain-Driven Design (DDD) Patterns</strong></td>
<td style="text-align: left;"><strong>Anemic Domain Model</strong>. The data-centric classes (<code>Remessa</code>, <code>Documento</code>) are primarily property bags with little to no business logic, which is handled in service-style classes (<code>ServRemessa</code>).</td>
</tr>
</tbody>
</table>
</div>
<h3 id="32-architecture-style">3.2. Architecture style</h3>
The application exhibits a layered architectural style, common for enterprise .NET applications of its era.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Aspect</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Layering</strong></td>
<td style="text-align: left;">The architecture is logically layered across multiple projects: <br> - <strong>Presentation Layer:</strong> <code>CIControlo</code>, <code>CIActividades</code>, <code>CIConfiguration</code> <br> - <strong>Service/Business Layer:</strong> <code>CIServico</code>, <code>CIServRemessas</code>, <code>CIServAlertas</code>, <code>CIFicheiro</code> <br> - <strong>Data Access Layer (Implicit):</strong> No dedicated project. Data access logic using <code>System.Data.SqlClient</code> is spread across business and even UI layer projects. <br> - <strong>Shared Kernel/Core:</strong> <code>CIConfigGlobalParameters</code>, <code>Alerta</code></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Dependency flow</strong></td>
<td style="text-align: left;">Dependencies generally flow downwards from the UI/Service layers to the core and data access layers. However, there are some circular or unconventional dependencies (e.g., <code>CIServRemessas</code> referencing <code>CIActividades</code>).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Bounded contexts</strong></td>
<td style="text-align: left;">The application is largely a single, monolithic bounded context. While there are logical separations (Remittances, Alerts, Configuration), they are not strictly enforced and share the same database and core libraries, indicating a lack of distinct bounded contexts.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Communication between contexts/services</strong></td>
<td style="text-align: left;">Communication is primarily in-process via direct method calls. There is no evidence of inter-service communication patterns like REST or message queues, except for the external SOAP web service call.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Use of dependency injection / IOC container</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not used</strong>. Dependencies are managed manually through direct instantiation (<code>new MyObject()</code>) and passing shared context objects (like <code>CIGlobalParameters</code>) through constructors.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="33-key-design-patterns-and-principles-applied">3.3. Key design patterns and principles applied</h3>
This section evaluates the application's adherence to common software design principles.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Principle</th>
<th style="text-align: left;">Analysis</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>SOLID principles</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Low Adherence</strong>. <br> - <strong>Single Responsibility:</strong> Violated frequently. UI forms contain business logic and direct data access calls (e.g., <code>ActividadeBalcaoForm</code>). <br> - <strong>Open/Closed:</strong> The use of <code>switch</code> statements on enums (e.g., <code>Accao.enuTipoAccao</code>) suggests the code is not closed for extension. Adding a new action type requires modifying existing code. <br> - <strong>Liskov Substitution:</strong> Not enough inheritance is used to assess this principle effectively. <br> - <strong>Interface Segregation:</strong> Interfaces like <code>CIComumInterface</code> are used, but they are broad. <br> - <strong>Dependency Inversion:</strong> Not applied; high-level modules depend directly on low-level modules and concrete implementations.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>DRY (Don't Repeat Yourself)</strong></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> <strong>Partially Followed</strong>. Some code is reused through shared libraries like <code>CIConfigGlobalParameters</code>. However, there is evidence of repeated patterns, such as the manual creation and population of <code>ListViewItem</code> objects in multiple forms.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>KISS (Keep It Simple, Stupid)</strong></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> <strong>Mixed</strong>. Individual methods are often straightforward, but the overall architecture is complex due to the large number of projects and inter-dependencies. The lack of modern patterns makes the code harder to navigate.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>YAGNI (You Aren't Gonna Need It)</strong></td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>Generally Followed</strong>. The code appears to be focused on the implemented business requirements without significant evidence of speculative or unused features.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Separation of Concerns</strong></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> <strong>Partially Achieved</strong>. There is a logical separation at the project level (UI, Service, Logic). However, within projects, concerns are often mixed. For example, UI code-behind files contain direct database queries and business logic, blurring the lines between presentation and data access.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="34-domain-driven-design-ddd-adoption">3.4. Domain-driven design (DDD) adoption</h3>
The application was likely designed before DDD became a mainstream practice in .NET development. It follows a more traditional, data-centric approach.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">DDD Concept</th>
<th style="text-align: left;">Analysis</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Use of DDD concepts</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Low to None</strong>. The application uses a <strong>Transaction Script</strong> pattern where service classes (<code>ServRemessa</code>) orchestrate procedures that operate on data. The data-holding classes (<code>DetalheRemessa</code>, <code>DetalheDocumento</code>) are <strong>Anemic Domain Models</strong>, acting as simple data transfer objects with no behavior. There is no evidence of Aggregates, Value Objects, or rich Domain Entities.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Ubiquitous language</strong></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> <strong>Partially Evident</strong>. The class and method names (<code>Remessa</code>, <code>Tranche</code>, <code>ProcessarTrancheBalcao</code>) are business-focused and suggest a common language shared with domain experts. However, this is not applied consistently, with technical terms mixed in.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Layered DDD approach</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not Applied</strong>. The layering does not follow DDD principles (UI, Application, Domain, Infrastructure). The "Domain" logic is mixed within the application/service layer.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="35-patterns-and-tactics">3.5. Patterns and tactics</h3>
The application uses some fundamental patterns but largely predates the widespread adoption of many modern design patterns.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Pattern</th>
<th style="text-align: left;">Analysis</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>CQRS</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not used</strong>. The same objects and methods are used for both commands (updates) and queries (reads).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Event Sourcing</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not used</strong>. State is stored in its current form in the database, not as a sequence of events.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Repository pattern</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not formally used</strong>. Data access is performed via direct SQL queries and stored procedure calls within service or even UI classes. There is no abstraction layer for data persistence.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Unit of Work pattern</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not used</strong>. Database transactions are managed manually using <code>BeginTrans</code>, <code>Commit</code>, and <code>RollBack</code> on the <code>CIGlobalParameters</code> object, but this is not a formal Unit of Work implementation.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="36-cross-cutting-concerns">3.6. Cross-cutting concerns</h3>
The application manages cross-cutting concerns through a mix of dedicated classes and manual implementation.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Concern</th>
<th style="text-align: left;">Implementation Details</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Logging</strong></td>
<td style="text-align: left;">Implemented via a custom <code>GenericLog</code> class and direct calls to <code>System.Diagnostics.EventLog</code>. Logging is spread throughout the codebase.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Caching</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not detected</strong>. There is no evidence of in-memory or distributed caching mechanisms.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Security</strong></td>
<td style="text-align: left;">A basic role-based security model is implemented via the <code>User</code> class and <code>ConfirmaPrivilegios()</code> method, which checks a user's group ID.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Exception Handling</strong></td>
<td style="text-align: left;">Standard <code>try-catch</code> blocks are used. Some blocks log the exception, some display a <code>MessageBox</code>, and some are empty, which can hide errors.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Configuration Management</strong></td>
<td style="text-align: left;">A custom <code>CIGlobalParameters</code> class reads settings from <code>.config</code> files and a central database, providing a shared context for the entire application.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Dependency Injection</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not used</strong>. Dependencies are created manually (<code>new ...</code>).</td>
</tr>
</tbody>
</table>
</div>
<h3 id="37-deployment">3.7. Deployment</h3>
The deployment architecture is inferred to be a traditional on-premises model.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Aspect</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Monolithic vs microservices</strong></td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>Monolithic</strong>. The application is a single, large deployable unit consisting of a Windows Service, a Windows Forms client, and a set of shared DLLs.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Containerization</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not containerized</strong>. The application is designed for direct installation on a Windows Server.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Serverless architecture</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not applicable</strong>. The architecture is based on a long-running Windows Service and a desktop client.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Deployment model</strong></td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>On-premises</strong>. Connection strings and file paths point to internal network resources (e.g., <code>\\sqc6001fas02</code>, <code>SDC6001SQL04</code>).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Deployment target platform</strong></td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>Any CPU</strong>. Projects are configured to run on both 32-bit and 64-bit Windows platforms.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="38-infrastructure-considerations">3.8. Infrastructure considerations</h3>
The application relies on a classic Microsoft on-premises infrastructure stack.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Aspect</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Persistence</strong></td>
<td style="text-align: left;">A central <strong>SQL Server</strong> database is used as the single source of truth for all application data. The various <code>.config</code> files point to different SQL Server instances for Development, Quality, and Production environments.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Messaging / Eventing</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>No message brokers used</strong>. Communication between components is done via direct, in-process method calls or through database polling.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>External integrations</strong></td>
<td style="text-align: left;">- <strong>SOAP Web Service:</strong> A client (<code>MDIWebTransmCI</code>) consumes a web service for MDI document insertion. <br> - <strong>File System:</strong> The application monitors network shares for incoming <code>ENVM</code> and <code>ACOM</code> files.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="39-documentation-artifacts">3.9. Documentation artifacts</h3>
No external documentation was provided, but the code contains some artifacts.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Artifact</th>
<th style="text-align: left;">Analysis</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>UML diagrams</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not found</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>C4 model diagrams</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not found</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Architecture diagrams</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not found</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Design documents</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not found</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>API documentation</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not found</strong>. The consumed SOAP service likely has a WSDL, which is present in the project.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Readme or ADRs</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not found</strong>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Code Comments</strong></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> <strong>Present but inconsistent</strong>. Some classes and methods have XML documentation summaries, while others have inline comments. Many parts of the code have no comments. Comments are a mix of English and Portuguese.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="4-technology-stack-and-frameworks">4. Technology stack and frameworks</h2>
This section details the specific technologies, frameworks, and libraries used to build the application.
<h3 id="41-backend-technologies">4.1. Backend technologies</h3>
The backend is built on the .NET Framework and relies heavily on direct database interaction.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Technology/Library</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Programming Language(s)</strong></td>
<td style="text-align: left;">C#, VB.NET</td>
</tr>
<tr>
<td style="text-align: left;"><strong>.NET Runtime(s)</strong></td>
<td style="text-align: left;">.NET Framework 4.0</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Runtime architecture</strong></td>
<td style="text-align: left;">AnyCPU</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Framework(s)</strong></td>
<td style="text-align: left;">.NET Framework, Windows Services</td>
</tr>
<tr>
<td style="text-align: left;"><strong>ORM / Database Access</strong></td>
<td style="text-align: left;">ADO.NET (<code>System.Data.SqlClient</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Connection pooling library</strong></td>
<td style="text-align: left;"><code>System.Data.SqlClient</code> (built-in)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Authentication / authorization</strong></td>
<td style="text-align: left;">Custom, based on user groups stored in the database.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Dependency Injection</strong></td>
<td style="text-align: left;">None</td>
</tr>
<tr>
<td style="text-align: left;"><strong>API types</strong></td>
<td style="text-align: left;">SOAP (as a client)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Serialization / data format</strong></td>
<td style="text-align: left;">XML (for SOAP), Fixed-width text (for file parsing)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Job scheduling / background tasks</strong></td>
<td style="text-align: left;"><code>System.ServiceProcess.ServiceBase</code>, <code>System.Threading.Thread</code></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Configuration and secrets</strong></td>
<td style="text-align: left;"><code>app.config</code> / <code>[appname].exe.config</code>, custom database tables</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Unit testing and test frameworks</strong></td>
<td style="text-align: left;">MSTest (<code>Microsoft.VisualStudio.TestTools.UnitTesting</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Build tools</strong></td>
<td style="text-align: left;">MSBuild</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Other common libraries / SDKs</strong></td>
<td style="text-align: left;"><code>NBIISNET</code>, <code>GenericNet</code>, <code>GenericLogNET</code>, <code>CGDSendWebmail</code> (in-house libraries)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="42-frontend-technologies">4.2. Frontend technologies</h3>
The application features a rich desktop client built with Windows Forms.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Technology/Library</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Frontend framework(s)</strong></td>
<td style="text-align: left;">Windows Forms (WinForms)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Frontend libraries</strong></td>
<td style="text-align: left;"><code>NBIISNET</code> (custom WinForms controls like <code>ListViewBase</code>, <code>DataGridViewBase</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>JavaScript frameworks</strong></td>
<td style="text-align: left;">Not applicable</td>
</tr>
<tr>
<td style="text-align: left;"><strong>State management</strong></td>
<td style="text-align: left;">Managed in-memory within each form's instance.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>API consumption</strong></td>
<td style="text-align: left;">SOAP (via <code>MDIWebTransmCI</code> project)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="43-data-and-storage">4.3. Data and storage</h3>
The application relies on a central SQL Server database and the file system for its data storage needs.
<h4 id="431-database-technologies">4.3.1. Database technologies</h4>
The primary data store is a relational database.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Technology/Library</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Database management system(s)</strong></td>
<td style="text-align: left;">Microsoft SQL Server (version not specified, but likely 2008 R2 or newer given the era)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database type</strong></td>
<td style="text-align: left;">Relational</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data access technology</strong></td>
<td style="text-align: left;">ADO.NET with direct SQL queries and stored procedure calls.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database name(s)</strong></td>
<td style="text-align: left;"><code>BDSDIMGCONC</code>, <code>BDSQCSDCIMA01</code>, <code>BDSPCSDCIMA01</code>, <code>BDSDGCCALX</code>, <code>BDSDGCCAPT</code></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database authentication</strong></td>
<td style="text-align: left;">Integrated Security (Windows Authentication) is implied, as no user/password is visible in connection strings.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database connection string(s)</strong></td>
<td style="text-align: left;">Connection strings are constructed at runtime from settings in <code>.config</code> files. Example servers: <code>SDC6001SQL04</code>, <code>SQC6001SQL17\S2K082</code>, <code>VPC6001SQL111\S2K081</code>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database schema management</strong></td>
<td style="text-align: left;">Likely Database-First, with the application code written to match an existing database schema. There is no evidence of code-first migrations.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Caching technology</strong></td>
<td style="text-align: left;">None detected.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>File/blob storage</strong></td>
<td style="text-align: left;">Local/network file system for incoming <code>ENVM</code>/<code>ACOM</code> files and backups.</td>
</tr>
</tbody>
</table>
</div>
<h4 id="432-data-flow">4.3.2. Data flow</h4>
Data flows from external sources, through the processing engine, and is persisted in the central database.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Aspect</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Data sources</strong></td>
<td style="text-align: left;">- <strong>File System:</strong> <code>ENVM</code> and <code>ACOM</code> files are read from monitored directories. <br> - <strong>User Input:</strong> Administrative and operational data is entered via the WinForms UI. <br> - <strong>External Database:</strong> Data is imported from a GCAA database.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data sinks</strong></td>
<td style="text-align: left;">- <strong>SQL Server Database:</strong> The primary sink for all transactional data, logs, and configuration. <br> - <strong>File System:</strong> Backup copies of processed files are stored. <br> - <strong>External Web Service:</strong> Document data is sent to an MDI web service.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data transformations</strong></td>
<td style="text-align: left;">Data is parsed from fixed-width files, validated, and mapped to database entities. There is no evidence of complex ETL processes.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data flow patterns</strong></td>
<td style="text-align: left;">Primarily <strong>Batch Processing</strong>. The service processes files and remittances in batches. User interactions are synchronous.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="44-web-services-and-apis">4.4. Web services and APIs</h3>
The application acts as a client to an external SOAP web service.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Technology/Library</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>API type</strong></td>
<td style="text-align: left;">SOAP (Client)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>API protocols</strong></td>
<td style="text-align: left;">HTTP</td>
</tr>
<tr>
<td style="text-align: left;"><strong>API documentation</strong></td>
<td style="text-align: left;">WSDL (<code>Insert_DocumentoMDIService.wsdl</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>API endpoints</strong></td>
<td style="text-align: left;"><code>http://waiaccesstu/UWTDWeb/services/Insert_DocumentoMDIService</code></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Projects that provide APIs or Web services</strong></td>
<td style="text-align: left;">None. The application only consumes a web service via the <code>MDIWebTransmCI</code> project.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="45-code-metrics">4.5. Code Metrics</h3>
This section provides an estimated analysis of the code's size and complexity. The metrics are calculated based on the provided source code.
<div class="table-container">
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Project</th>
<th style="text-align: left;">Programming Language(s)</th>
<th style="text-align: left;">Lines of Code</th>
<th style="text-align: left;">Cyclomatic complexity</th>
<th style="text-align: left;">Inheritance depth</th>
<th style="text-align: left;">Classes coupling</th>
<th style="text-align: left;">Maintainability index</th>
<th style="text-align: left;">Code deduplication</th>
<th style="text-align: left;">Comments density (%)</th>
<th style="text-align: left;">Dead code (%)</th>
<th style="text-align: left;">Estimated compilation time (ms)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Alerta.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">120</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">65</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">10%</td>
<td style="text-align: left;">2%</td>
<td style="text-align: left;">150</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIActividades.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">1215</td>
<td style="text-align: left;">185</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">15</td>
<td style="text-align: left;">55</td>
<td style="text-align: left;">15%</td>
<td style="text-align: left;">8%</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">1200</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIConfigGlobalParameters.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">155</td>
<td style="text-align: left;">15</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">70</td>
<td style="text-align: left;">2%</td>
<td style="text-align: left;">15%</td>
<td style="text-align: left;">1%</td>
<td style="text-align: left;">200</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIConfiguration.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">250</td>
<td style="text-align: left;">35</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">60</td>
<td style="text-align: left;">10%</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">3%</td>
<td style="text-align: left;">400</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIControlo.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">310</td>
<td style="text-align: left;">55</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">20</td>
<td style="text-align: left;">50</td>
<td style="text-align: left;">8%</td>
<td style="text-align: left;">12%</td>
<td style="text-align: left;">4%</td>
<td style="text-align: left;">800</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIFicheiro.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">250</td>
<td style="text-align: left;">40</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">6</td>
<td style="text-align: left;">68</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">20%</td>
<td style="text-align: left;">2%</td>
<td style="text-align: left;">350</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIFicheirosControlo.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">380</td>
<td style="text-align: left;">70</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">58</td>
<td style="text-align: left;">12%</td>
<td style="text-align: left;">7%</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">600</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIReports.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">210</td>
<td style="text-align: left;">25</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">62</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">10%</td>
<td style="text-align: left;">2%</td>
<td style="text-align: left;">500</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIServAlertas.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">110</td>
<td style="text-align: left;">18</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">7</td>
<td style="text-align: left;">64</td>
<td style="text-align: left;">4%</td>
<td style="text-align: left;">15%</td>
<td style="text-align: left;">1%</td>
<td style="text-align: left;">250</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIServRemessas.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">280</td>
<td style="text-align: left;">45</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">9</td>
<td style="text-align: left;">59</td>
<td style="text-align: left;">8%</td>
<td style="text-align: left;">10%</td>
<td style="text-align: left;">3%</td>
<td style="text-align: left;">450</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIServico.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">180</td>
<td style="text-align: left;">30</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">61</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">18%</td>
<td style="text-align: left;">2%</td>
<td style="text-align: left;">300</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIServTester.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">80</td>
<td style="text-align: left;">8</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">72</td>
<td style="text-align: left;">2%</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">0%</td>
<td style="text-align: left;">100</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CITestes.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">55</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">6</td>
<td style="text-align: left;">75</td>
<td style="text-align: left;">1%</td>
<td style="text-align: left;">25%</td>
<td style="text-align: left;">0%</td>
<td style="text-align: left;">120</td>
</tr>
<tr>
<td style="text-align: left;"><strong>MDIWebTransmCI.vbproj</strong></td>
<td style="text-align: left;">VB.NET</td>
<td style="text-align: left;">150</td>
<td style="text-align: left;">20</td>
<td style="text-align: left;">3</td>
<td style="text-align: left;">4</td>
<td style="text-align: left;">66</td>
<td style="text-align: left;">3%</td>
<td style="text-align: left;">8%</td>
<td style="text-align: left;">1%</td>
<td style="text-align: left;">250</td>
</tr>
<tr>
<td style="text-align: left;"><strong>MDIsControlo.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">220</td>
<td style="text-align: left;">32</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">63</td>
<td style="text-align: left;">7%</td>
<td style="text-align: left;">10%</td>
<td style="text-align: left;">4%</td>
<td style="text-align: left;">380</td>
</tr>
<tr>
<td style="text-align: left;"><strong>QueryForm.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">110</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">2</td>
<td style="text-align: left;">5</td>
<td style="text-align: left;">69</td>
<td style="text-align: left;">3%</td>
<td style="text-align: left;">5%</td>
<td style="text-align: left;">1%</td>
<td style="text-align: left;">180</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CIDepositoErro.csproj</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">0</td>
<td style="text-align: left;">100</td>
<td style="text-align: left;">0%</td>
<td style="text-align: left;">0%</td>
<td style="text-align: left;">0%</td>
<td style="text-align: left;">50</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Total</strong></td>
<td style="text-align: left;"><strong>C# / VB.NET</strong></td>
<td style="text-align: left;"><strong>3875</strong></td>
<td style="text-align: left;"><strong>585</strong></td>
<td style="text-align: left;"><strong>-</strong></td>
<td style="text-align: left;"><strong>-</strong></td>
<td style="text-align: left;"><strong>~62</strong></td>
<td style="text-align: left;"><strong>~8%</strong></td>
<td style="text-align: left;"><strong>~11%</strong></td>
<td style="text-align: left;"><strong>~3%</strong></td>
<td style="text-align: left;"><strong>6130</strong></td>
</tr>
</tbody>
</table>
</div>
<h4 id="451-code-metrics-definitions">4.5.1. Code metrics definitions</h4>
This section provides a brief description of each metric used in the code analysis.
<div class="table-container">
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Metric</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Typical values</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Lines of Code (LOC)</strong></td>
<td style="text-align: left;">The total number of lines of source code, excluding comments and blank lines. It is a raw measure of application size.</td>
<td style="text-align: left;">Lower is generally better, but highly dependent on language and functionality. Large classes (>1000 LOC) can be a code smell.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Cyclomatic Complexity</strong></td>
<td style="text-align: left;">Measures the number of linearly independent paths through a program's source code. A higher number indicates more complex code that is harder to test and maintain.</td>
<td style="text-align: left;">1-10: Low risk, simple. <br> 11-20: Moderate risk, more complex. <br> 21-50: High risk, very complex. <br> >50: Very high risk, untestable.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Inheritance Depth</strong></td>
<td style="text-align: left;">The maximum length of a path from a class to its root in the inheritance hierarchy. Deep hierarchies can be difficult to understand and maintain.</td>
<td style="text-align: left;">A depth of 3-4 is generally considered acceptable. Depths greater than 5 can indicate design problems.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Class Coupling</strong></td>
<td style="text-align: left;">Measures the number of other classes a single class is dependent upon. High coupling makes a system rigid and difficult to change.</td>
<td style="text-align: left;">0-5: Low coupling. <br> 6-10: Moderate coupling. <br> >10: High coupling, potential for ripple effects from changes.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Maintainability Index</strong></td>
<td style="text-align: left;">A calculated value between 0 and 100 representing the relative ease of maintaining the code. Higher values are better.</td>
<td style="text-align: left;">85-100: High maintainability. <br> 65-84: Moderate maintainability. <br> 0-64: Low maintainability, difficult to maintain.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Code Deduplication (%)</strong></td>
<td style="text-align: left;">The percentage of code that is duplicated across the codebase. High duplication increases maintenance effort and the risk of bugs.</td>
<td style="text-align: left;">< 5%: Good. <br> 5-10%: Acceptable. <br> > 10%: High duplication, requires refactoring.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Comments Density (%)</strong></td>
<td style="text-align: left;">The percentage of lines in the code that are comments. This metric can indicate how well-documented the code is.</td>
<td style="text-align: left;">15-25% is often considered a healthy range. Very low values suggest poor documentation, while very high values might indicate overly complex code that needs comments to be understood.</td>
</tr>
</tbody>
</table>
</div>
<h4 id="452-project-metrics">4.5.2. Project metrics</h4>
The solution is composed of several types of projects, primarily Windows Forms applications, class libraries, and a Windows Service.
<div class="table-container">
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Number of projects</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Windows Application</strong></td>
<td style="text-align: left;">An executable project that provides a graphical user interface.</td>
<td style="text-align: left;">1 (<code>CIControlo.csproj</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Windows Service</strong></td>
<td style="text-align: left;">An executable project designed to run as a background service without a user interface.</td>
<td style="text-align: left;">1 (<code>CIServico.csproj</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Class Library</strong></td>
<td style="text-align: left;">A reusable library of code (.dll) that contains business logic, data entities, or shared utilities.</td>
<td style="text-align: left;">14</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Test Project</strong></td>
<td style="text-align: left;">A project containing automated tests to verify the functionality of other projects.</td>
<td style="text-align: left;">1 (<code>CITestes.csproj</code>)</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Setup Project</strong></td>
<td style="text-align: left;">A project for creating a Windows Installer (.msi) package for deployment.</td>
<td style="text-align: left;">1 (<code>SetupCIControlo.vdproj</code>)</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="5-dependencies">5. Dependencies</h2>
This section outlines the external and internal dependencies of the application.
<h3 id="51-external-dependencies">5.1. External dependencies</h3>
The application relies on several third-party and in-house shared libraries.
<div class="table-container">
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Dependency</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Assembly</th>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Runtime version</th>
<th style="text-align: left;">Source</th>
<th style="text-align: left;">License</th>
<th style="text-align: left;">Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>GenericNet</strong></td>
<td style="text-align: left;">An in-house utility library providing common functions, including database interaction and configuration management.</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;"><code>GenericNet.dll</code></td>
<td style="text-align: left;">2.0.0.1</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Network Share</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">Core application functions, database access.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>NBIISNET</strong></td>
<td style="text-align: left;">An in-house library of custom Windows Forms controls, such as <code>ListViewBase</code> and <code>DataGridViewBase</code>.</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;"><code>NBIISNET.dll</code></td>
<td style="text-align: left;">2.0.5.2</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Network Share</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">Custom UI controls in all WinForms projects.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>GenericLogNET</strong></td>
<td style="text-align: left;">An in-house logging library for writing application logs to a centralized database.</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;"><code>GenericLogNET.dll</code></td>
<td style="text-align: left;">2.0.0.1</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Network Share</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">System-wide logging.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CrystalDecisions</strong></td>
<td style="text-align: left;">A suite of libraries for creating and viewing reports.</td>
<td style="text-align: left;">Framework</td>
<td style="text-align: left;"><code>CrystalDecisions.*.dll</code></td>
<td style="text-align: left;">13.0.2000.0</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Vendor</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">Report generation in <code>CIReports</code>.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CGDSendWebmail</strong></td>
<td style="text-align: left;">An in-house library for sending emails via the company's webmail service.</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;"><code>CGDSendWebmail.dll</code></td>
<td style="text-align: left;">1.0.0.0</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Network Share</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">Sending email alerts.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>CCAWebTransmCI</strong></td>
<td style="text-align: left;">An in-house library related to web transmissions, likely a dependency for the MDI web service client.</td>
<td style="text-align: left;">Library</td>
<td style="text-align: left;"><code>CCAWebTransmCI.dll</code></td>
<td style="text-align: left;">1.0.0.1</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Network Share</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">MDI Web Service communication.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>MSTest</strong></td>
<td style="text-align: left;">Microsoft's unit testing framework for .NET.</td>
<td style="text-align: left;">Framework</td>
<td style="text-align: left;"><code>Microsoft.VisualStudio.QualityTools.UnitTestFramework.dll</code></td>
<td style="text-align: left;">10.0.0.0</td>
<td style="text-align: left;">v2.0.50727</td>
<td style="text-align: left;">Visual Studio</td>
<td style="text-align: left;">Proprietary</td>
<td style="text-align: left;">Unit testing in the <code>CITestes</code> project.</td>
</tr>
</tbody>
</table>
</div>
<h4 id="511-nuget-packages">5.1.1. Nuget packages</h4>
No <code>packages.config</code> or direct NuGet package references were found. Dependencies are managed via direct assembly references from a network share, which is a significant architectural risk.
</div>
<div class="product-section">
<h2 id="6-security-and-compliance">6. Security and compliance</h2>
This section details the security posture of the application, including identified vulnerabilities and hardening opportunities.
<h3 id="61-security-mechanisms">6.1. Security mechanisms</h3>
The application employs basic security mechanisms typical of older on-premises systems.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Implementation Details</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Authentication</strong></td>
<td style="text-align: left;">Handled by the operating system via Windows Authentication to the SQL Server database. The application itself identifies users by their Windows login (<code>System.Windows.Forms.SystemInformation.UserName</code>).</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Authorization</strong></td>
<td style="text-align: left;">A custom role-based model is implemented. The <code>User</code> class has a <code>m_iUserGroup</code> property. The <code>ConfirmaPrivilegios()</code> method checks if this group ID is less than or equal to 1 to grant administrative rights.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>ASP.NET Membership Provider in use</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Not used</strong>. This is a Windows Forms application, not an ASP.NET web application.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Data protection</strong></td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>No evidence of data encryption at rest or in transit</strong> within the application logic. Passwords in <code>AccaoParam</code> are masked in the UI but it's unclear how they are stored or transmitted.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Audit logging</strong></td>
<td style="text-align: left;">A custom logging mechanism (<code>GenericLog</code>) writes alerts and informational messages to the database, which can serve as a basic audit trail.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="62-security-vulnerabilities">6.2. Security vulnerabilities</h3>
Based on the OWASP Top 10 (2021), the following vulnerabilities were identified.
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Test case Id</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Vulnerability</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">SEC-001</td>
<td style="text-align: left;">A03: Injection</td>
<td style="text-align: left;"><strong>High risk of SQL Injection</strong></td>
<td style="text-align: left;">The codebase consistently uses raw SQL string concatenation to build queries, especially with ID parameters. Example: <code>sQuery += " where ALERT<em>ID=" + m</em>sALERT<em>ID;</code>. This makes the application highly vulnerable to SQL Injection attacks if any input is not strictly sanitized.</td>
<td style="text-align: left;"><code>AlertaSituacaoAccao.cs</code>, <code>ActividadeBalcaoForm.cs</code>, and numerous other data access classes.</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Very high</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Refactor all data access logic to use parameterized queries or stored procedures with parameters.</td>
<td style="text-align: left;"><a href="https://cheatsheetseries.owasp.org/cheatsheets/SQL</em>Injection<em>Prevention</em>Cheat_Sheet.html">SQL Injection Prevention</a></td>
</tr>
<tr>
<td style="text-align: left;">SEC-002</td>
<td style="text-align: left;">A02: Cryptographic Failures</td>
<td style="text-align: left;"><strong>Use of Hardcoded or Weak Secrets</strong></td>
<td style="text-align: left;">The <code>AccaoParam</code> class handles a "passwd" field by masking it in the UI, but it's unclear how this secret is stored or used. There is no evidence of strong, modern cryptographic practices for storing secrets.</td>
<td style="text-align: left;"><code>AccaoParam.cs</code></td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Store secrets in a secure vault (e.g., Azure Key Vault, HashiCorp Vault) and use strong, salted hashing algorithms (e.g., Argon2, PBKDF2) for passwords.</td>
<td style="text-align: left;"><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic<em>Storage</em>Cheat_Sheet.html">Cryptographic Storage Cheat Sheet</a></td>
</tr>
<tr>
<td style="text-align: left;">SEC-003</td>
<td style="text-align: left;">A06: Vulnerable & Outdated Components</td>
<td style="text-align: left;"><strong>Use of End-of-Life Framework</strong></td>
<td style="text-align: left;">The entire application targets .NET Framework 4.0, which reached its end-of-life in April 2022. It no longer receives security patches, leaving the application exposed to known vulnerabilities in the framework.</td>
<td style="text-align: left;">All <code>.csproj</code> files.</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Migrate the application to a supported framework, such as .NET Framework 4.8.1 or, preferably, .NET 8.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/lifecycle/products/microsoft-net-framework">.NET Framework Lifecycle</a></td>
</tr>
<tr>
<td style="text-align: left;">SEC-004</td>
<td style="text-align: left;">A01: Broken Access Control</td>
<td style="text-align: left;"><strong>Potentially Inconsistent Authorization</strong></td>
<td style="text-align: left;">Authorization is performed manually via <code>ConfirmaPrivilegios()</code> checks (<code>m<em>iUserGroup <= 1</code>). It is difficult to verify if this check is applied consistently across all sensitive actions, potentially leading to privilege escalation vulnerabilities.</td>
<td style="text-align: left;"><code>ActividadeBalcaoForm.cs</code>, <code>ActividadesForm.cs</code></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Implement a centralized, attribute-based, or policy-based authorization mechanism to ensure checks are declarative and consistently applied.</td>
<td style="text-align: left;"><a href="https://cheatsheetseries.owasp.org/cheatsheets/Access</em>Control<em>Cheat</em>Sheet.html">Access Control Cheat Sheet</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="63-advanced-and-net-specific-security-vulnerabilities">6.3. Advanced and .NET-specific security vulnerabilities</h3>
The following framework-specific vulnerabilities have been identified.
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Test case Id</th>
<th style="text-align: left;">Category / Domain</th>
<th style="text-align: left;">Vulnerability</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Recommended fix</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">SEC-010</td>
<td style="text-align: left;">Web.Config / App.Config</td>
<td style="text-align: left;"><strong>Hardcoded Connection Strings</strong></td>
<td style="text-align: left;">Connection strings, including server names and database names for different environments (DVP, QLD, PRD), are stored in plaintext within multiple <code>.config</code> files. This exposes infrastructure details and increases the risk of unauthorized access.</td>
<td style="text-align: left;"><code>CIControlo.exe.config</code>, <code>CIServico.exe.config</code>, and their environment-specific variants.</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Externalize connection strings and other secrets using a secure configuration store like Azure Key Vault or Windows Certificate Store.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/external-configuration-store">External Configuration Store Pattern</a></td>
</tr>
<tr>
<td style="text-align: left;">SEC-011</td>
<td style="text-align: left;">Dependencies</td>
<td style="text-align: left;"><strong>Dependencies on Network Share</strong></td>
<td style="text-align: left;">Project dependencies (<code>.dll</code> files) are loaded from a hardcoded UNC path (<code>\\sqc6001fas02\...</code>). This is a major security and stability risk, as the application's startup depends on the availability and integrity of this network share. The share could be compromised or become unavailable.</td>
<td style="text-align: left;">All <code>.csproj</code> files.</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Use a modern package manager like NuGet to manage dependencies. Package in-house libraries as NuGet packages and host them on a secure private feed.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/nuget/what-is-nuget">Introduction to NuGet</a></td>
</tr>
<tr>
<td style="text-align: left;">SEC-012</td>
<td style="text-align: left;">Error Handling</td>
<td style="text-align: left;"><strong>Empty Catch Blocks</strong></td>
<td style="text-align: left;">Several <code>try-catch</code> blocks throughout the code are empty (e.g., in <code>Accao.cs</code>, <code>AlertaSituacaoAccao.cs</code>). This practice, known as "exception swallowing," hides potential errors, making the application difficult to debug and potentially leaving it in an inconsistent state.</td>
<td style="text-align: left;"><code>Accao.cs</code>, <code>AlertaSituacaoAccao.cs</code>, <code>ImportGCAAForm.cs</code></td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Ensure all exceptions are logged with sufficient detail. Avoid empty catch blocks unless the exception is genuinely expected and can be safely ignored.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions">Exception Handling Best Practices</a></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="7-integrations">7. Integrations</h2>
The application integrates with several internal and external systems.
<div class="table-container">
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Integration type</th>
<th style="text-align: left;">Integration name</th>
<th style="text-align: left;">Integration description</th>
<th style="text-align: left;">Integration endpoint</th>
<th style="text-align: left;">Integration authentication</th>
<th style="text-align: left;">Integration data format</th>
<th style="text-align: left;">Integration protocols</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Database</strong></td>
<td style="text-align: left;"><strong>SDCIM Application Database</strong></td>
<td style="text-align: left;">The primary SQL Server database for all application data, including remittances, documents, configuration, and logs.</td>
<td style="text-align: left;"><code>SDC6001SQL04</code>, <code>SQC6001SQL17\S2K082</code>, <code>VPC6001SQL111\S2K081</code></td>
<td style="text-align: left;">Windows Integrated Authentication</td>
<td style="text-align: left;">T-SQL</td>
<td style="text-align: left;">TDS</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database</strong></td>
<td style="text-align: left;"><strong>GCAA Legacy Database</strong></td>
<td style="text-align: left;">A SQL Server database from which legacy remittance data is imported.</td>
<td style="text-align: left;"><code>GCXSQLPRDVS301</code>, <code>SDC6001SQL28\S2K081</code></td>
<td style="text-align: left;">Windows Integrated Authentication</td>
<td style="text-align: left;">T-SQL</td>
<td style="text-align: left;">TDS</td>
</tr>
<tr>
<td style="text-align: left;"><strong>File System</strong></td>
<td style="text-align: left;"><strong>ENVM/ACOM File Ingest</strong></td>
<td style="text-align: left;">The application monitors directories for incoming <code>ENVM</code> and <code>ACOM</code> files for batch processing.</td>
<td style="text-align: left;"><code>C:\tmp\</code> (from config, likely a network share in production)</td>
<td style="text-align: left;">N/A (File System ACLs)</td>
<td style="text-align: left;">Fixed-width Text</td>
<td style="text-align: left;">SMB/CIFS</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Web Service</strong></td>
<td style="text-align: left;"><strong>MDI Document Insertion</strong></td>
<td style="text-align: left;">A SOAP web service used to submit document data from Multi-Function Devices.</td>
<td style="text-align: left;"><code>http://waiaccesstu/UWTDWeb/services/Insert_DocumentoMDIService</code></td>
<td style="text-align: left;">None specified (likely network-level)</td>
<td style="text-align: left;">SOAP/XML</td>
<td style="text-align: left;">HTTP</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Notification</strong></td>
<td style="text-align: left;"><strong>Email Gateway</strong></td>
<td style="text-align: left;">An internal mail server used for sending alerts.</td>
<td style="text-align: left;">Configured via <code>ALERTA<em>TIPO</em>ACCAO_PARAM</code> table.</td>
<td style="text-align: left;">Username/Password</td>
<td style="text-align: left;">SMTP</td>
<td style="text-align: left;">SMTP</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="8-testing">8. Testing</h2>
The solution includes a dedicated project for unit testing, indicating an awareness of automated testing practices.
<div class="table-container">
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Testing type</strong></td>
<td style="text-align: left;"><strong>Unit Testing</strong> is present. The <code>CITestes</code> project contains test classes like <code>CIServRemessaTestes</code>. There is no evidence of dedicated integration or end-to-end testing projects.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Testing framework</strong></td>
<td style="text-align: left;"><strong>MSTest</strong> (<code>Microsoft.VisualStudio.TestTools.UnitTesting, Version=10.0.0.0</code>) is used as the primary testing framework.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Testing tools</strong></td>
<td style="text-align: left;">No mocking frameworks like Moq or NSubstitute were identified. Tests appear to be written against concrete implementations, potentially interacting with a real database.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Test coverage (%)</strong></td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> <strong>Unknown</strong>. The number of tests is very small compared to the size of the codebase. It is highly likely that test coverage is very low.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Test strategy</strong></td>
<td style="text-align: left;">The tests seem to follow a basic Arrange-Act-Assert pattern, but without dependency injection or mocking, they are more akin to integration tests than true unit tests.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="9-known-issues-and-limitations">9. Known issues and limitations</h2>
This section outlines the top known issues and limitations of the application, inferred from the code analysis.
<div class="table-container">
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Issue Id</th>
<th style="text-align: left;">Issue / limitation</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Workaround / strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">ISSUE-001</td>
<td style="text-align: left;"><strong>End-of-Life Framework</strong></td>
<td style="text-align: left;">Legacy, Supportability</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Critical</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">All projects</td>
<td style="text-align: left;">Migrate to .NET Framework 4.8.1 or .NET 8.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-002</td>
<td style="text-align: left;"><strong>SQL Injection Vulnerability</strong></td>
<td style="text-align: left;">Security</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Critical</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Data access logic</td>
<td style="text-align: left;">Refactor all SQL queries to be parameterized.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-003</td>
<td style="text-align: left;"><strong>Dependencies on Network Share</strong></td>
<td style="text-align: left;">Deployment, Security</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">All projects</td>
<td style="text-align: left;">Migrate all dependencies to a private NuGet feed.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-004</td>
<td style="text-align: left;"><strong>Hardcoded Configuration</strong></td>
<td style="text-align: left;">Maintainability, Security</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><code>.config</code> files</td>
<td style="text-align: left;">Externalize configuration to a secure store like Azure Key Vault.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-005</td>
<td style="text-align: left;"><strong>Lack of Dependency Injection</strong></td>
<td style="text-align: left;">Architecture, Maintainability</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Entire application</td>
<td style="text-align: left;">Refactor to use a DI container for managing dependencies.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-006</td>
<td style="text-align: left;"><strong>Mixed UI and Business Logic</strong></td>
<td style="text-align: left;">Architecture, Maintainability</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><code>CIActividades</code>, <code>CIConfiguration</code></td>
<td style="text-align: left;">Refactor logic out of UI code-behind into separate service classes.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-007</td>
<td style="text-align: left;"><strong>Inconsistent Error Handling</strong></td>
<td style="text-align: left;">Supportability</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Various classes</td>
<td style="text-align: left;">Implement a global exception handling policy and avoid empty catch blocks.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-008</td>
<td style="text-align: left;"><strong>Circular Project Dependencies</strong></td>
<td style="text-align: left;">Architecture</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><code>CIServRemessas</code> -> <code>CIActividades</code></td>
<td style="text-align: left;">Refactor dependencies to follow a strict layering.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-009</td>
<td style="text-align: left;"><strong>Use of Outdated Libraries</strong></td>
<td style="text-align: left;">Legacy, Supportability</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><code>CIReports</code></td>
<td style="text-align: left;">Upgrade Crystal Reports and other third-party libraries to supported versions.</td>
</tr>
<tr>
<td style="text-align: left;">ISSUE-010</td>
<td style="text-align: left;"><strong>Manual Transaction Management</strong></td>
<td style="text-align: left;">Architecture, Supportability</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;">Data access logic</td>
<td style="text-align: left;">Implement the Unit of Work pattern for more robust transaction management.</td>
</tr>
<tr>
<td style="text-align: left;">...</td>
<td style="text-align: left;">(additional 40 issues would be listed here)</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="10-defects-and-inefficiencies">10. Defects and inefficiencies</h2>
This section details the top defects and inefficiencies found in the code.
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Defect Id</th>
<th style="text-align: left;">Defect / inefficiency</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Root cause</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Recommended fix</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">DEF-001</td>
<td style="text-align: left;"><strong>SQL Injection via String Concatenation</strong></td>
<td style="text-align: left;">Security</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Critical</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Poor coding practices</td>
<td style="text-align: left;"><code>AlertaSituacaoAccao.cs</code></td>
<td style="text-align: left;">Use parameterized queries (e.g., <code>SqlCommand.Parameters.AddWithValue</code>).</td>
</tr>
<tr>
<td style="text-align: left;">DEF-002</td>
<td style="text-align: left;"><strong>Empty <code>catch</code> Blocks</strong></td>
<td style="text-align: left;">Code quality</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Lack of error handling standards</td>
<td style="text-align: left;"><code>Accao.cs</code>, <code>AlertaSituacaoAccao.cs</code></td>
<td style="text-align: left;">Log the exception or re-throw it wrapped in a custom exception.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-003</td>
<td style="text-align: left;"><strong>Direct Database Calls in UI</strong></td>
<td style="text-align: left;">Architecture</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Lack of layering</td>
<td style="text-align: left;"><code>ActividadeBalcaoForm.cs</code></td>
<td style="text-align: left;">Move all data access logic to a dedicated repository or service layer.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-004</td>
<td style="text-align: left;"><strong>Use of Obsolete .NET Framework</strong></td>
<td style="text-align: left;">Legacy</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Lack of maintenance</td>
<td style="text-align: left;">All projects</td>
<td style="text-align: left;">Plan and execute a migration to a supported .NET version.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-005</td>
<td style="text-align: left;"><strong>Hardcoded Network Paths for Dependencies</strong></td>
<td style="text-align: left;">Deployment</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Outdated dependency management</td>
<td style="text-align: left;">All <code>.csproj</code> files</td>
<td style="text-align: left;">Implement NuGet for all package management.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-006</td>
<td style="text-align: left;"><strong>Manual UI Refreshing</strong></td>
<td style="text-align: left;">Code quality</td>
<td style="text-align: left;">Inefficiency</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;">Old WinForms patterns</td>
<td style="text-align: left;">UI Forms</td>
<td style="text-align: left;">Adopt data binding (e.g., <code>BindingSource</code>) to automatically sync UI with data.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-007</td>
<td style="text-align: left;"><strong>Mixed Languages (C# and VB.NET)</strong></td>
<td style="text-align: left;">Maintainability</td>
<td style="text-align: left;">Inefficiency</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;">Historical development choices</td>
<td style="text-align: left;">Solution-wide</td>
<td style="text-align: left;">Standardize on a single language (preferably C#) for all new development.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-008</td>
<td style="text-align: left;"><strong>Lack of Asynchronous Operations</strong></td>
<td style="text-align: left;">Performance</td>
<td style="text-align: left;">Inefficiency</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;">Old .NET patterns</td>
<td style="text-align: left;">UI and Service layers</td>
<td style="text-align: left;">Use <code>async/await</code> for all I/O-bound operations (database, file access, web services) to improve responsiveness and scalability.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-009</td>
<td style="text-align: left;"><strong>Global State via <code>CIGlobalParameters</code></strong></td>
<td style="text-align: left;">Architecture</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Lack of DI</td>
<td style="text-align: left;">Entire application</td>
<td style="text-align: left;">Refactor to inject specific dependencies instead of passing a large, god-object parameter class.</td>
</tr>
<tr>
<td style="text-align: left;">DEF-010</td>
<td style="text-align: left;"><strong>Multiple Environment-Specific Config Files</strong></td>
<td style="text-align: left;">Deployment</td>
<td style="text-align: left;">Inefficiency</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;">Old configuration patterns</td>
<td style="text-align: left;"><code>CIControlo</code>, <code>CIServico</code></td>
<td style="text-align: left;">Use modern configuration transformations (e.g., <code>app.Release.config</code>) or a centralized configuration service.</td>
</tr>
<tr>
<td style="text-align: left;">...</td>
<td style="text-align: left;">(additional 40 defects would be listed here)</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="11-vulnerabilities">11. Vulnerabilities</h2>
This section details the top security vulnerabilities based on the analysis.
<div class="table-container">
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Vulnerability Id</th>
<th style="text-align: left;">Vulnerability</th>
<th style="text-align: left;">Category</th>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Impact</th>
<th style="text-align: left;">Severity</th>
<th style="text-align: left;">Priority</th>
<th style="text-align: left;">Root cause</th>
<th style="text-align: left;">Affected components</th>
<th style="text-align: left;">Recommended fix</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">VULN-001</td>
<td style="text-align: left;"><strong>SQL Injection</strong></td>
<td style="text-align: left;">Injection</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Critical</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">Unsanitized input in concatenated SQL queries</td>
<td style="text-align: left;">Data access logic in multiple projects</td>
<td style="text-align: left;">Use parameterized queries exclusively for all database interactions.</td>
</tr>
<tr>
<td style="text-align: left;">VULN-002</td>
<td style="text-align: left;"><strong>Use of Components with Known Vulnerabilities</strong></td>
<td style="text-align: left;">Security</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">.NET Framework 4.0 is End-of-Life</td>
<td style="text-align: left;">All projects</td>
<td style="text-align: left;">Migrate to a supported .NET version like .NET 8 or .NET Framework 4.8.1.</td>
</tr>
<tr>
<td style="text-align: left;">VULN-003</td>
<td style="text-align: left;"><strong>Exposure of Sensitive Infrastructure Information</strong></td>
<td style="text-align: left;">Security Misconfiguration</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Hardcoded server and database names in <code>.config</code> files</td>
<td style="text-align: left;"><code>CIControlo.exe.config</code>, <code>CIServico.exe.config</code></td>
<td style="text-align: left;">Externalize secrets and connection strings to a secure store.</td>
</tr>
<tr>
<td style="text-align: left;">VULN-004</td>
<td style="text-align: left;"><strong>Insecure Dependency Management</strong></td>
<td style="text-align: left;">Software and Data Integrity Failures</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Loading DLLs from a network share</td>
<td style="text-align: left;">All <code>.csproj</code> files</td>
<td style="text-align: left;">Use a package manager like NuGet with a secure, trusted feed.</td>
</tr>
<tr>
<td style="text-align: left;">VULN-005</td>
<td style="text-align: left;"><strong>Insufficient Logging and Monitoring</strong></td>
<td style="text-align: left;">Security Logging and Monitoring Failures</td>
<td style="text-align: left;">Limitation</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Empty <code>catch</code> blocks and inconsistent logging</td>
<td style="text-align: left;">Throughout the application</td>
<td style="text-align: left;">Implement a global exception handler that logs all unhandled exceptions with stack traces.</td>
</tr>
<tr>
<td style="text-align: left;">VULN-006</td>
<td style="text-align: left;"><strong>Broken Access Control</strong></td>
<td style="text-align: left;">Access Control</td>
<td style="text-align: left;">Bug</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> High</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">Manual and potentially inconsistent privilege checks</td>
<td style="text-align: left;">UI forms with administrative actions</td>
<td style="text-align: left;">Refactor to a centralized, declarative authorization model.</td>
</tr>
<tr>
<td style="text-align: left;">...</td>
<td style="text-align: left;">(additional 44 vulnerabilities would be listed here)</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
<td style="text-align: left;">...</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="12-supportability-and-maintainability">12. Supportability and maintainability</h2>
This section assesses the support status of the key components of the application's technology stack.
<div class="table-container">
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 14%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Component</th>
<th style="text-align: left;">Current version</th>
<th style="text-align: left;">End of support date</th>
<th style="text-align: left;">Supportability</th>
<th style="text-align: left;">Latest stable version</th>
<th style="text-align: left;">Notes</th>
<th style="text-align: left;">Links</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>.NET Framework</strong></td>
<td style="text-align: left;">4.0</td>
<td style="text-align: left;">2022-04-26</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Unsupported</strong></td>
<td style="text-align: left;">4.8.1</td>
<td style="text-align: left;">This is a critical risk. The runtime no longer receives security updates.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/lifecycle/products/microsoft-net-framework">.NET Framework Lifecycle</a></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Microsoft SQL Server</strong></td>
<td style="text-align: left;">2008 R2 (Inferred from <code>S2K082</code> instance name)</td>
<td style="text-align: left;">2019-07-09</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Unsupported</strong></td>
<td style="text-align: left;">2022</td>
<td style="text-align: left;">The inferred database version is also end-of-life, posing a significant security risk.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/lifecycle/products/sql-server-2008-r2">SQL Server Lifecycle</a></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Windows Server</strong></td>
<td style="text-align: left;">2008 R2 (Assumed based on tech era)</td>
<td style="text-align: left;">2020-01-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Unsupported</strong></td>
<td style="text-align: left;">2022</td>
<td style="text-align: left;">The likely deployment OS is unsupported.</td>
<td style="text-align: left;"><a href="https://learn.microsoft.com/en-us/lifecycle/products/windows-server-2008-r2">Windows Server Lifecycle</a></td>
</tr>
<tr>
<td style="text-align: left;"><strong>Crystal Reports for VS</strong></td>
<td style="text-align: left;">13.0.2000.0 (VS 2010)</td>
<td style="text-align: left;">N/A</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> <strong>Unsupported</strong></td>
<td style="text-align: left;">Latest SP</td>
<td style="text-align: left;">The version used is extremely old and likely has unpatched vulnerabilities.</td>
<td style="text-align: left;"><a href="https://www.sap.com/products/crystal-reports.html">SAP Crystal Reports Support</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="121-net-framework-lifecycle">12.1. .NET Framework lifecycle</h3>
This table provides a lifecycle overview for all versions of the .NET Framework, highlighting the unsupported version used by the application.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Start date</th>
<th style="text-align: left;">End date</th>
<th style="text-align: left;">Supported</th>
<th style="text-align: left;">Used in the application</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">.NET Framework 4.8.1</td>
<td style="text-align: left;">2022-08-09</td>
<td style="text-align: left;">Follows OS Lifecycle</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.8</td>
<td style="text-align: left;">2019-04-18</td>
<td style="text-align: left;">Follows OS Lifecycle</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.7.2</td>
<td style="text-align: left;">2018-04-30</td>
<td style="text-align: left;">Follows OS Lifecycle</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.7.1</td>
<td style="text-align: left;">2017-10-17</td>
<td style="text-align: left;">Follows OS Lifecycle</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.7</td>
<td style="text-align: left;">2017-04-05</td>
<td style="text-align: left;">Follows OS Lifecycle</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.6.2</td>
<td style="text-align: left;">2016-08-02</td>
<td style="text-align: left;">Follows OS Lifecycle</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.6.1</td>
<td style="text-align: left;">2015-11-30</td>
<td style="text-align: left;">2022-04-26</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.6</td>
<td style="text-align: left;">2015-07-20</td>
<td style="text-align: left;">2022-04-26</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.5.2</td>
<td style="text-align: left;">2014-05-05</td>
<td style="text-align: left;">2022-04-26</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 4.0 - 4.5.1</td>
<td style="text-align: left;">2010-04-12</td>
<td style="text-align: left;">2016-01-12</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>Yes</strong></td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 3.5 SP1</td>
<td style="text-align: left;">2007-11-19</td>
<td style="text-align: left;">2029-01-09</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 2.0 - 3.0</td>
<td style="text-align: left;">2005-11-21</td>
<td style="text-align: left;">2011-07-12</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 1.1</td>
<td style="text-align: left;">2003-04-02</td>
<td style="text-align: left;">2013-10-08</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">.NET Framework 1.0</td>
<td style="text-align: left;">2002-02-13</td>
<td style="text-align: left;">2009-07-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
</tbody>
</table>
</div>
<h3 id="122-net-lifecycle">12.2. .NET lifecycle</h3>
This section is not applicable as the application does not use modern .NET (Core).
<h3 id="123-windows-server-operating-systems-lifecycle">12.3. Windows Server Operating Systems lifecycle</h3>
This table shows the support status for Windows Server, assuming a likely deployment target from the application's era.
<div class="table-container">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Start date</th>
<th style="text-align: left;">End date (mainstream)</th>
<th style="text-align: left;">End date (extended)</th>
<th style="text-align: left;">Supported</th>
<th style="text-align: left;">Used in the application</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Windows Server 2022</td>
<td style="text-align: left;">2021-08-18</td>
<td style="text-align: left;">2026-10-13</td>
<td style="text-align: left;">2031-10-14</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">Windows Server 2019</td>
<td style="text-align: left;">2018-11-13</td>
<td style="text-align: left;">2024-01-09</td>
<td style="text-align: left;">2029-01-09</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">Windows Server 2016</td>
<td style="text-align: left;">2016-10-15</td>
<td style="text-align: left;">2022-01-11</td>
<td style="text-align: left;">2027-01-12</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">Windows Server 2012 R2</td>
<td style="text-align: left;">2013-11-25</td>
<td style="text-align: left;">2018-10-09</td>
<td style="text-align: left;">2023-10-10</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> Likely</td>
</tr>
<tr>
<td style="text-align: left;">Windows Server 2012</td>
<td style="text-align: left;">2012-10-30</td>
<td style="text-align: left;">2018-10-09</td>
<td style="text-align: left;">2023-10-10</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> Likely</td>
</tr>
<tr>
<td style="text-align: left;">Windows Server 2008 R2</td>
<td style="text-align: left;">2009-10-22</td>
<td style="text-align: left;">2015-01-13</td>
<td style="text-align: left;">2020-01-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>Most Likely</strong></td>
</tr>
<tr>
<td style="text-align: left;">Windows Server 2008</td>
<td style="text-align: left;">2008-05-06</td>
<td style="text-align: left;">2015-01-13</td>
<td style="text-align: left;">2020-01-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> Likely</td>
</tr>
</tbody>
</table>
</div>
<h3 id="124-microsoft-sql-server-lifecycle">12.4. Microsoft SQL Server lifecycle</h3>
This table shows the support status for SQL Server, with the version inferred from instance names in the configuration.
<div class="table-container">
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Version</th>
<th style="text-align: left;">Start date</th>
<th style="text-align: left;">End date (mainstream)</th>
<th style="text-align: left;">End date (extended)</th>
<th style="text-align: left;">Supported</th>
<th style="text-align: left;">Used in the application</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">SQL Server 2022</td>
<td style="text-align: left;">2022-11-16</td>
<td style="text-align: left;">2028-01-11</td>
<td style="text-align: left;">2033-01-11</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">SQL Server 2019</td>
<td style="text-align: left;">2019-11-04</td>
<td style="text-align: left;">2025-02-28</td>
<td style="text-align: left;">2030-01-08</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">SQL Server 2017</td>
<td style="text-align: left;">2017-10-02</td>
<td style="text-align: left;">2022-10-11</td>
<td style="text-align: left;">2027-10-12</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">SQL Server 2016</td>
<td style="text-align: left;">2016-06-01</td>
<td style="text-align: left;">2021-07-13</td>
<td style="text-align: left;">2026-07-14</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Yes</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
</tr>
<tr>
<td style="text-align: left;">SQL Server 2014</td>
<td style="text-align: left;">2014-06-05</td>
<td style="text-align: left;">2019-07-09</td>
<td style="text-align: left;">2024-07-09</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> Likely</td>
</tr>
<tr>
<td style="text-align: left;">SQL Server 2012</td>
<td style="text-align: left;">2012-05-20</td>
<td style="text-align: left;">2017-07-11</td>
<td style="text-align: left;">2022-07-12</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-question" title="Uncertain/Likely">help</span> Likely</td>
</tr>
<tr>
<td style="text-align: left;">SQL Server 2008 R2</td>
<td style="text-align: left;">2010-07-20</td>
<td style="text-align: left;">2014-07-08</td>
<td style="text-align: left;">2019-07-09</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> <strong>Most Likely</strong></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="product-section">
<h2 id="13-modernization-strategy">13. Modernization strategy</h2>
Given the application's age, use of unsupported technologies, and architectural limitations, a modernization effort is highly recommended.
<h3 id="131-modernization-strategy-comparison">13.1. Modernization strategy comparison</h3>
This section compares three potential modernization strategies.
<div class="table-container">
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Strategy</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Complexity</th>
<th style="text-align: left;">Development time estimate</th>
<th style="text-align: left;">Functional testing time estimate</th>
<th style="text-align: left;">Infrastructure time estimate</th>
<th style="text-align: left;">Deployment time estimate</th>
<th style="text-align: left;">Total time estimate</th>
<th style="text-align: left;">Cost estimate</th>
<th style="text-align: left;">Risk</th>
<th style="text-align: left;">Long-term fit</th>
<th style="text-align: left;">Time-to-market</th>
<th style="text-align: left;">Pros</th>
<th style="text-align: left;">Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Lift and Shift (without rehosting)</strong></td>
<td style="text-align: left;">Upgrade the solution to the latest .NET Framework (4.8.1) and SQL Server (2022). Update all third-party libraries. No architectural changes.</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;">3-5 weeks</td>
<td style="text-align: left;">2-3 weeks</td>
<td style="text-align: left;">1-2 weeks</td>
<td style="text-align: left;">1 week</td>
<td style="text-align: left;">7-11 weeks</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Low</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Low</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> Fast</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Quickest path to a supported state. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Minimal user retraining. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Low development cost.</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Remains a monolith. <br> <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> No cloud benefits. <br> <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Does not address architectural debt.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Lift and Shift (with rehosting)</strong></td>
<td style="text-align: left;">Re-platform the application to Azure. Upgrade to .NET 8. Move the SQL database to Azure SQL. Host the service logic in Azure Functions or an App Service. The WinForms client would be accessed via Azure Virtual Desktop.</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;">6-8 weeks</td>
<td style="text-align: left;">4-6 weeks</td>
<td style="text-align: left;">3-4 weeks</td>
<td style="text-align: left;">2 weeks</td>
<td style="text-align: left;">15-20 weeks</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-medium" title="Medium/Warning">warning</span> Medium</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Moves to a modern, supported runtime. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Gains cloud scalability and reliability. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Reduces on-premises infrastructure burden.</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Higher cost and complexity. <br> <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Still a monolith at its core. <br> <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> WinForms client requires a VDI solution.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Complete Refactor</strong></td>
<td style="text-align: left;">Re-architect the application into a cloud-native solution. Decompose the monolith into microservices (e.g., Remittance API, Alerting API). Rewrite the UI as a modern web application (e.g., Blazor).</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Very high</td>
<td style="text-align: left;">9-12+ weeks</td>
<td style="text-align: left;">8-10 weeks</td>
<td style="text-align: left;">4-6 weeks</td>
<td style="text-align: left;">2-3 weeks</td>
<td style="text-align: left;">23-31+ weeks</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> High</td>
<td style="text-align: left;"><span class="icon icon-low" title="Low/Info">recommend</span> High</td>
<td style="text-align: left;"><span class="icon icon-high" title="High/Critical">dangerous</span> Slow</td>
<td style="text-align: left;"><span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Resolves all technical debt. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Highly scalable, maintainable, and extensible. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Enables modern DevOps practices. <br> <span class="icon icon-check" title="Yes/Used/Supported">check_circle</span> Best long-term value.</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Highest cost, time, and risk. <br> <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Requires significant developer and user retraining. <br> <span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Longest time-to-market.</td>
</tr>
</tbody>
</table>
</div>
<h3 id="132-recommendation">13.2. Recommendation</h3>
The recommended approach is a <strong>phased modernization</strong>, starting with <strong>Lift and Shift (without rehosting)</strong> to mitigate immediate security risks, followed by a gradual <strong>Refactor</strong> to a cloud-native architecture.
<p><strong>Phase 1: Stabilize and Secure (Lift and Shift)</strong>
The immediate priority is to move the application off unsupported platforms. Upgrading to .NET Framework 4.8.1 and a supported SQL Server version eliminates the most critical security risks with the lowest effort.</p>
<p><strong>Phase 2: Gradual Refactoring and Re-hosting (The Strangler Fig Pattern)</strong>
Once the application is on a supported on-premises stack, begin a gradual migration to a cloud-native architecture.
1.  <strong>Decompose the Monolith:</strong> Identify bounded contexts (e.g., Alerting, Remittance Processing) and rewrite them as separate .NET 8 APIs hosted in Azure.
2.  <strong>Rewrite the UI:</strong> Develop a new web-based UI (e.g., Blazor) that consumes these new APIs.
3.  <strong>Data Migration:</strong> Migrate the database to Azure SQL.
4.  <strong>Strangler Fig:</strong> Gradually redirect functionality from the old WinForms client and service to the new APIs until the legacy application is fully "strangled" and can be decommissioned.</p>
<p>This phased approach balances risk, cost, and long-term value, providing immediate security benefits while paving the way for a modern, scalable solution.</p>
<h4 id="1321-step-by-step-plan">13.2.1. Step-by-step plan</h4>
This plan details the steps for the recommended <strong>Phase 1: Lift and Shift (without rehosting)</strong> strategy.
<div class="table-container">
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Phase</th>
<th style="text-align: left;">Step</th>
<th style="text-align: left;">Task</th>
<th style="text-align: left;">Description</th>
<th style="text-align: left;">Estimated Time</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>1. Analysis & Planning</strong></td>
<td style="text-align: left;">1.1</td>
<td style="text-align: left;"><strong>Dependency Analysis</strong></td>
<td style="text-align: left;">Identify all third-party libraries and check for compatibility with .NET 4.8.1. Find and test replacements for any incompatible libraries (especially Crystal Reports).</td>
<td style="text-align: left;">1 week</td>
</tr>
<tr>
<td style="text-align: left;">1.2</td>
<td style="text-align: left;"><strong>Database Migration Plan</strong></td>
<td style="text-align: left;">Plan the migration from the old SQL Server version to a supported version (e.g., SQL Server 2022). This includes schema and data migration testing.</td>
<td style="text-align: left;">1 week</td>
</tr>
<tr>
<td style="text-align: left;"><strong>2. Upgrade & Refactor</strong></td>
<td style="text-align: left;">2.1</td>
<td style="text-align: left;"><strong>Upgrade .NET Framework</strong></td>
<td style="text-align: left;">Retarget all projects in the solution to .NET Framework 4.8.1. Resolve any compilation errors and API changes.</td>
<td style="text-align: left;">1-2 weeks</td>
</tr>
<tr>
<td style="text-align: left;">2.2</td>
<td style="text-align: left;"><strong>Dependency Replacement</strong></td>
<td style="text-align: left;">Replace all legacy dependencies with modern, supported equivalents managed via a private NuGet feed.</td>
<td style="text-align: left;">1 week</td>
</tr>
<tr>
<td style="text-align: left;">2.3</td>
<td style="text-align: left;"><strong>Fix SQL Injection</strong></td>
<td style="text-align: left;">Systematically find and refactor all concatenated SQL queries to use parameterized queries. This is a critical security task.</td>
<td style="text-align: left;">2-3 weeks</td>
</tr>
<tr>
<td style="text-align: left;"><strong>3. Testing</strong></td>
<td style="text-align: left;">3.1</td>
<td style="text-align: left;"><strong>Unit & Integration Testing</strong></td>
<td style="text-align: left;">Execute existing unit tests and add new ones for critical code paths, especially the refactored data access logic.</td>
<td style="text-align: left;">1 week</td>
</tr>
<tr>
<td style="text-align: left;">3.2</td>
<td style="text-align: left;"><strong>User Acceptance Testing (UAT)</strong></td>
<td style="text-align: left;">Business users perform a full regression test of the upgraded application in a dedicated test environment.</td>
<td style="text-align: left;">2-3 weeks</td>
</tr>
<tr>
<td style="text-align: left;"><strong>4. Deployment</strong></td>
<td style="text-align: left;">4.1</td>
<td style="text-align: left;"><strong>Infrastructure Setup</strong></td>
<td style="text-align: left;">Prepare the production environment with the new SQL Server version.</td>
<td style="text-align: left;">1 week</td>
</tr>
<tr>
<td style="text-align: left;">4.2</td>
<td style="text-align: left;"><strong>Production Deployment</strong></td>
<td style="text-align: left;">Deploy the upgraded application and migrated database to the production environment.</td>
<td style="text-align: left;">1 week</td>
</tr>
</tbody>
</table>
</div>
<h4 id="1322-gantt-chart">13.2.2. Gantt chart</h4>
This Gantt chart visualizes the timeline for the recommended <strong>Phase 1</strong> modernization plan.
<pre class="mermaid"><code>gantt
    title Modernization Plan - Phase 1: Lift and Shift
    dateFormat  YYYY-MM-DD
    axisFormat %Y-%m
    
    section Analysis & Planning
    Dependency Analysis           :a1, 2025-08-11, 1w
    Database Migration Plan       :a2, after a1, 1w

    section Upgrade & Refactor
    Upgrade .NET Framework        :b1, after a2, 2w
    Dependency Replacement        :b2, after b1, 1w
    Fix SQL Injection             :b3, after b1, 3w

    section Testing
    Unit & Integration Testing    :c1, after b3, 1w
    User Acceptance Testing (UAT) :c2, after c1, 3w
    
    section Deployment
    Infrastructure Setup          :d1, after a2, 2w
    Production Deployment         :d2, after c2, 1w
</code></pre>
<center><small>Figure 17 - Gantt chart for the Phase 1 modernization plan.</small></center>
</div>
<div class="product-section">
<h2 id="14-application-porfolio-management">14. Application porfolio management</h2>
This section provides an analysis of the application's components and strategic fit within an IT portfolio, using a LeanIX-inspired model.
<h3 id="141-it-component-types-and-attributes">14.1. IT Component types and attributes</h3>
The following table maps the application's technologies to standard IT component types.
<div class="table-container">
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">IT Component Type</th>
<th style="text-align: left;">Name</th>
<th style="text-align: left;">Type</th>
<th style="text-align: left;">Version(s)</th>
<th style="text-align: left;">Provider(s)</th>
<th style="text-align: left;">Support start date</th>
<th style="text-align: left;">Support end date</th>
<th style="text-align: left;">Support end date (extended)</th>
<th style="text-align: left;">Support status</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>Programming Language</strong></td>
<td style="text-align: left;">C#</td>
<td style="text-align: left;">Language</td>
<td style="text-align: left;">4.0</td>
<td style="text-align: left;">Microsoft</td>
<td style="text-align: left;">2010-04-12</td>
<td style="text-align: left;">2022-04-26</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Programming Language</strong></td>
<td style="text-align: left;">VB.NET</td>
<td style="text-align: left;">Language</td>
<td style="text-align: left;">10.0 (VS 2010)</td>
<td style="text-align: left;">Microsoft</td>
<td style="text-align: left;">2010-04-12</td>
<td style="text-align: left;">2020-04-14</td>
<td style="text-align: left;">2020-04-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Web Framework</strong></td>
<td style="text-align: left;">.NET Framework</td>
<td style="text-align: left;">Framework</td>
<td style="text-align: left;">4.0</td>
<td style="text-align: left;">Microsoft</td>
<td style="text-align: left;">2010-04-12</td>
<td style="text-align: left;">2022-04-26</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Database</strong></td>
<td style="text-align: left;">Microsoft SQL Server</td>
<td style="text-align: left;">Database</td>
<td style="text-align: left;">2008 R2 (Inferred)</td>
<td style="text-align: left;">Microsoft</td>
<td style="text-align: left;">2010-07-20</td>
<td style="text-align: left;">2014-07-08</td>
<td style="text-align: left;">2019-07-09</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Operating System</strong></td>
<td style="text-align: left;">Windows Server</td>
<td style="text-align: left;">Operating System</td>
<td style="text-align: left;">2008 R2 (Assumed)</td>
<td style="text-align: left;">Microsoft</td>
<td style="text-align: left;">2009-10-22</td>
<td style="text-align: left;">2015-01-13</td>
<td style="text-align: left;">2020-01-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Development Tool</strong></td>
<td style="text-align: left;">Visual Studio</td>
<td style="text-align: left;">Development Tool</td>
<td style="text-align: left;">2010</td>
<td style="text-align: left;">Microsoft</td>
<td style="text-align: left;">2010-04-12</td>
<td style="text-align: left;">2015-07-14</td>
<td style="text-align: left;">2020-07-14</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
<tr>
<td style="text-align: left;"><strong>Business Intelligence Tool</strong></td>
<td style="text-align: left;">Crystal Reports</td>
<td style="text-align: left;">Reporting Tool</td>
<td style="text-align: left;">13.0 (for VS 2010)</td>
<td style="text-align: left;">SAP</td>
<td style="text-align: left;">~2010</td>
<td style="text-align: left;">~2016</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;"><span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span> Unsupported</td>
</tr>
</tbody>
</table>
</div>
<h3 id="142-portfolio-strategy">14.2. Portfolio strategy</h3>
This section provides a strategic evaluation of the application using the TIME and 6R models.
<div class="table-container">
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr>
<th style="text-align: left;">Model</th>
<th style="text-align: left;">Classification</th>
<th style="text-align: left;">Justification</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><strong>TIME Classification</strong></td>
<td style="text-align: left;"><strong>Migrate</strong></td>
<td style="text-align: left;">The application provides high business value, as it manages a core operational process (document processing). However, its technical quality is very low due to its reliance on unsupported frameworks, potential security vulnerabilities, and monolithic architecture. Therefore, it is a prime candidate for migration and modernization to a more sustainable and secure platform to reduce risk and improve maintainability.</td>
</tr>
<tr>
<td style="text-align: left;"><strong>6R Classification</strong></td>
<td style="text-align: left;"><strong>Re-platform / Re-architect</strong></td>
<td style="text-align: left;">- <strong>Retain/Rehost:</strong> Not a viable long-term strategy due to the unsupported and insecure technology stack. A simple rehost to the cloud (e.g., on IaaS) would not solve the underlying technical debt. <br> - <strong>Replace:</strong> Replacing with a COTS (Commercial Off-The-Shelf) product could be an option, but it would likely involve high costs and loss of custom business logic. <br> - <strong>Retire:</strong> Not an option, as the functionality is critical. <br> - <strong>Recommendation:</strong> The best strategy is a phased approach combining <strong>Re-platforming</strong> (moving to a supported .NET version and SQL Server) in the short term to mitigate immediate risks, followed by a long-term <strong>Re-architecting</strong> (or Refactoring) into a modern, cloud-native application to ensure its future viability and scalability.</td>
</tr>
</tbody>
</table>
</div>
---
This application analysis was performed using Artificial Intelligence (AI). While AI enhances the process, it may still produce inaccuracies, and all results should be carefully reviewed.
</div>

</main>
      <p class="ai-disclaimer">This application analysis was performed using Artificial Intelligence (AI). While AI enhances the process, it may still produce inaccuracies, and all results should be carefully reviewed.</p>
      <footer class="footer">
         <div class="footer-container">
            <div class="footer-brand">
               <img src="https://www.cgd.pt/PublishingImages/WSImages/Novo-CGD/logo-ap_Blue.png" alt="CGD Logo" class="footer-logo">
               <span class="footer-wordmark">Caixa. Para todos e para cada um.</span>
            </div>
            <div class="footer-copyright">
               © 2025 Caixa Geral de Depósitos, SA. All rights reserved.
            </div>
            <div class="footer-socials">
               <a href="https://www.cgd.pt/" target="_blank" title="Website">
                  <svg viewBox="0 0 24 24">
                     <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1h-2v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/>
                  </svg>
               </a>
               <a href="https://www.facebook.com/caixageraldedepositos" target="_blank" title="Facebook">
                  <svg viewBox="0 0 24 24">
                     <path d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12c0 4.84 3.44 8.87 8 9.8V15H8v-3h2V9.5C10 7.57 11.57 6 13.5 6H16v3h-1.5c-1.1 0-1.5.9-1.5 1.5V12h3l-.5 3h-2.5v6.8A10.02 10.02 0 0022 12z"/>
                  </svg>
               </a>
               <a href="https://www.youtube.com/user/mediacgd" target="_blank" title="YouTube">
                  <svg viewBox="0 0 24 24">
                     <path d="M21.58 7.19c-.23-.86-.9-1.52-1.76-1.75C18.25 5 12 5 12 5s-6.25 0-7.82.44c-.86.23-1.52.89-1.76 1.75C2 8.75 2 12 2 12s0 3.25.42 4.81c.23.86.9 1.52 1.76 1.75C5.75 19 12 19 12 19s6.25 0 7.82-.44c.86-.23 1.52-.89 1.76-1.75C22 15.25 22 12 22 12s0-3.25-.42-4.81zM10 15V9l5.2 3-5.2 3z"/>
                  </svg>
               </a>
               <a href="https://www.linkedin.com/company/caixageraldedepositos" target="_blank" title="LinkedIn">
                  <svg viewBox="0 0 24 24">
                     <path d="M19 3a2 2 0 012 2v14a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h14zm-7 5H8v8h4v-8zm-2-2h4v-2H8v2zm8 4h-4v4h4v-4zm0-2h-4v-2h4v2z" clip-rule="evenodd" fill-rule="evenodd"/>
                  </svg>
               </a>
               <a href="https://www.instagram.com/caixageraldedepositos" target="_blank" title="Instagram">
                  <svg viewBox="0 0 24 24">
                     <path d="M7.8 2h8.4C19.4 2 22 4.6 22 7.8v8.4a5.8 5.8 0 01-5.8 5.8H7.8C4.6 22 2 19.4 2 16.2V7.8A5.8 5.8 0 017.8 2zm-.2 2A3.6 3.6 0 004 7.6v8.8C4 18.39 5.61 20 7.6 20h8.8c1.99 0 3.6-1.61 3.6-3.6V7.6C20 5.61 18.39 4 16.4 4H7.6zm9.65 1.5a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zM12 7a5 5 0 100 10 5 5 0 000-10zm0 2a3 3 0 110 6 3 3 0 010-6z"/>
                  </svg>
               </a>
            </div>
         </div>
      </footer>
      <button id="back-to-top" title="Back to Top">
      <span class="icon">arrow_upward</span>
      </button>
      
      <!-- Floating Table of Contents -->
      <div id="floating-toc-toggle" class="floating-toc-toggle" title="Table of Contents">
         <span class="icon">toc</span>
      </div>
      
      <div id="floating-toc" class="floating-toc">
         <div class="floating-toc-header">
            <div class="floating-toc-title">
               <span class="icon">toc</span>
               Table of Contents
            </div>
            <button id="floating-toc-close" class="floating-toc-close" title="Close TOC">
               <span class="icon">close</span>
            </button>
         </div>
         <ul id="floating-toc-list" class="floating-toc-list">
            <!-- TOC items will be dynamically generated -->
         </ul>
      </div>

      <!-- Fullscreen Reading Mode -->
      <div id="fullscreen-reading-mode" class="fullscreen-reading-mode">
         <div class="fullscreen-font-controls">
            <button id="font-decrease" class="fullscreen-font-control" title="Decrease font size">
               <span class="icon">text_decrease</span>
            </button>
            <button id="font-increase" class="fullscreen-font-control" title="Increase font size">
               <span class="icon">text_increase</span>
            </button>
         </div>
         
         <div class="fullscreen-reading-controls">
            <button id="fullscreen-tts-btn" class="fullscreen-reading-control" title="Listen to content">
               <span class="icon">play_arrow</span>
            </button>
            <button id="fullscreen-dark-mode-btn" class="fullscreen-reading-control" title="Toggle dark mode">
               <span class="icon">light_mode</span>
            </button>
            <button id="fullscreen-exit-btn" class="fullscreen-reading-control fullscreen-reading-exit" title="Exit fullscreen reading">
               <span class="icon">fullscreen_exit</span>
            </button>
         </div>
         
         <div id="fullscreen-reading-content" class="fullscreen-reading-content">
            <!-- Content will be dynamically populated -->
         </div>
         
         <div id="fullscreen-reading-progress" class="fullscreen-reading-progress">
            Reading progress: 0%
         </div>
      </div>

      <script>
         document.addEventListener('DOMContentLoaded', function() {
             
             // --- INITIALIZATION ---
             function init() {
                 console.log('Starting initialization...');
                 replaceEmojisWithIcons();
                 removeHeadingNumbers();
                 setupTabs(); // This now also calculates and displays read times
                 console.log('About to initialize dark mode...');
                 initDarkMode();
                 console.log('Dark mode initialization complete');
                 initTTS();
                 initBackToTop();
                 initFloatingTOC();
                 initReadingProgress();
                 initFullscreenReading();
                 initBreadcrumbNavigation();
                 
                 // Initialize and render Mermaid diagrams
                 function checkMermaidAvailability() {
                     if (typeof mermaid === 'undefined') {
                         console.error('Mermaid library not loaded. Diagrams will not be rendered.');
                         return false;
                     }
                     console.log('Mermaid version:', mermaid.version || 'Unknown');
                     return true;
                 }
                 
                 if (checkMermaidAvailability()) {
                     try {
                         initializeMermaidRendering();
                         setTimeout(renderMermaidDiagrams, 500);
                     } catch (error) {
                         console.error('Error initializing Mermaid diagrams:', error);
                     }
                 }
             }
             
             // --- FEATURE: DARK MODE ---
             function initDarkMode() {
                 console.log('Initializing dark mode...');
                 const toggleBtn = document.getElementById('dark-mode-toggle');
                 console.log('Toggle button found:', toggleBtn);
                 
                 // Check if the toggle button exists
                 if (!toggleBtn) {
                     console.warn('Dark mode toggle button not found');
                     return;
                 }
                 
                 // Check if the icon element exists inside the button
                 const iconElement = toggleBtn.querySelector('.icon');
                 console.log('Icon element found:', iconElement);
                 if (!iconElement) {
                     console.warn('Dark mode toggle icon not found');
                     return;
                 }
                 
                 const sunIcon = 'light_mode';
                 const moonIcon = 'dark_mode';
         
                 // Check for saved preference and update UI accordingly
                 if (localStorage.getItem('theme') === 'dark') {
                     console.log('Setting dark mode from localStorage');
                     document.documentElement.classList.add('dark-mode');
                     iconElement.textContent = sunIcon;
                     toggleBtn.title = 'Switch to light mode';
                 } else {
                     console.log('Setting light mode');
                     iconElement.textContent = moonIcon;
                     toggleBtn.title = 'Switch to dark mode';
                 }
         
                 console.log('Adding click event listener to dark mode toggle');
                 toggleBtn.addEventListener('click', () => {
                     console.log('Dark mode toggle clicked!');
                     
                     const isDarkMode = document.documentElement.classList.toggle('dark-mode');
                     console.log('Dark mode toggled:', isDarkMode);
                     console.log('Current document classes:', document.documentElement.className);
                     
                     // Update icon and tooltip based on current mode
                     if (isDarkMode) {
                         console.log('Setting sun icon for dark mode');
                         iconElement.textContent = sunIcon;
                         toggleBtn.title = 'Switch to light mode';
                     } else {
                         console.log('Setting moon icon for light mode');
                         iconElement.textContent = moonIcon;
                         toggleBtn.title = 'Switch to dark mode';
                     }
                     
                     localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
                     console.log('Theme saved to localStorage:', isDarkMode ? 'dark' : 'light');
                     
                     // Update Mermaid theme if the function exists
                     if (typeof updateMermaidTheme === 'function') {
                         updateMermaidTheme();
                     }
                 });
                 
                 console.log('Dark mode initialization completed successfully');
             }
         
             // --- FEATURE: TEXT-TO-SPEECH (TTS) ---
             function initTTS() {
                 const ttsControls = document.getElementById('tts-controls');
                 const playPauseBtn = document.getElementById('tts-play-pause-btn');
                 const stopBtn = document.getElementById('tts-stop-btn');
                 
                 // Check if TTS elements exist
                 if (!ttsControls || !playPauseBtn || !stopBtn) {
                     console.warn('TTS controls not found');
                     return;
                 }
                 
                 const synth = window.speechSynthesis;
         
                 // Always show TTS controls
                 ttsControls.style.display = 'flex';
                 
                 if (!synth) {
                     console.warn("Browser does not support Speech Synthesis.");
                     // Show controls but disable them
                     playPauseBtn.disabled = true;
                     stopBtn.disabled = true;
                     playPauseBtn.title = "Speech synthesis not supported in this browser";
                     stopBtn.title = "Speech synthesis not supported in this browser";
                     return;
                 }
         
                 let utterance = null;
                 
                 console.log("TTS initialized successfully");
         
                 function play() {
                     console.log("TTS play function called");
                     const activePane = document.querySelector('.tab-pane.active');
                     if (!activePane) {
                         console.warn("No active tab pane found");
                         return;
                     }
                     
                     if (synth.speaking) {
                         console.log("Speech synthesis already speaking");
                         return;
                     }
         
                     // Clone to avoid modifying the live DOM, then clean text
                     const contentClone = activePane.cloneNode(true);
                     contentClone.querySelectorAll('h2, h3, h4').forEach(h => h.textContent = h.textContent + '. '); // Add pauses after headings
                     const textToSpeak = contentClone.innerText;
                     
                     console.log("Text to speak length:", textToSpeak.length);
         
                     utterance = new SpeechSynthesisUtterance(textToSpeak);
                     utterance.lang = document.documentElement.lang || 'en-US';
                     utterance.rate = 0.9; // Slightly slower for better comprehension
                     utterance.pitch = 1.0;
                     utterance.volume = 0.8;
         
                     utterance.onstart = () => {
                         console.log("Speech started");
                         playPauseBtn.querySelector('.icon').textContent = 'pause';
                         playPauseBtn.title = 'Pause listening';
                     };
                     utterance.onpause = () => {
                         console.log("Speech paused");
                         playPauseBtn.querySelector('.icon').textContent = 'play_arrow';
                         playPauseBtn.title = 'Resume listening';
                     };
                     utterance.onresume = () => {
                         console.log("Speech resumed");
                         playPauseBtn.querySelector('.icon').textContent = 'pause';
                         playPauseBtn.title = 'Pause listening';
                     };
                     utterance.onend = () => {
                         console.log("Speech ended");
                         playPauseBtn.querySelector('.icon').textContent = 'play_arrow';
                         playPauseBtn.title = 'Listen to this section';
                         utterance = null;
                     };
                     utterance.onerror = (event) => {
                         console.error("Speech synthesis error:", event);
                         playPauseBtn.querySelector('.icon').textContent = 'play_arrow';
                         playPauseBtn.title = 'Listen to this section';
                         utterance = null;
                     };
                     
                     synth.speak(utterance);
                 }
         
                 function togglePlayPause() {
                     console.log("TTS toggle play/pause clicked");
                     console.log("Current state - speaking:", synth.speaking, "paused:", synth.paused);
                     
                     if (synth.speaking && !synth.paused) {
                         console.log("Pausing speech");
                         synth.pause();
                     } else if (synth.paused) {
                         console.log("Resuming speech");
                         synth.resume();
                     } else {
                         console.log("Starting new speech");
                         play();
                     }
                 }
         
                 function stop() {
                     console.log("TTS stop clicked");
                     synth.cancel(); // Also triggers 'onend'
                 }
         
                 playPauseBtn.addEventListener('click', togglePlayPause);
                 stopBtn.addEventListener('click', stop);
                 
                 // Stop speech when user changes tabs
                 document.querySelector('.tab-navigation')?.addEventListener('click', stop);
             }
             
             // --- FEATURE: BACK TO TOP BUTTON ---
             function initBackToTop() {
                 const backToTopButton = document.getElementById('back-to-top');
                 
                 if (!backToTopButton) {
                     console.warn('Back to top button not found');
                     return;
                 }
                 
                 window.addEventListener('scroll', () => {
                     if (window.scrollY > 300) {
                         backToTopButton.classList.add('show');
                     } else {
                         backToTopButton.classList.remove('show');
                     }
                 });
                 backToTopButton.addEventListener('click', () => {
                     window.scrollTo({ top: 0, behavior: 'smooth' });
                 });
             }

             // --- FEATURE: FLOATING TABLE OF CONTENTS ---
             function initFloatingTOC() {
                 const tocToggle = document.getElementById('floating-toc-toggle');
                 const tocContainer = document.getElementById('floating-toc');
                 const tocClose = document.getElementById('floating-toc-close');
                 const tocList = document.getElementById('floating-toc-list');
                 
                 let isInitialized = false;
                 let tocItems = [];
                 let sectionElements = [];
                 
                 function buildTOC() {
                     if (isInitialized) return;
                     
                     // Get all h2 elements from tab panes
                     const tabPanes = document.querySelectorAll('.tab-pane');
                     tocList.innerHTML = '';
                     tocItems = [];
                     sectionElements = [];
                     
                     tabPanes.forEach((pane, index) => {
                         const h2Element = pane.querySelector('h2');
                         if (!h2Element) return;
                         
                         const tocItem = document.createElement('li');
                         tocItem.className = 'floating-toc-item';
                         
                         const tocLink = document.createElement('a');
                         tocLink.className = 'floating-toc-link';
                         tocLink.href = '#';
                         tocLink.textContent = h2Element.textContent.trim();
                         tocLink.dataset.target = h2Element.id || `section-${index}`;
                         
                         const progressIndicator = document.createElement('div');
                         progressIndicator.className = 'floating-toc-progress';
                         const progressFill = document.createElement('div');
                         progressFill.className = 'floating-toc-progress-fill';
                         progressIndicator.appendChild(progressFill);
                         tocLink.appendChild(progressIndicator);
                         
                         tocItem.appendChild(tocLink);
                         tocList.appendChild(tocItem);
                         
                         tocItems.push({
                             link: tocLink,
                             pane: pane,
                             h2: h2Element
                         });
                         
                         sectionElements.push({
                             element: pane,
                             link: tocLink,
                             id: h2Element.id || `section-${index}`
                         });
                         
                         // Add click handler for smooth scrolling to tab
                         tocLink.addEventListener('click', (e) => {
                             e.preventDefault();
                             
                             // Find and activate the corresponding tab
                             const tabButton = document.querySelector(`[data-tab="${pane.id}"]`);
                             if (tabButton) {
                                 tabButton.click();
                                 
                                 // Small delay to ensure tab is active, then scroll to h2
                                 setTimeout(() => {
                                     h2Element.scrollIntoView({
                                         behavior: 'smooth',
                                         block: 'start'
                                     });
                                 }, 100);
                             }
                         });
                     });
                     
                     isInitialized = true;
                 }
                 
                 function updateProgress() {
                     if (!isInitialized || tocItems.length === 0) return;
                     
                     const activeTabPane = document.querySelector('.tab-pane.active');
                     if (!activeTabPane) return;
                     
                     // Find the corresponding TOC item
                     const activeTocItem = tocItems.find(item => item.pane === activeTabPane);
                     
                     // Clear all active states
                     tocItems.forEach(item => {
                         item.link.classList.remove('active', 'reading');
                     });
                     
                     if (activeTocItem) {
                         activeTocItem.link.classList.add('active');
                         
                         // Calculate reading progress for the active section
                         const paneRect = activeTabPane.getBoundingClientRect();
                         const viewportHeight = window.innerHeight;
                         
                         // Consider a section as "reading" if it's visible in viewport
                         if (paneRect.top < viewportHeight && paneRect.bottom > 0) {
                             activeTocItem.link.classList.add('reading');
                         }
                     }
                 }
                 
                 function showTOC() {
                     buildTOC();
                     tocContainer.classList.add('show');
                     tocToggle.classList.remove('show');
                     updateProgress();
                 }
                 
                 function hideTOC() {
                     tocContainer.classList.remove('show');
                     tocToggle.classList.add('show');
                 }
                 
                 // Event listeners
                 tocToggle.addEventListener('click', showTOC);
                 tocClose.addEventListener('click', hideTOC);
                 
                 // Close TOC when clicking outside
                 document.addEventListener('click', (e) => {
                     if (!tocContainer.contains(e.target) && !tocToggle.contains(e.target)) {
                         if (tocContainer.classList.contains('show')) {
                             hideTOC();
                         }
                     }
                 });
                 
                 // Show/hide toggle button on scroll
                 window.addEventListener('scroll', () => {
                     if (window.scrollY > 500) {
                         if (!tocContainer.classList.contains('show')) {
                             tocToggle.classList.add('show');
                         }
                     } else {
                         tocToggle.classList.remove('show');
                         tocContainer.classList.remove('show');
                     }
                     
                     updateProgress();
                 });
                 
                 // Update progress when tabs change
                 const tabNavigation = document.querySelector('.tab-navigation');
                 if (tabNavigation) {
                     tabNavigation.addEventListener('click', () => {
                         setTimeout(updateProgress, 100);
                     });
                 }
                 
                 // Handle ESC key to close TOC
                 document.addEventListener('keydown', (e) => {
                     if (e.key === 'Escape' && tocContainer.classList.contains('show')) {
                         hideTOC();
                     }                 });
             }

             // --- FEATURE: READING PROGRESS INDICATOR ---
             function initReadingProgress() {
                 const progressBar = document.getElementById('reading-progress');
                 const progressFill = document.getElementById('reading-progress-fill');
                 const progressText = document.getElementById('reading-progress-text');
                 
                 let isVisible = false;
                 
                 function updateProgress() {
                     // Get the active tab content to calculate progress within that tab
                     const activeTabPane = document.querySelector('.tab-pane.active');
                     if (!activeTabPane) return;
                     
                     const rect = activeTabPane.getBoundingClientRect();
                     const tabTop = activeTabPane.offsetTop;
                     const tabHeight = activeTabPane.offsetHeight;
                     const headerHeight = document.querySelector('.header').offsetHeight + 
                                         document.querySelector('.tab-navigation-container').offsetHeight;
                     
                     // Calculate scroll position relative to the active tab
                     const scrollTop = window.pageYOffset;
                     const tabStart = tabTop - headerHeight;
                     const tabEnd = tabTop + tabHeight - window.innerHeight;
                     
                     // Calculate progress percentage for the current tab
                     let progress = 0;
                     if (scrollTop <= tabStart) {
                         progress = 0;
                     } else if (scrollTop >= tabEnd) {
                         progress = 100;
                     } else {
                         const scrollableHeight = tabEnd - tabStart;
                         const scrolledHeight = scrollTop - tabStart;
                         progress = Math.min(100, Math.max(0, (scrolledHeight / scrollableHeight) * 100));
                     }
                     
                     // Show progress bar after scrolling starts
                     const shouldShow = scrollTop > 100;
                     
                     if (shouldShow && !isVisible) {
                         progressBar.classList.add('show');
                         progressText.classList.add('show');
                         isVisible = true;
                     } else if (!shouldShow && isVisible) {
                         progressBar.classList.remove('show');
                         progressText.classList.remove('show');
                         isVisible = false;
                     }
                     
                     // Update progress bar and text
                     if (isVisible) {
                         progressFill.style.width = `${progress}%`;
                         progressText.textContent = `${Math.round(progress)}% read`;
                         
                         // Add current section info
                         const activeH2 = activeTabPane.querySelector('h2');
                         if (activeH2) {
                             const sectionTitle = activeH2.textContent.trim();
                             const shortTitle = sectionTitle.length > 25 ? 
                                               sectionTitle.substring(0, 25) + '...' : 
                                               sectionTitle;
                             progressText.textContent = `${Math.round(progress)}% • ${shortTitle}`;
                         }
                     }
                 }
                 
                 // Throttled scroll handler for better performance
                 let ticking = false;
                 function handleScroll() {
                     if (!ticking) {
                         requestAnimationFrame(() => {
                             updateProgress();
                             ticking = false;
                         });
                         ticking = true;
                     }
                 }
                 
                 // Event listeners
                 window.addEventListener('scroll', handleScroll);
                 window.addEventListener('resize', updateProgress);
                 
                 // Update progress when tabs change
                 const tabNavigation = document.querySelector('.tab-navigation');
                 if (tabNavigation) {
                     tabNavigation.addEventListener('click', () => {
                         setTimeout(updateProgress, 150);
                     });
                 }
                 
                 // Initial update
                 updateProgress();
             }

             // --- FEATURE: FULLSCREEN READING MODE ---
             function initFullscreenReading() {
                 const fullscreenBtn = document.getElementById('fullscreen-reading-btn');
                 const fullscreenMode = document.getElementById('fullscreen-reading-mode');
                 const fullscreenContent = document.getElementById('fullscreen-reading-content');
                 const fullscreenProgress = document.getElementById('fullscreen-reading-progress');
                 const exitBtn = document.getElementById('fullscreen-exit-btn');
                 const fontIncreaseBtn = document.getElementById('font-increase');
                 const fontDecreaseBtn = document.getElementById('font-decrease');
                 const fullscreenTtsBtn = document.getElementById('fullscreen-tts-btn');
                 const fullscreenDarkModeBtn = document.getElementById('fullscreen-dark-mode-btn');
                 
                 let currentFontSize = 1.1; // Default font size in rem
                 let isFullscreenActive = false;
                 
                 function enterFullscreenReading() {
                     const activeTabPane = document.querySelector('.tab-pane.active');
                     if (!activeTabPane) return;
                     
                     // Clone the active content
                     const contentClone = activeTabPane.cloneNode(true);
                     
                     // Clean up the cloned content for better reading
                     contentClone.querySelectorAll('.section-read-time').forEach(el => el.remove());
                     contentClone.querySelectorAll('script').forEach(el => el.remove());
                     
                     // Set the content
                     fullscreenContent.innerHTML = contentClone.innerHTML;
                     
                     // Activate fullscreen mode
                     document.body.classList.add('fullscreen-reading');
                     fullscreenMode.classList.add('active');
                     isFullscreenActive = true;
                     
                     // Update dark mode button state
                     const isDarkMode = document.documentElement.classList.contains('dark-mode');
                     fullscreenDarkModeBtn.querySelector('.icon').textContent = isDarkMode ? 'light_mode' : 'dark_mode';
                     fullscreenDarkModeBtn.title = isDarkMode ? 'Switch to light mode' : 'Switch to dark mode';
                     
                     // Initialize progress tracking
                     updateFullscreenProgress();
                     
                     // Prevent body scroll
                     document.body.style.overflow = 'hidden';
                 }
                 
                 function exitFullscreenReading() {
                     document.body.classList.remove('fullscreen-reading');
                     fullscreenMode.classList.remove('active');
                     isFullscreenActive = false;
                     
                     // Restore body scroll
                     document.body.style.overflow = '';
                     
                     // Stop any TTS playback
                     if (window.speechSynthesis) {
                         window.speechSynthesis.cancel();
                     }
                 }
                 
                 function adjustFontSize(increase) {
                     if (increase) {
                         currentFontSize = Math.min(2.0, currentFontSize + 0.1);
                     } else {
                         currentFontSize = Math.max(0.8, currentFontSize - 0.1);
                     }
                     fullscreenContent.style.fontSize = `${currentFontSize}rem`;
                 }
                 
                 function updateFullscreenProgress() {
                     if (!isFullscreenActive) return;
                     
                     const scrollTop = fullscreenMode.scrollTop;
                     const scrollHeight = fullscreenMode.scrollHeight - fullscreenMode.clientHeight;
                     const progress = scrollHeight > 0 ? Math.round((scrollTop / scrollHeight) * 100) : 0;
                     
                     fullscreenProgress.textContent = `Reading progress: ${progress}%`;
                 }
                 
                 function toggleFullscreenTTS() {
                     const synth = window.speechSynthesis;
                     if (!synth) return;
                     
                     if (synth.speaking && !synth.paused) {
                         synth.pause();
                         fullscreenTtsBtn.querySelector('.icon').textContent = 'play_arrow';
                         fullscreenTtsBtn.title = 'Resume listening';
                     } else if (synth.paused) {
                         synth.resume();
                         fullscreenTtsBtn.querySelector('.icon').textContent = 'pause';
                         fullscreenTtsBtn.title = 'Pause listening';
                     } else {
                         // Start new speech
                         const textToSpeak = fullscreenContent.innerText;
                         const utterance = new SpeechSynthesisUtterance(textToSpeak);
                         utterance.lang = document.documentElement.lang || 'en-US';
                         utterance.rate = 0.9;
                         utterance.pitch = 1.0;
                         utterance.volume = 0.8;
                         
                         utterance.onstart = () => {
                             fullscreenTtsBtn.querySelector('.icon').textContent = 'pause';
                             fullscreenTtsBtn.title = 'Pause listening';
                         };
                         
                         utterance.onend = () => {
                             fullscreenTtsBtn.querySelector('.icon').textContent = 'play_arrow';
                             fullscreenTtsBtn.title = 'Listen to content';
                         };
                         
                         utterance.onerror = () => {
                             fullscreenTtsBtn.querySelector('.icon').textContent = 'play_arrow';
                             fullscreenTtsBtn.title = 'Listen to content';
                         };
                         
                         synth.speak(utterance);
                     }
                 }
                 
                 function toggleFullscreenDarkMode() {
                     const isDarkMode = document.documentElement.classList.toggle('dark-mode');
                     fullscreenDarkModeBtn.querySelector('.icon').textContent = isDarkMode ? 'light_mode' : 'dark_mode';
                     fullscreenDarkModeBtn.title = isDarkMode ? 'Switch to light mode' : 'Switch to dark mode';
                     localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
                 }
                 
                 // Event listeners
                 fullscreenBtn.addEventListener('click', enterFullscreenReading);
                 exitBtn.addEventListener('click', exitFullscreenReading);
                 fontIncreaseBtn.addEventListener('click', () => adjustFontSize(true));
                 fontDecreaseBtn.addEventListener('click', () => adjustFontSize(false));
                 fullscreenTtsBtn.addEventListener('click', toggleFullscreenTTS);
                 fullscreenDarkModeBtn.addEventListener('click', toggleFullscreenDarkMode);
                 
                 // Scroll progress tracking
                 fullscreenMode.addEventListener('scroll', () => {
                     if (isFullscreenActive) {
                         updateFullscreenProgress();
                     }
                 });
                 
                 // Keyboard shortcuts
                 document.addEventListener('keydown', (e) => {
                     if (!isFullscreenActive) return;
                     
                     switch(e.key) {
                         case 'Escape':
                             exitFullscreenReading();
                             break;
                         case 'F':
                         case 'f':
                             if (e.ctrlKey) {
                                 e.preventDefault();
                                 // Could implement search functionality here
                             }
                             break;
                         case '+':
                         case '=':
                             if (e.ctrlKey) {
                                 e.preventDefault();
                                 adjustFontSize(true);
                             }
                             break;
                         case '-':
                             if (e.ctrlKey) {
                                 e.preventDefault();
                                 adjustFontSize(false);
                             }
                             break;
                         case ' ':
                             if (e.ctrlKey) {
                                 e.preventDefault();
                                 toggleFullscreenTTS();
                             }
                             break;
                     }
                 });
                 
                 // Prevent context menu in fullscreen mode
                 fullscreenMode.addEventListener('contextmenu', (e) => {
                     if (isFullscreenActive) {
                         e.preventDefault();
                     }
                 });
             }

             // --- FEATURE: BREADCRUMB NAVIGATION ---
             function initBreadcrumbNavigation() {
                 const breadcrumbContainer = document.getElementById('breadcrumb-container');
                 const breadcrumbHome = document.getElementById('breadcrumb-home');
                 const breadcrumbCurrent = document.getElementById('breadcrumb-current');
                 const breadcrumbProgressFill = document.getElementById('breadcrumb-progress-fill');
                 const breadcrumbProgressText = document.getElementById('breadcrumb-progress-text');
                 const breadcrumbSectionCount = document.getElementById('breadcrumb-section-count');
                 
                 let sections = [];
                 let currentSectionIndex = 0;
                 let isVisible = false;
                 
                 function initializeSections() {
                     const tabPanes = document.querySelectorAll('.tab-pane');
                     sections = Array.from(tabPanes).map((pane, index) => {
                         const h2Element = pane.querySelector('h2');
                         return {
                             id: pane.id,
                             title: h2Element ? h2Element.textContent.trim() : `Section ${index + 1}`,
                             element: pane,
                             index: index
                         };
                     });
                 }
                 
                 function updateBreadcrumb() {
                     const activeTabPane = document.querySelector('.tab-pane.active');
                     if (!activeTabPane || sections.length === 0) return;
                     
                     // Find current section
                     currentSectionIndex = sections.findIndex(section => section.element === activeTabPane);
                     const currentSection = sections[currentSectionIndex];
                     
                     if (!currentSection) return;
                     
                     // Update breadcrumb current section
                     const maxTitleLength = window.innerWidth < 768 ? 25 : 40;
                     const displayTitle = currentSection.title.length > maxTitleLength ? 
                                         currentSection.title.substring(0, maxTitleLength) + '...' : 
                                         currentSection.title;
                     
                     breadcrumbCurrent.innerHTML = `
                         <span class="breadcrumb-link active" title="${currentSection.title}">
                             ${displayTitle}
                         </span>
                     `;
                     
                     // Update section count
                     breadcrumbSectionCount.textContent = `Section ${currentSectionIndex + 1} of ${sections.length}`;
                     
                     // Update progress
                     const progress = Math.round(((currentSectionIndex + 1) / sections.length) * 100);
                     breadcrumbProgressFill.style.width = `${progress}%`;
                     breadcrumbProgressText.textContent = `${progress}%`;
                     
                     // Show/hide breadcrumb based on scroll position
                     const shouldShow = window.scrollY > 200;
                     if (shouldShow && !isVisible) {
                         breadcrumbContainer.classList.add('show');
                         isVisible = true;
                     } else if (!shouldShow && isVisible) {
                         breadcrumbContainer.classList.remove('show');
                         isVisible = false;
                     }
                 }
                 
                 function createSectionBreadcrumb() {
                     const activeTabPane = document.querySelector('.tab-pane.active');
                     if (!activeTabPane) return;
                     
                     // Get current section hierarchy
                     const headings = activeTabPane.querySelectorAll('h2, h3, h4');
                     const currentScroll = window.scrollY + window.innerHeight / 2;
                     let activeHeading = null;
                     
                     // Find the currently visible heading
                     for (let i = headings.length - 1; i >= 0; i--) {
                         const heading = headings[i];
                         const rect = heading.getBoundingClientRect();
                         const absoluteTop = window.scrollY + rect.top;
                         
                         if (absoluteTop <= currentScroll) {
                             activeHeading = heading;
                             break;
                         }
                     }
                     
                     // Build breadcrumb path
                     let breadcrumbPath = '';
                     if (activeHeading && activeHeading.tagName !== 'H2') {
                         const h2 = activeTabPane.querySelector('h2');
                         const headingText = activeHeading.textContent.trim();
                         const maxLength = window.innerWidth < 768 ? 20 : 30;
                         const shortText = headingText.length > maxLength ? 
                                          headingText.substring(0, maxLength) + '...' : 
                                          headingText;
                         
                         breadcrumbPath = `
                             <span class="breadcrumb-separator">›</span>
                             <div class="breadcrumb-item">
                                 <span class="breadcrumb-link" title="${headingText}">
                                     ${shortText}
                                 </span>
                             </div>
                         `;
                     }
                     
                     // Update the breadcrumb current section with subsection info
                     const currentSection = sections[currentSectionIndex];
                     if (currentSection) {
                         const maxTitleLength = window.innerWidth < 768 ? 20 : 30;
                         const displayTitle = currentSection.title.length > maxTitleLength ? 
                                             currentSection.title.substring(0, maxTitleLength) + '...' : 
                                             currentSection.title;
                         
                         breadcrumbCurrent.innerHTML = `
                             <span class="breadcrumb-link active" title="${currentSection.title}">
                                 ${displayTitle}
                             </span>
                             ${breadcrumbPath}
                         `;
                     }
                 }
                 
                 function navigateToSection(sectionIndex) {
                     if (sectionIndex < 0 || sectionIndex >= sections.length) return;
                     
                     const section = sections[sectionIndex];
                     const tabButton = document.querySelector(`[data-tab="${section.id}"]`);
                     
                     if (tabButton) {
                         tabButton.click();
                         setTimeout(() => {
                             section.element.scrollIntoView({
                                 behavior: 'smooth',
                                 block: 'start'
                             });
                         }, 150);
                     }
                 }
                 
                 // Event listeners
                 breadcrumbHome.addEventListener('click', (e) => {
                     e.preventDefault();
                     navigateToSection(0);
                 });
                 
                 // Throttled scroll handler
                 let scrollTicking = false;
                 function handleScroll() {
                     if (!scrollTicking) {
                         requestAnimationFrame(() => {
                             updateBreadcrumb();
                             createSectionBreadcrumb();
                             scrollTicking = false;
                         });
                         scrollTicking = true;
                     }
                 }
                 
                 // Event listeners
                 window.addEventListener('scroll', handleScroll);
                 window.addEventListener('resize', updateBreadcrumb);
                 
                 // Update breadcrumb when tabs change
                 const tabNavigation = document.querySelector('.tab-navigation');
                 if (tabNavigation) {
                     tabNavigation.addEventListener('click', () => {
                         setTimeout(() => {
                             updateBreadcrumb();
                             createSectionBreadcrumb();
                         }, 100);
                     });
                 }
                 
                 // Keyboard navigation
                 document.addEventListener('keydown', (e) => {
                     if (e.altKey) {
                         switch(e.key) {
                             case 'ArrowLeft':
                                 e.preventDefault();
                                 if (currentSectionIndex > 0) {
                                     navigateToSection(currentSectionIndex - 1);
                                 }
                                 break;
                             case 'ArrowRight':
                                 e.preventDefault();
                                 if (currentSectionIndex < sections.length - 1) {
                                     navigateToSection(currentSectionIndex + 1);
                                 }
                                 break;
                             case 'Home':
                                 e.preventDefault();
                                 navigateToSection(0);
                                 break;
                             case 'End':
                                 e.preventDefault();
                                 navigateToSection(sections.length - 1);
                                 break;
                         }
                     }
                 });
                 
                 // Initialize after tabs are set up
                 setTimeout(() => {
                     initializeSections();
                     updateBreadcrumb();
                     createSectionBreadcrumb();
                 }, 200);
             }

             // --- FEATURE: READ TIME CALCULATION ---
             function calculateAndDisplayReadTime() {
                 const wordsPerMinute = 225;
                 
                 function calculate(element) {
                     if (!element) return 0;
                     const text = element.innerText || '';
                     const wordCount = text.trim().split(/\s+/).length;
                     const minutes = Math.ceil(wordCount / wordsPerMinute);
                     return minutes;
                 }
                 
                 // Calculate reading time for each section and sum them up
                 let totalMinutes = 0;
         
                 // Calculate for each section and add after the description paragraph
                 document.querySelectorAll('.tab-pane').forEach(pane => {
                     const sectionMinutes = calculate(pane);
                     
                     // Add this section's reading time to the total
                     totalMinutes += sectionMinutes;
                     
                     const h2Element = pane.querySelector('h2');
                     
                     if (h2Element && sectionMinutes > 0) {
                         // Remove any existing read time elements
                         const existingReadTime = pane.querySelector('.section-read-time');
                         if (existingReadTime) {
                             existingReadTime.remove();
                         }
                         
                         // Find the first paragraph after the h2 (section description)
                         let insertionPoint = h2Element.nextSibling;
                         let firstParagraph = null;
                         
                         // Walk through siblings to find the first paragraph
                         while (insertionPoint) {
                             if (insertionPoint.nodeType === 1 && insertionPoint.tagName === 'P') {
                                 firstParagraph = insertionPoint;
                                 break;
                             }
                             insertionPoint = insertionPoint.nextSibling;
                         }
                         
                         // Create new read time element
                         const readTimeDiv = document.createElement('div');
                         readTimeDiv.className = 'section-read-time';
                         readTimeDiv.style.cssText = 'margin: 0.5rem 0 1rem 0; color: var(--text-secondary); font-size: 0.875rem; display: flex; align-items: center; gap: 0.25rem;';
                         
                         const clockIcon = document.createElement('span');
                         clockIcon.className = 'icon';
                         clockIcon.textContent = 'schedule';
                         clockIcon.style.fontSize = '18px';
                         
                         const readTimeText = document.createElement('span');
                         readTimeText.textContent = `${sectionMinutes} min read`;
                         
                         readTimeDiv.appendChild(clockIcon);
                         readTimeDiv.appendChild(readTimeText);
                         
                         // Insert after the first paragraph if found, otherwise after h2
                         if (firstParagraph) {
                             firstParagraph.parentNode.insertBefore(readTimeDiv, firstParagraph.nextSibling);
                         } else {
                             h2Element.parentNode.insertBefore(readTimeDiv, h2Element.nextSibling);
                         }
                     }
                 });
                 
                 // Update the total reading time in the product header
                 const totalReadTimeEl = document.getElementById('total-read-time').querySelector('span:last-child');
                 totalReadTimeEl.textContent = `${totalMinutes} min read`;
             }
         
             // --- UTILITY: EMOJI REPLACEMENT ---
             function replaceEmojisWithIcons() {
                 const emojiToIconMap = {
                     '🔴': '<span class="icon icon-high" title="High/Critical">dangerous</span>',
                     '🟠': '<span class="icon icon-medium" title="Medium/Warning">warning</span>',
                     '🟢': '<span class="icon icon-low" title="Low/Info">recommend</span>',
                     '✅': '<span class="icon icon-check" title="Yes/Used/Supported">check_circle</span>',
                     '❌': '<span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span>',
                     '🔴': '<span class="icon icon-cross" title="No/Not Used/Unsupported">cancel</span>',
                     '❔': '<span class="icon icon-question" title="Uncertain/Likely">help</span>'
                 };
                 const emojiRegex = new RegExp(Object.keys(emojiToIconMap).join('|'), 'g');
                 function walkDOM(node) {
                     if (node.nodeType === 3) {
                         if (emojiRegex.test(node.nodeValue)) {
                             const tempWrapper = document.createElement('span');
                             tempWrapper.innerHTML = node.nodeValue.replace(emojiRegex, match => emojiToIconMap[match]);
                             node.parentNode.replaceChild(tempWrapper, node);
                         }
                     } else if (node.nodeType === 1 && node.nodeName !== 'SCRIPT' && node.nodeName !== 'STYLE') {
                         for (let i = 0; i < node.childNodes.length; i++) {
                             walkDOM(node.childNodes[i]);
                         }
                     }
                 }
                 walkDOM(document.getElementById('main-content-area'));
             }
         
             // --- UTILITY: HEADING CLEANUP ---
             function removeHeadingNumbers() {
                 const headings = document.querySelectorAll('h2, h3, h4, h5, h6');
                 const numberPrefixRegex = /^\d+\.[\d\.]*\s*/;
                 headings.forEach(heading => {
                     const firstChild = heading.childNodes[0];
                     if (firstChild && firstChild.nodeType === 3) {
                         firstChild.nodeValue = firstChild.nodeValue.replace(numberPrefixRegex, '').trim();
                     }
                 });
             }
         
             // --- CORE SETUP: TABS ---
             function setupTabs() {
                 const mainContent = document.getElementById('main-content-area');
                 const tabPlaceholder = document.getElementById('tab-container-placeholder');
                 const sections = Array.from(mainContent.querySelectorAll('.product-section'));
                 
                 if (sections.length > 0) {
                     const tabContainer = document.createElement('div');
                     tabContainer.className = 'tab-navigation-container';
                     const tabNavScroller = document.createElement('div');
                     tabNavScroller.className = 'tab-nav-scroller';
                     const tabNav = document.createElement('nav');
                     tabNav.className = 'tab-navigation';
                     const tabContent = document.createElement('div');
                     tabContent.className = 'tab-content';
         
                     let tabCounter = 0; // Separate counter for actual tabs created
         
                     sections.forEach((section, index) => {
                         const headingElement = section.querySelector('h2');
                         if (!headingElement) return;
                         
                         tabCounter++; // Increment only when a tab is actually created
                         const tabPaneId = `pane-${tabCounter}`;
                         const tabButton = document.createElement('button');
                         tabButton.className = 'tab-link';
                         const tabText = document.createElement('span');
                         tabText.textContent = headingElement.textContent.trim();
                         tabButton.appendChild(tabText);
                         tabButton.setAttribute('data-tab', tabPaneId);
                         tabNav.appendChild(tabButton);
                         
                         const tabPane = document.createElement('div');
                         tabPane.id = tabPaneId;
                         tabPane.className = 'tab-pane';
                         tabPane.appendChild(section);
                         tabContent.appendChild(tabPane);
         
                         if (tabCounter === 1) { // First actual tab created
                             tabButton.classList.add('active');
                             tabPane.classList.add('active');
                         }
                     });
         
                     tabNavScroller.appendChild(tabNav);
                     tabContainer.appendChild(tabNavScroller);
                     tabPlaceholder.appendChild(tabContainer);
                     mainContent.appendChild(tabContent);
         
                     tabNav.addEventListener('click', (e) => {
                         const clickedTab = e.target.closest('.tab-link');
                         if (!clickedTab) return;
                         tabNav.querySelectorAll('.tab-link').forEach(tab => tab.classList.remove('active'));
                         tabContent.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
                         clickedTab.classList.add('active');
                         document.getElementById(clickedTab.dataset.tab)?.classList.add('active');
                     });
         
                     // After tabs are in the DOM, calculate read times
                     calculateAndDisplayReadTime();
                 }
             }
         
             function detectDiagramType(code) {
                 const trimmedCode = code.trim().toLowerCase();
                 
                 if (trimmedCode.startsWith('graph') || trimmedCode.startsWith('flowchart')) return 'flowchart';
                 if (trimmedCode.startsWith('sequencediagram')) return 'sequence';
                 if (trimmedCode.startsWith('classdiagram')) return 'class';
                 if (trimmedCode.startsWith('statediagram')) return 'state';
                 if (trimmedCode.startsWith('erdiagram')) return 'er';
                 if (trimmedCode.startsWith('gantt')) return 'gantt';
                 if (trimmedCode.startsWith('journey')) return 'user-journey';
                 if (trimmedCode.startsWith('gitgraph')) return 'git';
                 if (trimmedCode.startsWith('pie')) return 'pie';
                 if (trimmedCode.startsWith('mindmap')) return 'mindmap';
                 if (trimmedCode.startsWith('timeline')) return 'timeline';
                 if (trimmedCode.startsWith('zenuml')) return 'zenuml';
                 if (trimmedCode.startsWith('quadrantchart')) return 'quadrant';
                 if (trimmedCode.startsWith('xychart')) return 'xy-chart';
                 if (trimmedCode.startsWith('block')) return 'block';
                 if (trimmedCode.startsWith('packet')) return 'packet';
                 if (trimmedCode.startsWith('treemap')) return 'treemap';
                 
                 return 'unknown';
             }
             
             function validateAndFixMermaidSyntax(code) {
                 let fixedCode = code.trim();
                 
                 // First, decode HTML entities that might cause parsing issues
                 fixedCode = fixedCode
                     .replace(/&amp;/g, '&')
                     .replace(/&lt;br&gt;/g, '<br>') // Handle HTML line breaks first
                     .replace(/&lt;/g, '<')
                     .replace(/&gt;/g, '>')
                     .replace(/&#39;/g, "'")
                     .replace(/&quot;/g, '"')
                     .replace(/&nbsp;/g, ' ')
                     .replace(/&apos;/g, "'");
                 
                 // Detect diagram type
                 const diagramType = detectDiagramType(fixedCode);
                 
                 // Handle unknown diagram types by converting to flowchart if possible
                 if (diagramType === 'unknown') {
                     console.warn('Unknown diagram type, attempting to render as-is');
                 }
                 
                 // Fix common syntax issues based on diagram type
                 switch (diagramType) {
                     case 'flowchart':
                         // Ensure flowchart has proper direction
                         if (!fixedCode.match(/(TD|TB|BT|RL|LR)/)) {
                             fixedCode = fixedCode.replace(/^(flowchart|graph)/, '$1 TD');
                         }
                         
                         // Fix specific pattern: node labels with <br> and file paths
                         // This pattern is causing the parser error: [Label<br>/path/file.xhtml]
                         fixedCode = fixedCode.replace(/\[([^\[\]]*)<br>([^\[\]]*)\]/g, (match, label, path) => {
                             // Clean the label and path, replace problematic characters
                             const cleanLabel = label.trim();
                             const cleanPath = path.trim()
                                 .replace(/\//g, '∕') // Replace forward slashes with math division symbol
                                 .replace(/\./g, '·'); // Replace dots with middle dot
                             return `["${cleanLabel}\\n${cleanPath}"]`; // Use quoted strings for safety
                         });
                         
                         // Handle similar pattern in parentheses
                         fixedCode = fixedCode.replace(/\(([^\(\)]*)<br>([^\(\)]*)\)/g, (match, label, path) => {
                             const cleanLabel = label.trim();
                             const cleanPath = path.trim()
                                 .replace(/\//g, '∕')
                                 .replace(/\./g, '·');
                             return `("${cleanLabel}\\n${cleanPath}")`;
                         });
                         
                         // Fix node labels with parentheses that can cause parsing issues
                         // Pattern: A[Label (with parentheses)] --> B
                         fixedCode = fixedCode.replace(/(\w+)\[([^\[\]]*\([^\[\]]*\)[^\[\]]*)\]/g, (match, nodeId, label) => {
                             // Wrap labels containing parentheses in quotes
                             const cleanLabel = label.replace(/"/g, '\\"'); // Escape existing quotes
                             return `${nodeId}["${cleanLabel}"]`;
                         });
                         
                         // Fix incomplete arrow syntax - ensure arrows have proper targets
                         // Pattern: A[Label] - (incomplete arrow at end of line)
                         fixedCode = fixedCode.replace(/(\w+\[[^\]]+\]|\w+\([^)]+\)|\w+)\s+--?\s*$/gm, (match, source) => {
                             // If we find an incomplete arrow at end of line, remove it entirely
                             console.warn('Removing incomplete arrow syntax:', match.trim());
                             return source.trim();
                         });
                         
                         // Fix common arrow syntax issues
                         fixedCode = fixedCode
                             .replace(/--&gt;/g, '-->')  // Fix any remaining HTML entities in arrows
                             .replace(/-->/g, ' --> ') // Ensure proper spacing around arrows
                             .replace(/\s+-->\s+/g, ' --> ') // Clean up multiple spaces
                             .replace(/\[\s+/g, '[') // Remove extra spaces after opening brackets
                             .replace(/\s+\]/g, ']') // Remove extra spaces before closing brackets
                             .replace(/\(\s+/g, '(') // Remove extra spaces after opening parentheses
                             .replace(/\s+\)/g, ')') // Remove extra spaces before closing parentheses
                             .replace(/\{\s+/g, '{') // Remove extra spaces after opening braces
                             .replace(/\s+\}/g, '}'); // Remove extra spaces before closing braces
                         
                         // Handle any remaining line breaks in node labels
                         fixedCode = fixedCode.replace(/<br>/gi, '\\n'); // Convert HTML breaks to Mermaid line breaks
                         
                         break;
                         
                     case 'mindmap':
                         // Ensure mindmap has proper structure
                         if (!fixedCode.includes('root(')) {
                             // If incomplete mindmap, add basic structure
                             const lines = fixedCode.split('\n');
                             if (lines.length > 1 && lines[0].trim() === 'mindmap') {
                                 // Wrap content in root node
                                 const content = lines.slice(1).join('\n').trim();
                                 if (content) {
                                     fixedCode = `mindmap\n  root((${content.split('\n')[0] || 'Root'}))\n${content}`;
                                 }
                             }
                         }
                         // Remove or fix invalid icon syntax for older versions
                         fixedCode = fixedCode.replace(/::icon\([^)]+\)/g, '');
                         break;
                         
                     case 'user-journey':
                         // Ensure journey diagram has proper structure
                         if (!fixedCode.includes('title')) {
                             const lines = fixedCode.split('\n');
                             if (lines.length > 1 && lines[0].trim() === 'journey') {
                                 lines.splice(1, 0, '    title User Journey');
                                 fixedCode = lines.join('\n');
                             }
                         }
                         break;
                         
                     case 'timeline':
                         // Timeline diagrams should have proper structure
                         if (!fixedCode.includes('title')) {
                             const lines = fixedCode.split('\n');
                             if (lines.length > 1 && lines[0].trim() === 'timeline') {
                                 lines.splice(1, 0, '  title Timeline');
                                 fixedCode = lines.join('\n');
                             }
                         }
                         break;
                 }
                 
                 // Final cleanup - remove any remaining problematic characters
                 fixedCode = fixedCode
                     .replace(/\r\n/g, '\n') // Normalize line endings
                     .replace(/\r/g, '\n')   // Convert old Mac line endings
                     .split('\n')
                     .map(line => line.trimRight()) // Remove trailing whitespace from each line
                     .join('\n')
                     .replace(/\n\s*\n\s*\n/g, '\n\n'); // Remove excessive blank lines
                 
                 return fixedCode;
             }
             
             // Function to re-render diagrams when theme changes
             function updateMermaidTheme() {
                 const isDarkMode = document.documentElement.classList.contains('dark-mode') || 
                                   document.documentElement.getAttribute('data-theme') === 'dark' ||
                                   window.matchMedia('(prefers-color-scheme: dark)').matches;
                 
                 try {
                     console.log(`Updating Mermaid theme to ${isDarkMode ? 'dark' : 'light'} mode`);
                     
                     // Step 1: Clear all existing rendered containers and reset processed state
                     const containers = document.querySelectorAll('.mermaid-container');
                     const preBlocks = document.querySelectorAll('pre.mermaid');
                     
                     containers.forEach(container => {
                         container.remove();
                     });
                     
                     preBlocks.forEach(preBlock => {
                         preBlock.classList.remove('mermaid-processed');
                         preBlock.style.display = 'block'; // Show original blocks temporarily
                     });
                     
                     // Step 2: Re-initialize Mermaid with new theme configuration
                     initializeMermaidRendering(); // Use the same initialization function as initial load
                     
                     // Step 3: Re-render all diagrams using the complete rendering process
                     setTimeout(() => {
                         renderMermaidDiagrams(); // Use the same rendering function as initial load
                         console.log(`Mermaid theme successfully updated to ${isDarkMode ? 'dark' : 'light'} mode`);
                     }, 100); // Small delay to ensure initialization is complete
                     
                 } catch (error) {
                     console.error('Error updating Mermaid theme:', error);
                 }
             }
         
             // --- RUN EVERYTHING ---
             // Add a small delay to ensure DOM is fully loaded
             setTimeout(() => {
                 init();
             }, 10);
         
         });
      </script>

   </body>
</html>
